
letGPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800a588  0800a588  0001a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a934  0800a934  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a93c  0800a93c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001e8  0800ab2c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800ab2c  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120a0  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d68  00000000  00000000  000322fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d57  00000000  00000000  00036178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185b7  00000000  00000000  00036ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164d5  00000000  00000000  0004f486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091c34  00000000  00000000  0006595b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005850  00000000  00000000  000f7590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fcde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a570 	.word	0x0800a570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a570 	.word	0x0800a570

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <HAL_Delay_us>:
#include "dht11.h"
#include "tim.h"
void HAL_Delay_us(uint32_t nus)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
//HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000000);
////??nus
//HAL_Delay(nus-1);
////??systic???1ms
//HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	delayXus(nus);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fc3b 	bl	800277c <delayXus>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <GPIO_mode_out>:

void GPIO_mode_out()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f24:	2320      	movs	r3, #32
 8000f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <GPIO_mode_out+0x38>)
 8000f3a:	f002 fc25 	bl	8003788 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020800 	.word	0x40020800

08000f4c <GPIO_mode_in>:

void GPIO_mode_in()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f60:	2320      	movs	r3, #32
 8000f62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <GPIO_mode_in+0x34>)
 8000f72:	f002 fc09 	bl	8003788 <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020800 	.word	0x40020800

08000f84 <DHT11_Rst>:


//Reset DHT11
void DHT11_Rst(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
		GPIO_mode_out(); 	//SET OUTPUT
 8000f88:	f7ff ffc2 	bl	8000f10 <GPIO_mode_out>
    DHT11_DQ_OUT_OFF; 	//GPIOA.0=0
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <DHT11_Rst+0x2c>)
 8000f92:	f002 fd95 	bl	8003ac0 <HAL_GPIO_WritePin>
		//HAL_Delay_us(30);
    HAL_Delay(20);    	//Pull down Least 18ms
 8000f96:	2014      	movs	r0, #20
 8000f98:	f001 febe 	bl	8002d18 <HAL_Delay>
    DHT11_DQ_OUT_ON; 	//GPIOA.0=1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <DHT11_Rst+0x2c>)
 8000fa2:	f002 fd8d 	bl	8003ac0 <HAL_GPIO_WritePin>
		HAL_Delay_us(30);     	//Pull up 20~40us
 8000fa6:	201e      	movs	r0, #30
 8000fa8:	f7ff ffa4 	bl	8000ef4 <HAL_Delay_us>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <DHT11_Check>:

uint8_t DHT11_Check(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint8_t retry=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	GPIO_mode_in();//SET INPUT
 8000fbe:	f7ff ffc5 	bl	8000f4c <GPIO_mode_in>
    while (DHT11_DQ_IN&&retry<100)//DHT11 Pull down 40~80us
 8000fc2:	e005      	b.n	8000fd0 <DHT11_Check+0x1c>
	{
		retry++;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay_us(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff ff92 	bl	8000ef4 <HAL_Delay_us>
    while (DHT11_DQ_IN&&retry<100)//DHT11 Pull down 40~80us
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <DHT11_Check+0x74>)
 8000fd4:	f002 fd5c 	bl	8003a90 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <DHT11_Check+0x30>
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b63      	cmp	r3, #99	; 0x63
 8000fe2:	d9ef      	bls.n	8000fc4 <DHT11_Check+0x10>
	};
	if(retry>=100)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b63      	cmp	r3, #99	; 0x63
 8000fe8:	d901      	bls.n	8000fee <DHT11_Check+0x3a>
		return 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e018      	b.n	8001020 <DHT11_Check+0x6c>
	else
		retry=0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    while (!DHT11_DQ_IN&&retry<100)//DHT11 Pull up 40~80us
 8000ff2:	e005      	b.n	8001000 <DHT11_Check+0x4c>
	{
		retry++;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay_us(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff ff7a 	bl	8000ef4 <HAL_Delay_us>
    while (!DHT11_DQ_IN&&retry<100)//DHT11 Pull up 40~80us
 8001000:	2120      	movs	r1, #32
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <DHT11_Check+0x74>)
 8001004:	f002 fd44 	bl	8003a90 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <DHT11_Check+0x60>
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b63      	cmp	r3, #99	; 0x63
 8001012:	d9ef      	bls.n	8000ff4 <DHT11_Check+0x40>
	};
	if(retry>=100)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b63      	cmp	r3, #99	; 0x63
 8001018:	d901      	bls.n	800101e <DHT11_Check+0x6a>
		return 1;//chack error
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <DHT11_Check+0x6c>
	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40020800 	.word	0x40020800

0800102c <DHT11_Read_Bit>:

uint8_t DHT11_Read_Bit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 	uint8_t retry=0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
	while(DHT11_DQ_IN&&retry<100)//wait become Low level
 8001036:	e005      	b.n	8001044 <DHT11_Read_Bit+0x18>
	{
		retry++;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	3301      	adds	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay_us(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ff58 	bl	8000ef4 <HAL_Delay_us>
	while(DHT11_DQ_IN&&retry<100)//wait become Low level
 8001044:	2120      	movs	r1, #32
 8001046:	4816      	ldr	r0, [pc, #88]	; (80010a0 <DHT11_Read_Bit+0x74>)
 8001048:	f002 fd22 	bl	8003a90 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <DHT11_Read_Bit+0x2c>
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b63      	cmp	r3, #99	; 0x63
 8001056:	d9ef      	bls.n	8001038 <DHT11_Read_Bit+0xc>
	}
	retry=0;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
	while(!DHT11_DQ_IN&&retry<100)//wait become High level
 800105c:	e005      	b.n	800106a <DHT11_Read_Bit+0x3e>
	{
		retry++;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	3301      	adds	r3, #1
 8001062:	71fb      	strb	r3, [r7, #7]
		HAL_Delay_us(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff ff45 	bl	8000ef4 <HAL_Delay_us>
	while(!DHT11_DQ_IN&&retry<100)//wait become High level
 800106a:	2120      	movs	r1, #32
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <DHT11_Read_Bit+0x74>)
 800106e:	f002 fd0f 	bl	8003a90 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <DHT11_Read_Bit+0x52>
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b63      	cmp	r3, #99	; 0x63
 800107c:	d9ef      	bls.n	800105e <DHT11_Read_Bit+0x32>
	}
	HAL_Delay_us(40);//wait 40us
 800107e:	2028      	movs	r0, #40	; 0x28
 8001080:	f7ff ff38 	bl	8000ef4 <HAL_Delay_us>
	if(DHT11_DQ_IN)
 8001084:	2120      	movs	r1, #32
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <DHT11_Read_Bit+0x74>)
 8001088:	f002 fd02 	bl	8003a90 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <DHT11_Read_Bit+0x6a>
		return 1;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <DHT11_Read_Bit+0x6c>
	else
		return 0;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020800 	.word	0x40020800

080010a4 <DHT11_Read_Byte>:

uint8_t DHT11_Read_Byte(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
    uint8_t i,dat;
    dat=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	e00c      	b.n	80010ce <DHT11_Read_Byte+0x2a>
	{
   		dat<<=1;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	71bb      	strb	r3, [r7, #6]
	    dat|=DHT11_Read_Bit();
 80010ba:	f7ff ffb7 	bl	800102c <DHT11_Read_Bit>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
	for (i=0;i<8;i++)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	3301      	adds	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d9ef      	bls.n	80010b4 <DHT11_Read_Byte+0x10>
    }
    return dat;
 80010d4:	79bb      	ldrb	r3, [r7, #6]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <DHT11_Read_Data>:

uint8_t DHT11_Read_Data(uint8_t *temperature,uint8_t *humidity)
{
 80010de:	b590      	push	{r4, r7, lr}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
 	uint8_t buf[5];
	uint8_t i;
	DHT11_Rst();
 80010e8:	f7ff ff4c 	bl	8000f84 <DHT11_Rst>
	if(DHT11_Check()==0)
 80010ec:	f7ff ff62 	bl	8000fb4 <DHT11_Check>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d124      	bne.n	8001140 <DHT11_Read_Data+0x62>
	{
		for(i=0;i<5;i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e00c      	b.n	8001116 <DHT11_Read_Data+0x38>
		{
			buf[i]=DHT11_Read_Byte();
 80010fc:	7bfc      	ldrb	r4, [r7, #15]
 80010fe:	f7ff ffd1 	bl	80010a4 <DHT11_Read_Byte>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	f104 0310 	add.w	r3, r4, #16
 800110a:	443b      	add	r3, r7
 800110c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(i=0;i<5;i++)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	3301      	adds	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d9ef      	bls.n	80010fc <DHT11_Read_Data+0x1e>
		}
		if((buf[0]+buf[1]+buf[2]+buf[3])==buf[4])
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	461a      	mov	r2, r3
 8001120:	7a7b      	ldrb	r3, [r7, #9]
 8001122:	4413      	add	r3, r2
 8001124:	7aba      	ldrb	r2, [r7, #10]
 8001126:	4413      	add	r3, r2
 8001128:	7afa      	ldrb	r2, [r7, #11]
 800112a:	4413      	add	r3, r2
 800112c:	7b3a      	ldrb	r2, [r7, #12]
 800112e:	4293      	cmp	r3, r2
 8001130:	d108      	bne.n	8001144 <DHT11_Read_Data+0x66>
		{
			*humidity=buf[0];
 8001132:	7a3a      	ldrb	r2, [r7, #8]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	701a      	strb	r2, [r3, #0]
			*temperature=buf[2];
 8001138:	7aba      	ldrb	r2, [r7, #10]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e001      	b.n	8001144 <DHT11_Read_Data+0x66>
		}
	}
	else
		return 1;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <DHT11_Read_Data+0x68>
	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
	...

08001150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_DMA_Init+0x78>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <MX_DMA_Init+0x78>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_DMA_Init+0x78>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_DMA_Init+0x78>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_DMA_Init+0x78>)
 800117c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_DMA_Init+0x78>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2010      	movs	r0, #16
 8001194:	f001 febf 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001198:	2010      	movs	r0, #16
 800119a:	f001 fed8 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2039      	movs	r0, #57	; 0x39
 80011a4:	f001 feb7 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011a8:	2039      	movs	r0, #57	; 0x39
 80011aa:	f001 fed0 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	203a      	movs	r0, #58	; 0x3a
 80011b4:	f001 feaf 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011b8:	203a      	movs	r0, #58	; 0x3a
 80011ba:	f001 fec8 	bl	8002f4e <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <configuration_set>:
#define LIDAR_ADD 0x62<<1
uint8_t cmd[1];
uint8_t data[2]={10};

void configuration_set(int configur)      // configuration setting for lidar. it provide different mode of detection
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	6078      	str	r0, [r7, #4]

	cmd[0] = 0x04;
 80011d4:	4ba6      	ldr	r3, [pc, #664]	; (8001470 <configuration_set+0x2a4>)
 80011d6:	2204      	movs	r2, #4
 80011d8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x00,1,cmd,1,0x100);
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	4ba2      	ldr	r3, [pc, #648]	; (8001470 <configuration_set+0x2a4>)
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	2200      	movs	r2, #0
 80011ec:	21c4      	movs	r1, #196	; 0xc4
 80011ee:	48a1      	ldr	r0, [pc, #644]	; (8001474 <configuration_set+0x2a8>)
 80011f0:	f003 f8e8 	bl	80043c4 <HAL_I2C_Mem_Write>
	switch(configur)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	f200 8136 	bhi.w	8001468 <configuration_set+0x29c>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <configuration_set+0x38>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	0800121d 	.word	0x0800121d
 8001208:	0800127f 	.word	0x0800127f
 800120c:	080012e1 	.word	0x080012e1
 8001210:	08001343 	.word	0x08001343
 8001214:	080013a5 	.word	0x080013a5
 8001218:	08001407 	.word	0x08001407
	{
	case 0://default mode , balance mode
		cmd[0]=0x80;
 800121c:	4b94      	ldr	r3, [pc, #592]	; (8001470 <configuration_set+0x2a4>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	2301      	movs	r3, #1
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	4b90      	ldr	r3, [pc, #576]	; (8001470 <configuration_set+0x2a4>)
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	2202      	movs	r2, #2
 8001234:	21c4      	movs	r1, #196	; 0xc4
 8001236:	488f      	ldr	r0, [pc, #572]	; (8001474 <configuration_set+0x2a8>)
 8001238:	f003 f8c4 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x04;
 800123c:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <configuration_set+0x2a4>)
 800123e:	2204      	movs	r2, #4
 8001240:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2301      	movs	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b88      	ldr	r3, [pc, #544]	; (8001470 <configuration_set+0x2a4>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2204      	movs	r2, #4
 8001254:	21c4      	movs	r1, #196	; 0xc4
 8001256:	4887      	ldr	r0, [pc, #540]	; (8001474 <configuration_set+0x2a8>)
 8001258:	f003 f8b4 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <configuration_set+0x2a4>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	4b80      	ldr	r3, [pc, #512]	; (8001470 <configuration_set+0x2a4>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	221c      	movs	r2, #28
 8001274:	21c4      	movs	r1, #196	; 0xc4
 8001276:	487f      	ldr	r0, [pc, #508]	; (8001474 <configuration_set+0x2a8>)
 8001278:	f003 f8a4 	bl	80043c4 <HAL_I2C_Mem_Write>
		break;
 800127c:	e0f4      	b.n	8001468 <configuration_set+0x29c>

	case 1://short range, high speed
		cmd[0]=0x1d;
 800127e:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <configuration_set+0x2a4>)
 8001280:	221d      	movs	r2, #29
 8001282:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	4b78      	ldr	r3, [pc, #480]	; (8001470 <configuration_set+0x2a4>)
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	2202      	movs	r2, #2
 8001296:	21c4      	movs	r1, #196	; 0xc4
 8001298:	4876      	ldr	r0, [pc, #472]	; (8001474 <configuration_set+0x2a8>)
 800129a:	f003 f893 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <configuration_set+0x2a4>)
 80012a0:	2208      	movs	r2, #8
 80012a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b70      	ldr	r3, [pc, #448]	; (8001470 <configuration_set+0x2a4>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2204      	movs	r2, #4
 80012b6:	21c4      	movs	r1, #196	; 0xc4
 80012b8:	486e      	ldr	r0, [pc, #440]	; (8001474 <configuration_set+0x2a8>)
 80012ba:	f003 f883 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 80012be:	4b6c      	ldr	r3, [pc, #432]	; (8001470 <configuration_set+0x2a4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <configuration_set+0x2a4>)
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	221c      	movs	r2, #28
 80012d6:	21c4      	movs	r1, #196	; 0xc4
 80012d8:	4866      	ldr	r0, [pc, #408]	; (8001474 <configuration_set+0x2a8>)
 80012da:	f003 f873 	bl	80043c4 <HAL_I2C_Mem_Write>
		break;
 80012de:	e0c3      	b.n	8001468 <configuration_set+0x29c>

	case 2://default range, higher speed short range
		cmd[0]=0x80;
 80012e0:	4b63      	ldr	r3, [pc, #396]	; (8001470 <configuration_set+0x2a4>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <configuration_set+0x2a4>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	2202      	movs	r2, #2
 80012f8:	21c4      	movs	r1, #196	; 0xc4
 80012fa:	485e      	ldr	r0, [pc, #376]	; (8001474 <configuration_set+0x2a8>)
 80012fc:	f003 f862 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <configuration_set+0x2a4>)
 8001302:	2208      	movs	r2, #8
 8001304:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	4b57      	ldr	r3, [pc, #348]	; (8001470 <configuration_set+0x2a4>)
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	2204      	movs	r2, #4
 8001318:	21c4      	movs	r1, #196	; 0xc4
 800131a:	4856      	ldr	r0, [pc, #344]	; (8001474 <configuration_set+0x2a8>)
 800131c:	f003 f852 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <configuration_set+0x2a4>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <configuration_set+0x2a4>)
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	221c      	movs	r2, #28
 8001338:	21c4      	movs	r1, #196	; 0xc4
 800133a:	484e      	ldr	r0, [pc, #312]	; (8001474 <configuration_set+0x2a8>)
 800133c:	f003 f842 	bl	80043c4 <HAL_I2C_Mem_Write>
		break;
 8001340:	e092      	b.n	8001468 <configuration_set+0x29c>


	case 3://maximum Range
		cmd[0]=0xff;
 8001342:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <configuration_set+0x2a4>)
 8001344:	22ff      	movs	r2, #255	; 0xff
 8001346:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2301      	movs	r3, #1
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <configuration_set+0x2a4>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2301      	movs	r3, #1
 8001358:	2202      	movs	r2, #2
 800135a:	21c4      	movs	r1, #196	; 0xc4
 800135c:	4845      	ldr	r0, [pc, #276]	; (8001474 <configuration_set+0x2a8>)
 800135e:	f003 f831 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 8001362:	4b43      	ldr	r3, [pc, #268]	; (8001470 <configuration_set+0x2a4>)
 8001364:	2208      	movs	r2, #8
 8001366:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2301      	movs	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <configuration_set+0x2a4>)
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	2204      	movs	r2, #4
 800137a:	21c4      	movs	r1, #196	; 0xc4
 800137c:	483d      	ldr	r0, [pc, #244]	; (8001474 <configuration_set+0x2a8>)
 800137e:	f003 f821 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x00;
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <configuration_set+0x2a4>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2301      	movs	r3, #1
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <configuration_set+0x2a4>)
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2301      	movs	r3, #1
 8001398:	221c      	movs	r2, #28
 800139a:	21c4      	movs	r1, #196	; 0xc4
 800139c:	4835      	ldr	r0, [pc, #212]	; (8001474 <configuration_set+0x2a8>)
 800139e:	f003 f811 	bl	80043c4 <HAL_I2C_Mem_Write>
		break;
 80013a2:	e061      	b.n	8001468 <configuration_set+0x29c>

	case 4://high sensitivity detection, high  measurement
		cmd[0]=0x80;
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <configuration_set+0x2a4>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <configuration_set+0x2a4>)
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	2202      	movs	r2, #2
 80013bc:	21c4      	movs	r1, #196	; 0xc4
 80013be:	482d      	ldr	r0, [pc, #180]	; (8001474 <configuration_set+0x2a8>)
 80013c0:	f003 f800 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <configuration_set+0x2a4>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <configuration_set+0x2a4>)
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	2204      	movs	r2, #4
 80013dc:	21c4      	movs	r1, #196	; 0xc4
 80013de:	4825      	ldr	r0, [pc, #148]	; (8001474 <configuration_set+0x2a8>)
 80013e0:	f002 fff0 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x80;
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <configuration_set+0x2a4>)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <configuration_set+0x2a4>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	221c      	movs	r2, #28
 80013fc:	21c4      	movs	r1, #196	; 0xc4
 80013fe:	481d      	ldr	r0, [pc, #116]	; (8001474 <configuration_set+0x2a8>)
 8001400:	f002 ffe0 	bl	80043c4 <HAL_I2C_Mem_Write>
		break;
 8001404:	e030      	b.n	8001468 <configuration_set+0x29c>

	case 5://low sensitivity detection , low  measurement
		cmd[0]=0x80;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <configuration_set+0x2a4>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x02,1,cmd,1,0x1000);
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2301      	movs	r3, #1
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <configuration_set+0x2a4>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	2202      	movs	r2, #2
 800141e:	21c4      	movs	r1, #196	; 0xc4
 8001420:	4814      	ldr	r0, [pc, #80]	; (8001474 <configuration_set+0x2a8>)
 8001422:	f002 ffcf 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0x08;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <configuration_set+0x2a4>)
 8001428:	2208      	movs	r2, #8
 800142a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x04,1,cmd,1,0x1000);
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <configuration_set+0x2a4>)
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	2204      	movs	r2, #4
 800143e:	21c4      	movs	r1, #196	; 0xc4
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <configuration_set+0x2a8>)
 8001442:	f002 ffbf 	bl	80043c4 <HAL_I2C_Mem_Write>
		cmd[0]=0xb0;
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <configuration_set+0x2a4>)
 8001448:	22b0      	movs	r2, #176	; 0xb0
 800144a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x1c,1,cmd,1,0x1000);
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <configuration_set+0x2a4>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	221c      	movs	r2, #28
 800145e:	21c4      	movs	r1, #196	; 0xc4
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <configuration_set+0x2a8>)
 8001462:	f002 ffaf 	bl	80043c4 <HAL_I2C_Mem_Write>
		break;
 8001466:	bf00      	nop
	}
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000204 	.word	0x20000204
 8001474:	20000208 	.word	0x20000208

08001478 <Get_distance>:

int Get_distance()     // function to get distance
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	int m_distance=0;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
	cmd[0]=0x04;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <Get_distance+0x68>)
 8001484:	2204      	movs	r2, #4
 8001486:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,LIDAR_ADD ,0x00,1,cmd,1,100);
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2301      	movs	r3, #1
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <Get_distance+0x68>)
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	2200      	movs	r2, #0
 8001498:	21c4      	movs	r1, #196	; 0xc4
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <Get_distance+0x6c>)
 800149c:	f002 ff92 	bl	80043c4 <HAL_I2C_Mem_Write>
	cmd[0]=0x8f;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <Get_distance+0x68>)
 80014a2:	228f      	movs	r2, #143	; 0x8f
 80014a4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,LIDAR_ADD,cmd,1,100);
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <Get_distance+0x68>)
 80014ae:	21c4      	movs	r1, #196	; 0xc4
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <Get_distance+0x6c>)
 80014b2:	f002 fc63 	bl	8003d7c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,LIDAR_ADD,data,2,100);
 80014b6:	2364      	movs	r3, #100	; 0x64
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2302      	movs	r3, #2
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <Get_distance+0x70>)
 80014be:	21c4      	movs	r1, #196	; 0xc4
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <Get_distance+0x6c>)
 80014c2:	f002 fd59 	bl	8003f78 <HAL_I2C_Master_Receive>
	m_distance = (data[0]<<8)|(data[1]);
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <Get_distance+0x70>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <Get_distance+0x70>)
 80014ce:	7852      	ldrb	r2, [r2, #1]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	607b      	str	r3, [r7, #4]
	return m_distance ;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000204 	.word	0x20000204
 80014e4:	20000208 	.word	0x20000208
 80014e8:	20000000 	.word	0x20000000

080014ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a47      	ldr	r2, [pc, #284]	; (8001628 <MX_GPIO_Init+0x13c>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b45      	ldr	r3, [pc, #276]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a40      	ldr	r2, [pc, #256]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <MX_GPIO_Init+0x13c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <MX_GPIO_Init+0x13c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a32      	ldr	r2, [pc, #200]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <MX_GPIO_Init+0x13c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|DIR1_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	21a0      	movs	r1, #160	; 0xa0
 8001576:	482d      	ldr	r0, [pc, #180]	; (800162c <MX_GPIO_Init+0x140>)
 8001578:	f002 faa2 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001582:	482b      	ldr	r0, [pc, #172]	; (8001630 <MX_GPIO_Init+0x144>)
 8001584:	f002 fa9c 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4829      	ldr	r0, [pc, #164]	; (8001634 <MX_GPIO_Init+0x148>)
 800158e:	f002 fa97 	bl	8003ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001598:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4820      	ldr	r0, [pc, #128]	; (800162c <MX_GPIO_Init+0x140>)
 80015aa:	f002 f8ed 	bl	8003788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|DIR1_Pin;
 80015ae:	23a0      	movs	r3, #160	; 0xa0
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4819      	ldr	r0, [pc, #100]	; (800162c <MX_GPIO_Init+0x140>)
 80015c6:	f002 f8df 	bl	8003788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80015ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4813      	ldr	r0, [pc, #76]	; (800162c <MX_GPIO_Init+0x140>)
 80015e0:	f002 f8d2 	bl	8003788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80015e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <MX_GPIO_Init+0x144>)
 80015fe:	f002 f8c3 	bl	8003788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_GPIO_Init+0x148>)
 800161a:	f002 f8b5 	bl	8003788 <HAL_GPIO_Init>

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020800 	.word	0x40020800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400

08001638 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_I2C1_Init+0x50>)
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <MX_I2C1_Init+0x54>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_I2C1_Init+0x50>)
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <MX_I2C1_Init+0x58>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 2;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_I2C1_Init+0x50>)
 8001650:	2202      	movs	r2, #2
 8001652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_I2C1_Init+0x50>)
 8001656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_I2C1_Init+0x50>)
 8001676:	f002 fa3d 	bl	8003af4 <HAL_I2C_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001680:	f000 fcc8 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000208 	.word	0x20000208
 800168c:	40005400 	.word	0x40005400
 8001690:	000186a0 	.word	0x000186a0

08001694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_I2C_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12c      	bne.n	8001710 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d8:	2312      	movs	r3, #18
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e4:	2304      	movs	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <HAL_I2C_MspInit+0x8c>)
 80016f0:	f002 f84a 	bl	8003788 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_I2C_MspInit+0x88>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40005400 	.word	0x40005400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020400 	.word	0x40020400

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f001 fa83 	bl	8002c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f917 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f7ff fedb 	bl	80014ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001736:	f7ff fd0b 	bl	8001150 <MX_DMA_Init>
  MX_TIM2_Init();
 800173a:	f000 fe1d 	bl	8002378 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800173e:	f001 f86d 	bl	800281c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001742:	f000 ff15 	bl	8002570 <MX_TIM11_Init>
  MX_I2C1_Init();
 8001746:	f7ff ff77 	bl	8001638 <MX_I2C1_Init>
  MX_TIM3_Init();
 800174a:	f000 fe89 	bl	8002460 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800174e:	f001 f83b 	bl	80027c8 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8001752:	f000 fee9 	bl	8002528 <MX_TIM10_Init>
  MX_TIM1_Init();
 8001756:	f000 fdbf 	bl	80022d8 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800175a:	f001 f889 	bl	8002870 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800175e:	486e      	ldr	r0, [pc, #440]	; (8001918 <main+0x1f4>)
 8001760:	f003 ffd6 	bl	8005710 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	486c      	ldr	r0, [pc, #432]	; (800191c <main+0x1f8>)
 800176c:	f002 f9a8 	bl	8003ac0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001770:	2104      	movs	r1, #4
 8001772:	486b      	ldr	r0, [pc, #428]	; (8001920 <main+0x1fc>)
 8001774:	f004 f900 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001778:	2100      	movs	r1, #0
 800177a:	4869      	ldr	r0, [pc, #420]	; (8001920 <main+0x1fc>)
 800177c:	f004 f8fc 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	4868      	ldr	r0, [pc, #416]	; (8001924 <main+0x200>)
 8001784:	f004 f8f8 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001788:	2104      	movs	r1, #4
 800178a:	4866      	ldr	r0, [pc, #408]	; (8001924 <main+0x200>)
 800178c:	f004 f8f4 	bl	8005978 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim11);
 8001790:	4865      	ldr	r0, [pc, #404]	; (8001928 <main+0x204>)
 8001792:	f004 f83f 	bl	8005814 <HAL_TIM_Base_Start_IT>
	configuration_set(4);
 8001796:	2004      	movs	r0, #4
 8001798:	f7ff fd18 	bl	80011cc <configuration_set>

	setCamera();
 800179c:	f000 fb48 	bl	8001e30 <setCamera>

	int timerTick = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
	int speed = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
	int max_Speed = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
	int speed_signal = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
	int dir_signal = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]

	if (HAL_UART_Receive_DMA(&huart1, buffer, 13) != HAL_OK)
 80017b4:	220d      	movs	r2, #13
 80017b6:	495d      	ldr	r1, [pc, #372]	; (800192c <main+0x208>)
 80017b8:	485d      	ldr	r0, [pc, #372]	; (8001930 <main+0x20c>)
 80017ba:	f004 ff30 	bl	800661e <HAL_UART_Receive_DMA>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <main+0xa4>
		Error_Handler();
 80017c4:	f000 fc26 	bl	8002014 <Error_Handler>
	if (HAL_UART_Receive_DMA(&huart2, buffer, 13) != HAL_OK)
 80017c8:	220d      	movs	r2, #13
 80017ca:	4958      	ldr	r1, [pc, #352]	; (800192c <main+0x208>)
 80017cc:	4859      	ldr	r0, [pc, #356]	; (8001934 <main+0x210>)
 80017ce:	f004 ff26 	bl	800661e <HAL_UART_Receive_DMA>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <main+0xb8>
		Error_Handler();
 80017d8:	f000 fc1c 	bl	8002014 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		set_motors();
 80017dc:	f000 faf2 	bl	8001dc4 <set_motors>





		if(__HAL_TIM_GET_COUNTER(&htim11) > 65000){
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <main+0x204>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d9f6      	bls.n	80017dc <main+0xb8>
			timerTick++;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
			__HAL_TIM_SetCounter(&htim11,0);
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <main+0x204>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24

			if(timerTick %70 == 0 ){
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <main+0x214>)
 8001800:	fb82 1203 	smull	r1, r2, r2, r3
 8001804:	441a      	add	r2, r3
 8001806:	1191      	asrs	r1, r2, #6
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	1a8a      	subs	r2, r1, r2
 800180c:	2146      	movs	r1, #70	; 0x46
 800180e:	fb01 f202 	mul.w	r2, r1, r2
 8001812:	1a9a      	subs	r2, r3, r2
 8001814:	2a00      	cmp	r2, #0
 8001816:	d101      	bne.n	800181c <main+0xf8>
				setCamera();
 8001818:	f000 fb0a 	bl	8001e30 <setCamera>
			}
			if(timerTick == 625){
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f240 2271 	movw	r2, #625	; 0x271
 8001822:	4293      	cmp	r3, r2
 8001824:	d1da      	bne.n	80017dc <main+0xb8>

			object_distance = Get_distance();
 8001826:	f7ff fe27 	bl	8001478 <Get_distance>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <main+0x218>)
 8001830:	601a      	str	r2, [r3, #0]
			sprintf(bufferOut, "L%d", object_distance);
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <main+0x218>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	4941      	ldr	r1, [pc, #260]	; (8001940 <main+0x21c>)
 800183a:	4842      	ldr	r0, [pc, #264]	; (8001944 <main+0x220>)
 800183c:	f006 fd3a 	bl	80082b4 <siprintf>
			bufferOut[12] = '\n';
 8001840:	4b40      	ldr	r3, [pc, #256]	; (8001944 <main+0x220>)
 8001842:	220a      	movs	r2, #10
 8001844:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	220d      	movs	r2, #13
 800184c:	493d      	ldr	r1, [pc, #244]	; (8001944 <main+0x220>)
 800184e:	4838      	ldr	r0, [pc, #224]	; (8001930 <main+0x20c>)
 8001850:	f004 fe53 	bl	80064fa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	220d      	movs	r2, #13
 800185a:	493a      	ldr	r1, [pc, #232]	; (8001944 <main+0x220>)
 800185c:	4835      	ldr	r0, [pc, #212]	; (8001934 <main+0x210>)
 800185e:	f004 fe4c 	bl	80064fa <HAL_UART_Transmit>

			DHT11_Read_Data(&temperature,&humidity);
 8001862:	4939      	ldr	r1, [pc, #228]	; (8001948 <main+0x224>)
 8001864:	4839      	ldr	r0, [pc, #228]	; (800194c <main+0x228>)
 8001866:	f7ff fc3a 	bl	80010de <DHT11_Read_Data>
			sprintf(bufferOut, "T%d", temperature);
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <main+0x228>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4937      	ldr	r1, [pc, #220]	; (8001950 <main+0x22c>)
 8001872:	4834      	ldr	r0, [pc, #208]	; (8001944 <main+0x220>)
 8001874:	f006 fd1e 	bl	80082b4 <siprintf>
			bufferOut[12] = '\n';
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <main+0x220>)
 800187a:	220a      	movs	r2, #10
 800187c:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	220d      	movs	r2, #13
 8001884:	492f      	ldr	r1, [pc, #188]	; (8001944 <main+0x220>)
 8001886:	482a      	ldr	r0, [pc, #168]	; (8001930 <main+0x20c>)
 8001888:	f004 fe37 	bl	80064fa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	220d      	movs	r2, #13
 8001892:	492c      	ldr	r1, [pc, #176]	; (8001944 <main+0x220>)
 8001894:	4827      	ldr	r0, [pc, #156]	; (8001934 <main+0x210>)
 8001896:	f004 fe30 	bl	80064fa <HAL_UART_Transmit>

			sprintf(bufferOut, "H%d", humidity);
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <main+0x224>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	492c      	ldr	r1, [pc, #176]	; (8001954 <main+0x230>)
 80018a2:	4828      	ldr	r0, [pc, #160]	; (8001944 <main+0x220>)
 80018a4:	f006 fd06 	bl	80082b4 <siprintf>
			bufferOut[12] = '\n';
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <main+0x220>)
 80018aa:	220a      	movs	r2, #10
 80018ac:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	220d      	movs	r2, #13
 80018b4:	4923      	ldr	r1, [pc, #140]	; (8001944 <main+0x220>)
 80018b6:	481e      	ldr	r0, [pc, #120]	; (8001930 <main+0x20c>)
 80018b8:	f004 fe1f 	bl	80064fa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	220d      	movs	r2, #13
 80018c2:	4920      	ldr	r1, [pc, #128]	; (8001944 <main+0x220>)
 80018c4:	481b      	ldr	r0, [pc, #108]	; (8001934 <main+0x210>)
 80018c6:	f004 fe18 	bl	80064fa <HAL_UART_Transmit>

			rear_sensor = Measure_Distance();
 80018ca:	f000 fb15 	bl	8001ef8 <Measure_Distance>
 80018ce:	eef0 7a40 	vmov.f32	s15, s0
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <main+0x234>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
			sprintf(bufferOut, "R%.2f", rear_sensor);
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <main+0x234>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe3b 	bl	8000558 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	491d      	ldr	r1, [pc, #116]	; (800195c <main+0x238>)
 80018e8:	4816      	ldr	r0, [pc, #88]	; (8001944 <main+0x220>)
 80018ea:	f006 fce3 	bl	80082b4 <siprintf>
			bufferOut[12] = '\n';
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <main+0x220>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	220d      	movs	r2, #13
 80018fa:	4912      	ldr	r1, [pc, #72]	; (8001944 <main+0x220>)
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <main+0x20c>)
 80018fe:	f004 fdfc 	bl	80064fa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	220d      	movs	r2, #13
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <main+0x220>)
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <main+0x210>)
 800190c:	f004 fdf5 	bl	80064fa <HAL_UART_Transmit>
		timerTick = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
		set_motors();
 8001914:	e762      	b.n	80017dc <main+0xb8>
 8001916:	bf00      	nop
 8001918:	200002a4 	.word	0x200002a4
 800191c:	40020000 	.word	0x40020000
 8001920:	200002ec 	.word	0x200002ec
 8001924:	20000334 	.word	0x20000334
 8001928:	200003c4 	.word	0x200003c4
 800192c:	20000260 	.word	0x20000260
 8001930:	2000040c 	.word	0x2000040c
 8001934:	20000450 	.word	0x20000450
 8001938:	ea0ea0eb 	.word	0xea0ea0eb
 800193c:	2000025c 	.word	0x2000025c
 8001940:	0800a588 	.word	0x0800a588
 8001944:	20000270 	.word	0x20000270
 8001948:	20000285 	.word	0x20000285
 800194c:	20000284 	.word	0x20000284
 8001950:	0800a58c 	.word	0x0800a58c
 8001954:	0800a590 	.word	0x0800a590
 8001958:	20000280 	.word	0x20000280
 800195c:	0800a594 	.word	0x0800a594

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	; 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	; 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f006 fd03 	bl	800837a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <SystemClock_Config+0xd0>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <SystemClock_Config+0xd0>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <SystemClock_Config+0xd0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <SystemClock_Config+0xd4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <SystemClock_Config+0xd4>)
 80019ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <SystemClock_Config+0xd4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c8:	2310      	movs	r3, #16
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019cc:	2302      	movs	r3, #2
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019d4:	2310      	movs	r3, #16
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019de:	2304      	movs	r3, #4
 80019e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019e2:	2307      	movs	r3, #7
 80019e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 f9a8 	bl	8004d40 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019f6:	f000 fb0d 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fa:	230f      	movs	r3, #15
 80019fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fe:	2302      	movs	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2102      	movs	r1, #2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fc0a 	bl	8005230 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a22:	f000 faf7 	bl	8002014 <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	; 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000

08001a38 <parseStringAndStore>:

/* USER CODE BEGIN 4 */
void parseStringAndStore(uint8_t *str, uint8_t size) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	81bb      	strh	r3, [r7, #12]
	if (str[0] == '1') {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b31      	cmp	r3, #49	; 0x31
 8001a4e:	f040 80c6 	bne.w	8001bde <parseStringAndStore+0x1a6>
		for (uint8_t i = 1; i < size; i++) {
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e0bc      	b.n	8001bd2 <parseStringAndStore+0x19a>
			if (str[i] == 'R') {
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b52      	cmp	r3, #82	; 0x52
 8001a62:	d157      	bne.n	8001b14 <parseStringAndStore+0xdc>
				if (str[i + 1] == '+')
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3301      	adds	r3, #1
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b2b      	cmp	r3, #43	; 0x2b
 8001a70:	d103      	bne.n	8001a7a <parseStringAndStore+0x42>
					PWM_Control.R_DIR = 0;
 8001a72:	4b94      	ldr	r3, [pc, #592]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	715a      	strb	r2, [r3, #5]
 8001a78:	e009      	b.n	8001a8e <parseStringAndStore+0x56>
				else if (str[i + 1] == '-')
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b2d      	cmp	r3, #45	; 0x2d
 8001a86:	d102      	bne.n	8001a8e <parseStringAndStore+0x56>
					PWM_Control.R_DIR = 1;
 8001a88:	4b8e      	ldr	r3, [pc, #568]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	715a      	strb	r2, [r3, #5]
				temp = (str[i + 2] - '0') * 100;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3302      	adds	r3, #2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3b30      	subs	r3, #48	; 0x30
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	0091      	lsls	r1, r2, #2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 3] - '0') * 10;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3303      	adds	r3, #3
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	3b30      	subs	r3, #48	; 0x30
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	89bb      	ldrh	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 4] - '0');
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	89bb      	ldrh	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b30      	subs	r3, #48	; 0x30
 8001ae2:	81bb      	strh	r3, [r7, #12]
				temp *= 10;
 8001ae4:	89bb      	ldrh	r3, [r7, #12]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	81bb      	strh	r3, [r7, #12]
				if (temp <= 1000 && temp > 0)
 8001af0:	89bb      	ldrh	r3, [r7, #12]
 8001af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af6:	d808      	bhi.n	8001b0a <parseStringAndStore+0xd2>
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <parseStringAndStore+0xd2>
					PWM_Control.R_PWM = temp - 1;
 8001afe:	89bb      	ldrh	r3, [r7, #12]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001b06:	805a      	strh	r2, [r3, #2]
 8001b08:	e002      	b.n	8001b10 <parseStringAndStore+0xd8>
				else
					PWM_Control.R_PWM = 0;
 8001b0a:	4b6e      	ldr	r3, [pc, #440]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	805a      	strh	r2, [r3, #2]

				temp = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	81bb      	strh	r3, [r7, #12]
			}
			if (str[i] == 'L') {
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b4c      	cmp	r3, #76	; 0x4c
 8001b1e:	d155      	bne.n	8001bcc <parseStringAndStore+0x194>
				if (str[i + 1] == '+')
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	3301      	adds	r3, #1
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b2b      	cmp	r3, #43	; 0x2b
 8001b2c:	d103      	bne.n	8001b36 <parseStringAndStore+0xfe>
					PWM_Control.L_DIR = 0;
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	711a      	strb	r2, [r3, #4]
 8001b34:	e009      	b.n	8001b4a <parseStringAndStore+0x112>
				else if (str[i + 1] == '-')
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2d      	cmp	r3, #45	; 0x2d
 8001b42:	d102      	bne.n	8001b4a <parseStringAndStore+0x112>
					PWM_Control.L_DIR = 1;
 8001b44:	4b5f      	ldr	r3, [pc, #380]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	711a      	strb	r2, [r3, #4]
				temp = (str[i + 2] - '0') * 100;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3b30      	subs	r3, #48	; 0x30
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	0091      	lsls	r1, r2, #2
 8001b62:	461a      	mov	r2, r3
 8001b64:	460b      	mov	r3, r1
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 3] - '0') * 10;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	3303      	adds	r3, #3
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3b30      	subs	r3, #48	; 0x30
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	89bb      	ldrh	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 4] - '0');
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	89bb      	ldrh	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b30      	subs	r3, #48	; 0x30
 8001b9e:	81bb      	strh	r3, [r7, #12]
				temp *= 10;
 8001ba0:	89bb      	ldrh	r3, [r7, #12]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	81bb      	strh	r3, [r7, #12]
				if (temp <= 1000 && temp > 0)
 8001bac:	89bb      	ldrh	r3, [r7, #12]
 8001bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb2:	d808      	bhi.n	8001bc6 <parseStringAndStore+0x18e>
 8001bb4:	89bb      	ldrh	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <parseStringAndStore+0x18e>
					PWM_Control.L_PWM = temp - 1;
 8001bba:	89bb      	ldrh	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001bc2:	801a      	strh	r2, [r3, #0]
 8001bc4:	e002      	b.n	8001bcc <parseStringAndStore+0x194>
				else
					PWM_Control.L_PWM = 0;
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <parseStringAndStore+0x28c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 1; i < size; i++) {
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	f4ff af3e 	bcc.w	8001a58 <parseStringAndStore+0x20>
		HAL_UART_Transmit(&huart1, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
	}
	else if(str[0] =='4'){}

}
 8001bdc:	e0e2      	b.n	8001da4 <parseStringAndStore+0x36c>
	} else if (str[0] == '2') {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b32      	cmp	r3, #50	; 0x32
 8001be4:	f040 80c2 	bne.w	8001d6c <parseStringAndStore+0x334>
		for (uint8_t i = 1; i < size; i++) {
 8001be8:	2301      	movs	r3, #1
 8001bea:	73bb      	strb	r3, [r7, #14]
 8001bec:	e0b8      	b.n	8001d60 <parseStringAndStore+0x328>
			if (str[i] == 'X') {
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b58      	cmp	r3, #88	; 0x58
 8001bf8:	d153      	bne.n	8001ca2 <parseStringAndStore+0x26a>
				if (str[i + 1] == '+')
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b2b      	cmp	r3, #43	; 0x2b
 8001c06:	d103      	bne.n	8001c10 <parseStringAndStore+0x1d8>
					Camera_Control.X_DIR = 1;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <parseStringAndStore+0x290>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	711a      	strb	r2, [r3, #4]
 8001c0e:	e009      	b.n	8001c24 <parseStringAndStore+0x1ec>
				else if (str[i + 1] == '-')
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	3301      	adds	r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b2d      	cmp	r3, #45	; 0x2d
 8001c1c:	d102      	bne.n	8001c24 <parseStringAndStore+0x1ec>
					Camera_Control.X_DIR = 0;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <parseStringAndStore+0x290>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	711a      	strb	r2, [r3, #4]
				temp = (str[i + 2] - '0') * 100;
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	3302      	adds	r3, #2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3b30      	subs	r3, #48	; 0x30
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	0091      	lsls	r1, r2, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 3] - '0') * 10;
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	3303      	adds	r3, #3
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3b30      	subs	r3, #48	; 0x30
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	89bb      	ldrh	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 4] - '0');
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	3304      	adds	r3, #4
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	89bb      	ldrh	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b30      	subs	r3, #48	; 0x30
 8001c78:	81bb      	strh	r3, [r7, #12]
				if (temp <= 10000 && temp > 0)
 8001c7a:	89bb      	ldrh	r3, [r7, #12]
 8001c7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d809      	bhi.n	8001c98 <parseStringAndStore+0x260>
 8001c84:	89bb      	ldrh	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <parseStringAndStore+0x260>
					Camera_Control.X_RELATIVE = temp - 1;
 8001c8a:	89bb      	ldrh	r3, [r7, #12]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <parseStringAndStore+0x290>)
 8001c94:	719a      	strb	r2, [r3, #6]
 8001c96:	e002      	b.n	8001c9e <parseStringAndStore+0x266>
					Camera_Control.X_RELATIVE = 0;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <parseStringAndStore+0x290>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	719a      	strb	r2, [r3, #6]
				temp = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	81bb      	strh	r3, [r7, #12]
			if (str[i] == 'Y') {
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b59      	cmp	r3, #89	; 0x59
 8001cac:	d155      	bne.n	8001d5a <parseStringAndStore+0x322>
				if (str[i + 1] == '+')
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b2b      	cmp	r3, #43	; 0x2b
 8001cba:	d107      	bne.n	8001ccc <parseStringAndStore+0x294>
					Camera_Control.Y_DIR = 1;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <parseStringAndStore+0x290>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	715a      	strb	r2, [r3, #5]
 8001cc2:	e00d      	b.n	8001ce0 <parseStringAndStore+0x2a8>
 8001cc4:	20000298 	.word	0x20000298
 8001cc8:	20000004 	.word	0x20000004
				else if (str[i + 1] == '-')
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b2d      	cmp	r3, #45	; 0x2d
 8001cd8:	d102      	bne.n	8001ce0 <parseStringAndStore+0x2a8>
					Camera_Control.Y_DIR = 0;
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <parseStringAndStore+0x374>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	715a      	strb	r2, [r3, #5]
				temp = (str[i + 2] - '0') * 100;
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3b30      	subs	r3, #48	; 0x30
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	0091      	lsls	r1, r2, #2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 3] - '0') * 10;
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	3303      	adds	r3, #3
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b30      	subs	r3, #48	; 0x30
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	89bb      	ldrh	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	81bb      	strh	r3, [r7, #12]
				temp += (str[i + 4] - '0');
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	3304      	adds	r3, #4
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b30      	subs	r3, #48	; 0x30
 8001d34:	81bb      	strh	r3, [r7, #12]
				if (temp <= 10000 && temp > 0)
 8001d36:	89bb      	ldrh	r3, [r7, #12]
 8001d38:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d809      	bhi.n	8001d54 <parseStringAndStore+0x31c>
 8001d40:	89bb      	ldrh	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <parseStringAndStore+0x31c>
					Camera_Control.Y_RELATIVE = temp - 1;
 8001d46:	89bb      	ldrh	r3, [r7, #12]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <parseStringAndStore+0x374>)
 8001d50:	71da      	strb	r2, [r3, #7]
 8001d52:	e002      	b.n	8001d5a <parseStringAndStore+0x322>
					Camera_Control.Y_RELATIVE = 0;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <parseStringAndStore+0x374>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	71da      	strb	r2, [r3, #7]
		for (uint8_t i = 1; i < size; i++) {
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	73bb      	strb	r3, [r7, #14]
 8001d60:	7bba      	ldrb	r2, [r7, #14]
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f4ff af42 	bcc.w	8001bee <parseStringAndStore+0x1b6>
}
 8001d6a:	e01b      	b.n	8001da4 <parseStringAndStore+0x36c>
	else if(str[0] == '3') {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b33      	cmp	r3, #51	; 0x33
 8001d72:	d117      	bne.n	8001da4 <parseStringAndStore+0x36c>
		sprintf(bufferOut, "%d", object_distance);
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <parseStringAndStore+0x378>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	490e      	ldr	r1, [pc, #56]	; (8001db4 <parseStringAndStore+0x37c>)
 8001d7c:	480e      	ldr	r0, [pc, #56]	; (8001db8 <parseStringAndStore+0x380>)
 8001d7e:	f006 fa99 	bl	80082b4 <siprintf>
		bufferOut[12] = '\n';
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <parseStringAndStore+0x380>)
 8001d84:	220a      	movs	r2, #10
 8001d86:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&huart1, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8c:	220d      	movs	r2, #13
 8001d8e:	490a      	ldr	r1, [pc, #40]	; (8001db8 <parseStringAndStore+0x380>)
 8001d90:	480a      	ldr	r0, [pc, #40]	; (8001dbc <parseStringAndStore+0x384>)
 8001d92:	f004 fbb2 	bl	80064fa <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, bufferOut, sizeof(bufferOut),HAL_MAX_DELAY);
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	220d      	movs	r2, #13
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <parseStringAndStore+0x380>)
 8001d9e:	4808      	ldr	r0, [pc, #32]	; (8001dc0 <parseStringAndStore+0x388>)
 8001da0:	f004 fbab 	bl	80064fa <HAL_UART_Transmit>
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000004 	.word	0x20000004
 8001db0:	2000025c 	.word	0x2000025c
 8001db4:	0800a59c 	.word	0x0800a59c
 8001db8:	20000270 	.word	0x20000270
 8001dbc:	2000040c 	.word	0x2000040c
 8001dc0:	20000450 	.word	0x20000450

08001dc4 <set_motors>:

void set_motors() {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, PWM_Control.R_DIR);
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <set_motors+0x5c>)
 8001dca:	795b      	ldrb	r3, [r3, #5]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	4814      	ldr	r0, [pc, #80]	; (8001e24 <set_motors+0x60>)
 8001dd2:	f001 fe75 	bl	8003ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, PWM_Control.L_DIR);
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <set_motors+0x5c>)
 8001dd8:	791b      	ldrb	r3, [r3, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	4812      	ldr	r0, [pc, #72]	; (8001e28 <set_motors+0x64>)
 8001de0:	f001 fe6e 	bl	8003ac0 <HAL_GPIO_WritePin>

	if(PWM_Control.R_PWM >DEADZONE_MOTORS)__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control.R_PWM);
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <set_motors+0x5c>)
 8001de6:	885b      	ldrh	r3, [r3, #2]
 8001de8:	2b14      	cmp	r3, #20
 8001dea:	d905      	bls.n	8001df8 <set_motors+0x34>
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <set_motors+0x5c>)
 8001dee:	885a      	ldrh	r2, [r3, #2]
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <set_motors+0x68>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	e003      	b.n	8001e00 <set_motors+0x3c>
	else __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <set_motors+0x68>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
	if(PWM_Control.L_PWM > DEADZONE_MOTORS)	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control.L_PWM);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <set_motors+0x5c>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	2b14      	cmp	r3, #20
 8001e06:	d905      	bls.n	8001e14 <set_motors+0x50>
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <set_motors+0x5c>)
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <set_motors+0x68>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	639a      	str	r2, [r3, #56]	; 0x38
	else 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
}
 8001e12:	e003      	b.n	8001e1c <set_motors+0x58>
	else 	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <set_motors+0x68>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000298 	.word	0x20000298
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	20000334 	.word	0x20000334

08001e30 <setCamera>:
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//	PWM_Control.L_PWM = 0;
//	PWM_Control.R_PWM = 0;
}
void setCamera() {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

	if(Camera_Control.X_DIR == 1 && Camera_Control.X_PWM < 80)__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Camera_Control.X_PWM += Camera_Control.X_RELATIVE);
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <setCamera+0xc0>)
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d111      	bne.n	8001e60 <setCamera+0x30>
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <setCamera+0xc0>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	2b4f      	cmp	r3, #79	; 0x4f
 8001e42:	d80d      	bhi.n	8001e60 <setCamera+0x30>
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <setCamera+0xc0>)
 8001e46:	881a      	ldrh	r2, [r3, #0]
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <setCamera+0xc0>)
 8001e4a:	799b      	ldrb	r3, [r3, #6]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <setCamera+0xc0>)
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <setCamera+0xc0>)
 8001e58:	881a      	ldrh	r2, [r3, #0]
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <setCamera+0xc4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
	if(Camera_Control.X_DIR == 0 && Camera_Control.X_PWM > 20)__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, Camera_Control.X_PWM -= Camera_Control.X_RELATIVE);
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <setCamera+0xc0>)
 8001e62:	791b      	ldrb	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <setCamera+0x5c>
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <setCamera+0xc0>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b14      	cmp	r3, #20
 8001e6e:	d90d      	bls.n	8001e8c <setCamera+0x5c>
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <setCamera+0xc0>)
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <setCamera+0xc0>)
 8001e76:	799b      	ldrb	r3, [r3, #6]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <setCamera+0xc0>)
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <setCamera+0xc0>)
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <setCamera+0xc4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34

	if(Camera_Control.Y_DIR == 1 && Camera_Control.Y_PWM <80)__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Camera_Control.Y_PWM += Camera_Control.Y_RELATIVE );
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <setCamera+0xc0>)
 8001e8e:	795b      	ldrb	r3, [r3, #5]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d111      	bne.n	8001eb8 <setCamera+0x88>
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <setCamera+0xc0>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	2b4f      	cmp	r3, #79	; 0x4f
 8001e9a:	d80d      	bhi.n	8001eb8 <setCamera+0x88>
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <setCamera+0xc0>)
 8001e9e:	885a      	ldrh	r2, [r3, #2]
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <setCamera+0xc0>)
 8001ea2:	79db      	ldrb	r3, [r3, #7]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <setCamera+0xc0>)
 8001eac:	805a      	strh	r2, [r3, #2]
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <setCamera+0xc0>)
 8001eb0:	885a      	ldrh	r2, [r3, #2]
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <setCamera+0xc4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
	if(Camera_Control.Y_DIR == 0 && Camera_Control.Y_PWM > 20)__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Camera_Control.Y_PWM -= Camera_Control.Y_RELATIVE );
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <setCamera+0xc0>)
 8001eba:	795b      	ldrb	r3, [r3, #5]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d111      	bne.n	8001ee4 <setCamera+0xb4>
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <setCamera+0xc0>)
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	2b14      	cmp	r3, #20
 8001ec6:	d90d      	bls.n	8001ee4 <setCamera+0xb4>
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <setCamera+0xc0>)
 8001eca:	885a      	ldrh	r2, [r3, #2]
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <setCamera+0xc0>)
 8001ece:	79db      	ldrb	r3, [r3, #7]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <setCamera+0xc0>)
 8001ed8:	805a      	strh	r2, [r3, #2]
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <setCamera+0xc0>)
 8001edc:	885a      	ldrh	r2, [r3, #2]
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <setCamera+0xc4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	200002ec 	.word	0x200002ec

08001ef8 <Measure_Distance>:
float Measure_Distance(void) {
 8001ef8:	b598      	push	{r3, r4, r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	;
    // Send trigger pulse (10 us) on PA8
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f02:	483d      	ldr	r0, [pc, #244]	; (8001ff8 <Measure_Distance+0x100>)
 8001f04:	f001 fddc 	bl	8003ac0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <Measure_Distance+0x104>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
	   while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001f10:	bf00      	nop
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <Measure_Distance+0x104>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d9fa      	bls.n	8001f12 <Measure_Distance+0x1a>
	   HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f22:	4835      	ldr	r0, [pc, #212]	; (8001ff8 <Measure_Distance+0x100>)
 8001f24:	f001 fdcc 	bl	8003ac0 <HAL_GPIO_WritePin>

	   pMillis = HAL_GetTick();
 8001f28:	f000 feea 	bl	8002d00 <HAL_GetTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <Measure_Distance+0x108>)
 8001f30:	6013      	str	r3, [r2, #0]
	   while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8001f32:	bf00      	nop
 8001f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f38:	4832      	ldr	r0, [pc, #200]	; (8002004 <Measure_Distance+0x10c>)
 8001f3a:	f001 fda9 	bl	8003a90 <HAL_GPIO_ReadPin>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d108      	bne.n	8001f56 <Measure_Distance+0x5e>
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <Measure_Distance+0x108>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f103 040a 	add.w	r4, r3, #10
 8001f4c:	f000 fed8 	bl	8002d00 <HAL_GetTick>
 8001f50:	4603      	mov	r3, r0
 8001f52:	429c      	cmp	r4, r3
 8001f54:	d8ee      	bhi.n	8001f34 <Measure_Distance+0x3c>
	   val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <Measure_Distance+0x104>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <Measure_Distance+0x110>)
 8001f5e:	6013      	str	r3, [r2, #0]

	   pMillis = HAL_GetTick();
 8001f60:	f000 fece 	bl	8002d00 <HAL_GetTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <Measure_Distance+0x108>)
 8001f68:	6013      	str	r3, [r2, #0]
	   while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 8001f6a:	bf00      	nop
 8001f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f70:	4824      	ldr	r0, [pc, #144]	; (8002004 <Measure_Distance+0x10c>)
 8001f72:	f001 fd8d 	bl	8003a90 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <Measure_Distance+0x96>
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <Measure_Distance+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001f84:	f000 febc 	bl	8002d00 <HAL_GetTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	429c      	cmp	r4, r3
 8001f8c:	d8ee      	bhi.n	8001f6c <Measure_Distance+0x74>
	   val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <Measure_Distance+0x104>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <Measure_Distance+0x114>)
 8001f96:	6013      	str	r3, [r2, #0]

	   distance = (val2-val1)* 0.034/2;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	; (800200c <Measure_Distance+0x114>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <Measure_Distance+0x110>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fab6 	bl	8000514 <__aeabi_ui2d>
 8001fa8:	a311      	add	r3, pc, #68	; (adr r3, 8001ff0 <Measure_Distance+0xf8>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb2b 	bl	8000608 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc2:	f7fe fc4b 	bl	800085c <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fdf3 	bl	8000bb8 <__aeabi_d2uiz>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <Measure_Distance+0x118>)
 8001fd8:	801a      	strh	r2, [r3, #0]

    return distance;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <Measure_Distance+0x118>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fea:	bd98      	pop	{r3, r4, r7, pc}
 8001fec:	f3af 8000 	nop.w
 8001ff0:	b020c49c 	.word	0xb020c49c
 8001ff4:	3fa16872 	.word	0x3fa16872
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	200002a4 	.word	0x200002a4
 8002000:	20000288 	.word	0x20000288
 8002004:	40020800 	.word	0x40020800
 8002008:	2000028c 	.word	0x2000028c
 800200c:	20000290 	.word	0x20000290
 8002010:	20000294 	.word	0x20000294

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800201c:	e7fe      	b.n	800201c <Error_Handler+0x8>
	...

08002020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_MspInit+0x4c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_MspInit+0x4c>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_MspInit+0x4c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800205e:	2007      	movs	r0, #7
 8002060:	f000 ff4e 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler+0x4>

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 fe0c 	bl	8002cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <DMA1_Stream5_IRQHandler+0x10>)
 80020ca:	f001 f8f3 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000538 	.word	0x20000538

080020d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <USART1_IRQHandler+0x10>)
 80020de:	f004 facf 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000040c 	.word	0x2000040c

080020ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <USART2_IRQHandler+0x10>)
 80020f2:	f004 fac5 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000450 	.word	0x20000450

08002100 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA2_Stream1_IRQHandler+0x10>)
 8002106:	f001 f8d5 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000598 	.word	0x20000598

08002114 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <DMA2_Stream2_IRQHandler+0x10>)
 800211a:	f001 f8cb 	bl	80032b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200004d8 	.word	0x200004d8

08002128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_kill>:

int _kill(int pid, int sig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002142:	f006 f96d 	bl	8008420 <__errno>
 8002146:	4603      	mov	r3, r0
 8002148:	2216      	movs	r2, #22
 800214a:	601a      	str	r2, [r3, #0]
  return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_exit>:

void _exit (int status)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_kill>
  while (1) {}    /* Make sure we hang here */
 800216a:	e7fe      	b.n	800216a <_exit+0x12>

0800216c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00a      	b.n	8002194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800217e:	f3af 8000 	nop.w
 8002182:	4601      	mov	r1, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf0      	blt.n	800217e <_read+0x12>
  }

  return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf1      	blt.n	80021b8 <_write+0x12>
  }
  return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_close>:

int _close(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002206:	605a      	str	r2, [r3, #4]
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_isatty>:

int _isatty(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f006 f8d2 	bl	8008420 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20018000 	.word	0x20018000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	200002a0 	.word	0x200002a0
 80022b0:	20000748 	.word	0x20000748

080022b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <MX_TIM1_Init+0x98>)
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <MX_TIM1_Init+0x9c>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <MX_TIM1_Init+0x98>)
 80022fc:	2253      	movs	r2, #83	; 0x53
 80022fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <MX_TIM1_Init+0x98>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <MX_TIM1_Init+0x98>)
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <MX_TIM1_Init+0x98>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <MX_TIM1_Init+0x98>)
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_TIM1_Init+0x98>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002320:	4813      	ldr	r0, [pc, #76]	; (8002370 <MX_TIM1_Init+0x98>)
 8002322:	f003 f9a5 	bl	8005670 <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800232c:	f7ff fe72 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	4619      	mov	r1, r3
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <MX_TIM1_Init+0x98>)
 800233e:	f003 fc8d 	bl	8005c5c <HAL_TIM_ConfigClockSource>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002348:	f7ff fe64 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002354:	463b      	mov	r3, r7
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_TIM1_Init+0x98>)
 800235a:	f004 f813 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002364:	f7ff fe56 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200002a4 	.word	0x200002a4
 8002374:	40010000 	.word	0x40010000

08002378 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	615a      	str	r2, [r3, #20]
 8002398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <MX_TIM2_Init+0xe4>)
 800239c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <MX_TIM2_Init+0xe4>)
 80023a4:	f240 628f 	movw	r2, #1679	; 0x68f
 80023a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <MX_TIM2_Init+0xe4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <MX_TIM2_Init+0xe4>)
 80023b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <MX_TIM2_Init+0xe4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <MX_TIM2_Init+0xe4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023c4:	4825      	ldr	r0, [pc, #148]	; (800245c <MX_TIM2_Init+0xe4>)
 80023c6:	f003 fa87 	bl	80058d8 <HAL_TIM_PWM_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80023d0:	f7ff fe20 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023dc:	f107 0320 	add.w	r3, r7, #32
 80023e0:	4619      	mov	r1, r3
 80023e2:	481e      	ldr	r0, [pc, #120]	; (800245c <MX_TIM2_Init+0xe4>)
 80023e4:	f003 ffce 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80023ee:	f7ff fe11 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f2:	2360      	movs	r3, #96	; 0x60
 80023f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <MX_TIM2_Init+0xe4>)
 800240a:	f003 fb65 	bl	8005ad8 <HAL_TIM_PWM_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002414:	f7ff fdfe 	bl	8002014 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <MX_TIM2_Init+0xe4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_TIM2_Init+0xe4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0208 	bic.w	r2, r2, #8
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2204      	movs	r2, #4
 800242c:	4619      	mov	r1, r3
 800242e:	480b      	ldr	r0, [pc, #44]	; (800245c <MX_TIM2_Init+0xe4>)
 8002430:	f003 fb52 	bl	8005ad8 <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800243a:	f7ff fdeb 	bl	8002014 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <MX_TIM2_Init+0xe4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <MX_TIM2_Init+0xe4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <MX_TIM2_Init+0xe4>)
 8002450:	f000 f936 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200002ec 	.word	0x200002ec

08002460 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	f107 0320 	add.w	r3, r7, #32
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <MX_TIM3_Init+0xc0>)
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <MX_TIM3_Init+0xc4>)
 8002486:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <MX_TIM3_Init+0xc0>)
 800248a:	2253      	movs	r2, #83	; 0x53
 800248c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <MX_TIM3_Init+0xc0>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <MX_TIM3_Init+0xc0>)
 8002496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800249a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <MX_TIM3_Init+0xc0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <MX_TIM3_Init+0xc0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024a8:	481d      	ldr	r0, [pc, #116]	; (8002520 <MX_TIM3_Init+0xc0>)
 80024aa:	f003 fa15 	bl	80058d8 <HAL_TIM_PWM_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024b4:	f7ff fdae 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	4619      	mov	r1, r3
 80024c6:	4816      	ldr	r0, [pc, #88]	; (8002520 <MX_TIM3_Init+0xc0>)
 80024c8:	f003 ff5c 	bl	8006384 <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80024d2:	f7ff fd9f 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d6:	2360      	movs	r3, #96	; 0x60
 80024d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_TIM3_Init+0xc0>)
 80024ee:	f003 faf3 	bl	8005ad8 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80024f8:	f7ff fd8c 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2204      	movs	r2, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM3_Init+0xc0>)
 8002504:	f003 fae8 	bl	8005ad8 <HAL_TIM_PWM_ConfigChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800250e:	f7ff fd81 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002512:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM3_Init+0xc0>)
 8002514:	f000 f8d4 	bl	80026c0 <HAL_TIM_MspPostInit>

}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000334 	.word	0x20000334
 8002524:	40000400 	.word	0x40000400

08002528 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800252c:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_TIM10_Init+0x40>)
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <MX_TIM10_Init+0x44>)
 8002530:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <MX_TIM10_Init+0x40>)
 8002534:	2253      	movs	r2, #83	; 0x53
 8002536:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_TIM10_Init+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <MX_TIM10_Init+0x40>)
 8002540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002544:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_TIM10_Init+0x40>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_TIM10_Init+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_TIM10_Init+0x40>)
 8002554:	f003 f88c 	bl	8005670 <HAL_TIM_Base_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800255e:	f7ff fd59 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000037c 	.word	0x2000037c
 800256c:	40014400 	.word	0x40014400

08002570 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <MX_TIM11_Init+0x40>)
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <MX_TIM11_Init+0x44>)
 8002578:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <MX_TIM11_Init+0x40>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <MX_TIM11_Init+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <MX_TIM11_Init+0x40>)
 8002588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <MX_TIM11_Init+0x40>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <MX_TIM11_Init+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_TIM11_Init+0x40>)
 800259c:	f003 f868 	bl	8005670 <HAL_TIM_Base_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80025a6:	f7ff fd35 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200003c4 	.word	0x200003c4
 80025b4:	40014800 	.word	0x40014800

080025b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_TIM_Base_MspInit+0x8c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80025e6:	e026      	b.n	8002636 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM10)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_TIM_Base_MspInit+0x94>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
}
 800260e:	e012      	b.n	8002636 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM11)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_TIM_Base_MspInit+0x98>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_TIM_Base_MspInit+0x90>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40023800 	.word	0x40023800
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800

08002654 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_TIM_PWM_MspInit+0x64>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002682:	e012      	b.n	80026aa <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <HAL_TIM_PWM_MspInit+0x68>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10d      	bne.n	80026aa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_TIM_PWM_MspInit+0x64>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_TIM_PWM_MspInit+0x64>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e0:	d11e      	bne.n	8002720 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = CAM_PWM_Y_Pin|CAM_PWM_X_Pin;
 80026fe:	2322      	movs	r3, #34	; 0x22
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800270e:	2301      	movs	r3, #1
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4816      	ldr	r0, [pc, #88]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 800271a:	f001 f835 	bl	8003788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800271e:	e022      	b.n	8002766 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_TIM_MspPostInit+0xb8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d11d      	bne.n	8002766 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_TIM_MspPostInit+0xb0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002756:	2302      	movs	r3, #2
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <HAL_TIM_MspPostInit+0xb4>)
 8002762:	f001 f811 	bl	8003788 <HAL_GPIO_Init>
}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	; 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000
 8002778:	40000400 	.word	0x40000400

0800277c <delayXus>:
}

/* USER CODE BEGIN 1 */
void delayXus(uint16_t us)

{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]

	uint16_t differ=0xffff-us-5;
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800278c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8002790:	33fa      	adds	r3, #250	; 0xfa
 8002792:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COUNTER(&htim10,differ);
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <delayXus+0x48>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	89fa      	ldrh	r2, [r7, #14]
 800279a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start(&htim10);
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <delayXus+0x48>)
 800279e:	f002 ffb7 	bl	8005710 <HAL_TIM_Base_Start>

  while(differ<0xffff-6)
 80027a2:	e003      	b.n	80027ac <delayXus+0x30>

  {

    differ=__HAL_TIM_GET_COUNTER(&htim10);
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <delayXus+0x48>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	81fb      	strh	r3, [r7, #14]
  while(differ<0xffff-6)
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d9f6      	bls.n	80027a4 <delayXus+0x28>

  }

  HAL_TIM_Base_Stop(&htim10);
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <delayXus+0x48>)
 80027b8:	f003 f804 	bl	80057c4 <HAL_TIM_Base_Stop>

}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2000037c 	.word	0x2000037c

080027c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <MX_USART1_UART_Init+0x50>)
 80027d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_USART1_UART_Init+0x4c>)
 8002800:	f003 fe2e 	bl	8006460 <HAL_UART_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800280a:	f7ff fc03 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000040c 	.word	0x2000040c
 8002818:	40011000 	.word	0x40011000

0800281c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <MX_USART2_UART_Init+0x50>)
 8002824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800282c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002842:	220c      	movs	r2, #12
 8002844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_USART2_UART_Init+0x4c>)
 8002854:	f003 fe04 	bl	8006460 <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800285e:	f7ff fbd9 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000450 	.word	0x20000450
 800286c:	40004400 	.word	0x40004400

08002870 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_USART6_UART_Init+0x50>)
 8002878:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 800287c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002880:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_USART6_UART_Init+0x4c>)
 80028a8:	f003 fdda 	bl	8006460 <HAL_UART_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80028b2:	f7ff fbaf 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000494 	.word	0x20000494
 80028c0:	40011400 	.word	0x40011400

080028c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	; 0x38
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a68      	ldr	r2, [pc, #416]	; (8002a84 <HAL_UART_MspInit+0x1c0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d164      	bne.n	80029b0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	4b60      	ldr	r3, [pc, #384]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a5f      	ldr	r2, [pc, #380]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800291e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002930:	2307      	movs	r3, #7
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4854      	ldr	r0, [pc, #336]	; (8002a8c <HAL_UART_MspInit+0x1c8>)
 800293c:	f000 ff24 	bl	8003788 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002942:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_UART_MspInit+0x1d0>)
 8002944:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002946:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002948:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800294c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294e:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002954:	4b4e      	ldr	r3, [pc, #312]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800295a:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 800295c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002960:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002968:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002974:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002976:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002982:	4843      	ldr	r0, [pc, #268]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002984:	f000 fafe 	bl	8002f84 <HAL_DMA_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800298e:	f7ff fb41 	bl	8002014 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a3e      	ldr	r2, [pc, #248]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_UART_MspInit+0x1cc>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2025      	movs	r0, #37	; 0x25
 80029a4:	f000 fab7 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029a8:	2025      	movs	r0, #37	; 0x25
 80029aa:	f000 fad0 	bl	8002f4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80029ae:	e0f8      	b.n	8002ba2 <HAL_UART_MspInit+0x2de>
  else if(uartHandle->Instance==USART2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_UART_MspInit+0x1d4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d174      	bne.n	8002aa4 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_UART_MspInit+0x1c4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029f2:	230c      	movs	r3, #12
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a02:	2307      	movs	r3, #7
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	481f      	ldr	r0, [pc, #124]	; (8002a8c <HAL_UART_MspInit+0x1c8>)
 8002a0e:	f000 febb 	bl	8003788 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_UART_MspInit+0x1dc>)
 8002a16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a32:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a56:	f000 fa95 	bl	8002f84 <HAL_DMA_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002a60:	f7ff fad8 	bl	8002014 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_UART_MspInit+0x1d8>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2026      	movs	r0, #38	; 0x26
 8002a76:	f000 fa4e 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a7a:	2026      	movs	r0, #38	; 0x26
 8002a7c:	f000 fa67 	bl	8002f4e <HAL_NVIC_EnableIRQ>
}
 8002a80:	e08f      	b.n	8002ba2 <HAL_UART_MspInit+0x2de>
 8002a82:	bf00      	nop
 8002a84:	40011000 	.word	0x40011000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	200004d8 	.word	0x200004d8
 8002a94:	40026440 	.word	0x40026440
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	20000538 	.word	0x20000538
 8002aa0:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART6)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a40      	ldr	r2, [pc, #256]	; (8002bac <HAL_UART_MspInit+0x2e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d179      	bne.n	8002ba2 <HAL_UART_MspInit+0x2de>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a3e      	ldr	r2, [pc, #248]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002ab8:	f043 0320 	orr.w	r3, r3, #32
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a37      	ldr	r2, [pc, #220]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_UART_MspInit+0x2ec>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b02:	2340      	movs	r3, #64	; 0x40
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b12:	2308      	movs	r3, #8
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4825      	ldr	r0, [pc, #148]	; (8002bb4 <HAL_UART_MspInit+0x2f0>)
 8002b1e:	f000 fe33 	bl	8003788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b34:	2308      	movs	r3, #8
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481e      	ldr	r0, [pc, #120]	; (8002bb8 <HAL_UART_MspInit+0x2f4>)
 8002b40:	f000 fe22 	bl	8003788 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_UART_MspInit+0x2fc>)
 8002b48:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b4c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002b50:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b64:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b78:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b88:	f000 f9fc 	bl	8002f84 <HAL_DMA_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8002b92:	f7ff fa3f 	bl	8002014 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_UART_MspInit+0x2f8>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ba2:	bf00      	nop
 8002ba4:	3738      	adds	r7, #56	; 0x38
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	20000598 	.word	0x20000598
 8002bc0:	40026428 	.word	0x40026428

08002bc4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	parseStringAndStore(buffer, sizeof(buffer));
 8002bcc:	210d      	movs	r1, #13
 8002bce:	4803      	ldr	r0, [pc, #12]	; (8002bdc <HAL_UART_RxCpltCallback+0x18>)
 8002bd0:	f7fe ff32 	bl	8001a38 <parseStringAndStore>

	}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000260 	.word	0x20000260

08002be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be4:	480d      	ldr	r0, [pc, #52]	; (8002c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002be6:	490e      	ldr	r1, [pc, #56]	; (8002c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002be8:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bfc:	4c0b      	ldr	r4, [pc, #44]	; (8002c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c0a:	f7ff fb53 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c0e:	f005 fc0d 	bl	800842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c12:	f7fe fd87 	bl	8001724 <main>
  bx  lr    
 8002c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c24:	0800a944 	.word	0x0800a944
  ldr r2, =_sbss
 8002c28:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c2c:	20000748 	.word	0x20000748

08002c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC_IRQHandler>
	...

08002c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_Init+0x40>)
 8002c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_Init+0x40>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_Init+0x40>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5c:	2003      	movs	r0, #3
 8002c5e:	f000 f94f 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f000 f808 	bl	8002c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c68:	f7ff f9da 	bl	8002020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00

08002c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_InitTick+0x54>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x58>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f967 	bl	8002f6a <HAL_SYSTICK_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00e      	b.n	8002cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0f      	cmp	r3, #15
 8002caa:	d80a      	bhi.n	8002cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cac:	2200      	movs	r2, #0
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f000 f92f 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_InitTick+0x5c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000014 	.word	0x20000014
 8002cd0:	2000001c 	.word	0x2000001c
 8002cd4:	20000018 	.word	0x20000018

08002cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_IncTick+0x20>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x24>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_IncTick+0x24>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2000001c 	.word	0x2000001c
 8002cfc:	200005f8 	.word	0x200005f8

08002d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_GetTick+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	200005f8 	.word	0x200005f8

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff ffee 	bl	8002d00 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_Delay+0x44>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffde 	bl	8002d00 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000001c 	.word	0x2000001c

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	; (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	; (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff8e 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff29 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff3e 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff8e 	bl	8002e54 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5d 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff31 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffa2 	bl	8002ebc <SysTick_Config>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f90:	f7ff feb6 	bl	8002d00 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e099      	b.n	80030d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc0:	e00f      	b.n	8002fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc2:	f7ff fe9d 	bl	8002d00 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d908      	bls.n	8002fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e078      	b.n	80030d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e8      	bne.n	8002fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_DMA_Init+0x158>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b04      	cmp	r3, #4
 800303a:	d107      	bne.n	800304c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	4313      	orrs	r3, r2
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0307 	bic.w	r3, r3, #7
 8003062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b04      	cmp	r3, #4
 8003074:	d117      	bne.n	80030a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fb01 	bl	8003690 <DMA_CheckFifoParam>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030a2:	2301      	movs	r3, #1
 80030a4:	e016      	b.n	80030d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fab8 	bl	8003624 <DMA_CalcBaseAndBitshift>
 80030b4:	4603      	mov	r3, r0
 80030b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	223f      	movs	r2, #63	; 0x3f
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	f010803f 	.word	0xf010803f

080030e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_DMA_Start_IT+0x26>
 8003102:	2302      	movs	r3, #2
 8003104:	e040      	b.n	8003188 <HAL_DMA_Start_IT+0xa8>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d12f      	bne.n	800317a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa4a 	bl	80035c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	223f      	movs	r2, #63	; 0x3f
 800313a:	409a      	lsls	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0216 	orr.w	r2, r2, #22
 800314e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e005      	b.n	8003186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7ff fdaf 	bl	8002d00 <HAL_GetTick>
 80031a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d008      	beq.n	80031c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e052      	b.n	8003268 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0216 	bic.w	r2, r2, #22
 80031d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_DMA_Abort+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003212:	e013      	b.n	800323c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003214:	f7ff fd74 	bl	8002d00 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b05      	cmp	r3, #5
 8003220:	d90c      	bls.n	800323c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e015      	b.n	8003268 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e4      	bne.n	8003214 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	223f      	movs	r2, #63	; 0x3f
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d004      	beq.n	800328e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00c      	b.n	80032a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2205      	movs	r2, #5
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032c0:	4b8e      	ldr	r3, [pc, #568]	; (80034fc <HAL_DMA_IRQHandler+0x248>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a8e      	ldr	r2, [pc, #568]	; (8003500 <HAL_DMA_IRQHandler+0x24c>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0a9b      	lsrs	r3, r3, #10
 80032cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	2208      	movs	r2, #8
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01a      	beq.n	8003320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2208      	movs	r2, #8
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2201      	movs	r2, #1
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d012      	beq.n	8003356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	2201      	movs	r2, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2204      	movs	r2, #4
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	2204      	movs	r2, #4
 800337a:	409a      	lsls	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2210      	movs	r2, #16
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d043      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d03c      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	2210      	movs	r2, #16
 80033b0:	409a      	lsls	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d018      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d024      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e01f      	b.n	8003424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e016      	b.n	8003424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0208 	bic.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	2220      	movs	r2, #32
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 808f 	beq.w	8003554 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8087 	beq.w	8003554 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	2220      	movs	r2, #32
 800344c:	409a      	lsls	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b05      	cmp	r3, #5
 800345c:	d136      	bne.n	80034cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0216 	bic.w	r2, r2, #22
 800346c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800347c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <HAL_DMA_IRQHandler+0x1da>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0208 	bic.w	r2, r2, #8
 800349c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	223f      	movs	r2, #63	; 0x3f
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d07e      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
        }
        return;
 80034ca:	e079      	b.n	80035c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d031      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e02c      	b.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
 80034fa:	bf00      	nop
 80034fc:	20000014 	.word	0x20000014
 8003500:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e01e      	b.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0210 	bic.w	r2, r2, #16
 8003532:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2b00      	cmp	r3, #0
 800355a:	d032      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2205      	movs	r2, #5
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	429a      	cmp	r2, r3
 800358a:	d307      	bcc.n	800359c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f2      	bne.n	8003580 <HAL_DMA_IRQHandler+0x2cc>
 800359a:	e000      	b.n	800359e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800359c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
 80035be:	e000      	b.n	80035c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c0:	bf00      	nop
    }
  }
}
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d108      	bne.n	8003608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003606:	e007      	b.n	8003618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	3b10      	subs	r3, #16
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <DMA_CalcBaseAndBitshift+0x64>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <DMA_CalcBaseAndBitshift+0x68>)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d909      	bls.n	8003666 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	1d1a      	adds	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	659a      	str	r2, [r3, #88]	; 0x58
 8003664:	e007      	b.n	8003676 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	aaaaaaab 	.word	0xaaaaaaab
 800368c:	0800a5b8 	.word	0x0800a5b8

08003690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11f      	bne.n	80036ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d856      	bhi.n	800375e <DMA_CheckFifoParam+0xce>
 80036b0:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <DMA_CheckFifoParam+0x28>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080036db 	.word	0x080036db
 80036c0:	080036c9 	.word	0x080036c9
 80036c4:	0800375f 	.word	0x0800375f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d046      	beq.n	8003762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d8:	e043      	b.n	8003762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e2:	d140      	bne.n	8003766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e03d      	b.n	8003766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	d121      	bne.n	8003738 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d837      	bhi.n	800376a <DMA_CheckFifoParam+0xda>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <DMA_CheckFifoParam+0x70>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003711 	.word	0x08003711
 8003704:	08003717 	.word	0x08003717
 8003708:	08003711 	.word	0x08003711
 800370c:	08003729 	.word	0x08003729
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      break;
 8003714:	e030      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d025      	beq.n	800376e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003726:	e022      	b.n	800376e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003730:	d11f      	bne.n	8003772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003736:	e01c      	b.n	8003772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d903      	bls.n	8003746 <DMA_CheckFifoParam+0xb6>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d003      	beq.n	800374c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003744:	e018      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      break;
 800374a:	e015      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e00b      	b.n	8003776 <DMA_CheckFifoParam+0xe6>
      break;
 800375e:	bf00      	nop
 8003760:	e00a      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      break;
 8003762:	bf00      	nop
 8003764:	e008      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e006      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e004      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      break;   
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <DMA_CheckFifoParam+0xe8>
      break;
 8003776:	bf00      	nop
    }
  } 
  
  return status; 
 8003778:	7bfb      	ldrb	r3, [r7, #15]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop

08003788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	e159      	b.n	8003a58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037a4:	2201      	movs	r2, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	f040 8148 	bne.w	8003a52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d005      	beq.n	80037da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d130      	bne.n	800383c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003810:	2201      	movs	r2, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 0201 	and.w	r2, r3, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b03      	cmp	r3, #3
 8003846:	d017      	beq.n	8003878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d123      	bne.n	80038cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	08da      	lsrs	r2, r3, #3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3208      	adds	r2, #8
 800388c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	220f      	movs	r2, #15
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	08da      	lsrs	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3208      	adds	r2, #8
 80038c6:	69b9      	ldr	r1, [r7, #24]
 80038c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0203 	and.w	r2, r3, #3
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a2 	beq.w	8003a52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	4b57      	ldr	r3, [pc, #348]	; (8003a70 <HAL_GPIO_Init+0x2e8>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <HAL_GPIO_Init+0x2e8>)
 8003918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391c:	6453      	str	r3, [r2, #68]	; 0x44
 800391e:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <HAL_GPIO_Init+0x2e8>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800392a:	4a52      	ldr	r2, [pc, #328]	; (8003a74 <HAL_GPIO_Init+0x2ec>)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	3302      	adds	r3, #2
 8003932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	220f      	movs	r2, #15
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a49      	ldr	r2, [pc, #292]	; (8003a78 <HAL_GPIO_Init+0x2f0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d019      	beq.n	800398a <HAL_GPIO_Init+0x202>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a48      	ldr	r2, [pc, #288]	; (8003a7c <HAL_GPIO_Init+0x2f4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_GPIO_Init+0x1fe>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a47      	ldr	r2, [pc, #284]	; (8003a80 <HAL_GPIO_Init+0x2f8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00d      	beq.n	8003982 <HAL_GPIO_Init+0x1fa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <HAL_GPIO_Init+0x2fc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <HAL_GPIO_Init+0x1f6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a45      	ldr	r2, [pc, #276]	; (8003a88 <HAL_GPIO_Init+0x300>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d101      	bne.n	800397a <HAL_GPIO_Init+0x1f2>
 8003976:	2304      	movs	r3, #4
 8003978:	e008      	b.n	800398c <HAL_GPIO_Init+0x204>
 800397a:	2307      	movs	r3, #7
 800397c:	e006      	b.n	800398c <HAL_GPIO_Init+0x204>
 800397e:	2303      	movs	r3, #3
 8003980:	e004      	b.n	800398c <HAL_GPIO_Init+0x204>
 8003982:	2302      	movs	r3, #2
 8003984:	e002      	b.n	800398c <HAL_GPIO_Init+0x204>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_GPIO_Init+0x204>
 800398a:	2300      	movs	r3, #0
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f002 0203 	and.w	r2, r2, #3
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	4093      	lsls	r3, r2
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399c:	4935      	ldr	r1, [pc, #212]	; (8003a74 <HAL_GPIO_Init+0x2ec>)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	3302      	adds	r3, #2
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <HAL_GPIO_Init+0x304>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ce:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <HAL_GPIO_Init+0x304>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <HAL_GPIO_Init+0x304>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039f8:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_GPIO_Init+0x304>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039fe:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a22:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a4c:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <HAL_GPIO_Init+0x304>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b0f      	cmp	r3, #15
 8003a5c:	f67f aea2 	bls.w	80037a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40020400 	.word	0x40020400
 8003a80:	40020800 	.word	0x40020800
 8003a84:	40020c00 	.word	0x40020c00
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40013c00 	.word	0x40013c00

08003a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e001      	b.n	8003ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
 8003acc:	4613      	mov	r3, r2
 8003ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad0:	787b      	ldrb	r3, [r7, #1]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003adc:	e003      	b.n	8003ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	041a      	lsls	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e12b      	b.n	8003d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fdba 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b58:	f001 fd62 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a81      	ldr	r2, [pc, #516]	; (8003d68 <HAL_I2C_Init+0x274>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d807      	bhi.n	8003b78 <HAL_I2C_Init+0x84>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a80      	ldr	r2, [pc, #512]	; (8003d6c <HAL_I2C_Init+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf94      	ite	ls
 8003b70:	2301      	movls	r3, #1
 8003b72:	2300      	movhi	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e006      	b.n	8003b86 <HAL_I2C_Init+0x92>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a7d      	ldr	r2, [pc, #500]	; (8003d70 <HAL_I2C_Init+0x27c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0e7      	b.n	8003d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a78      	ldr	r2, [pc, #480]	; (8003d74 <HAL_I2C_Init+0x280>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <HAL_I2C_Init+0x274>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d802      	bhi.n	8003bc8 <HAL_I2C_Init+0xd4>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	e009      	b.n	8003bdc <HAL_I2C_Init+0xe8>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	4a69      	ldr	r2, [pc, #420]	; (8003d78 <HAL_I2C_Init+0x284>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	3301      	adds	r3, #1
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	495c      	ldr	r1, [pc, #368]	; (8003d68 <HAL_I2C_Init+0x274>)
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	d819      	bhi.n	8003c30 <HAL_I2C_Init+0x13c>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e59      	subs	r1, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c10:	400b      	ands	r3, r1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_I2C_Init+0x138>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e59      	subs	r1, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	e051      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	e04f      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d111      	bne.n	8003c5c <HAL_I2C_Init+0x168>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e012      	b.n	8003c82 <HAL_I2C_Init+0x18e>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e58      	subs	r0, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	0099      	lsls	r1, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Init+0x196>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e022      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10e      	bne.n	8003cb0 <HAL_I2C_Init+0x1bc>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1e58      	subs	r0, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6859      	ldr	r1, [r3, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	440b      	add	r3, r1
 8003ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	e00f      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	0099      	lsls	r1, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	6809      	ldr	r1, [r1, #0]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6911      	ldr	r1, [r2, #16]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	000186a0 	.word	0x000186a0
 8003d6c:	001e847f 	.word	0x001e847f
 8003d70:	003d08ff 	.word	0x003d08ff
 8003d74:	431bde83 	.word	0x431bde83
 8003d78:	10624dd3 	.word	0x10624dd3

08003d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	461a      	mov	r2, r3
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d90:	f7fe ffb6 	bl	8002d00 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	f040 80e0 	bne.w	8003f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2319      	movs	r3, #25
 8003daa:	2201      	movs	r2, #1
 8003dac:	4970      	ldr	r1, [pc, #448]	; (8003f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fde8 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0d3      	b.n	8003f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2C_Master_Transmit+0x50>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0cc      	b.n	8003f66 <HAL_I2C_Master_Transmit+0x1ea>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d007      	beq.n	8003df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2221      	movs	r2, #33	; 0x21
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	893a      	ldrh	r2, [r7, #8]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a50      	ldr	r2, [pc, #320]	; (8003f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e34:	8979      	ldrh	r1, [r7, #10]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fbbc 	bl	80045b8 <I2C_MasterRequestWrite>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e08d      	b.n	8003f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e60:	e066      	b.n	8003f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6a39      	ldr	r1, [r7, #32]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fe62 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d107      	bne.n	8003e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06b      	b.n	8003f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_I2C_Master_Transmit+0x188>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d017      	beq.n	8003f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	6a39      	ldr	r1, [r7, #32]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fe52 	bl	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00d      	beq.n	8003f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d107      	bne.n	8003f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e01a      	b.n	8003f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d194      	bne.n	8003e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	00100002 	.word	0x00100002
 8003f74:	ffff0000 	.word	0xffff0000

08003f78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	607a      	str	r2, [r7, #4]
 8003f82:	461a      	mov	r2, r3
 8003f84:	460b      	mov	r3, r1
 8003f86:	817b      	strh	r3, [r7, #10]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f8c:	f7fe feb8 	bl	8002d00 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	f040 820b 	bne.w	80043b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2319      	movs	r3, #25
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	497c      	ldr	r1, [pc, #496]	; (800419c <HAL_I2C_Master_Receive+0x224>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fcea 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e1fe      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_I2C_Master_Receive+0x50>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e1f7      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d007      	beq.n	8003fee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2222      	movs	r2, #34	; 0x22
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2210      	movs	r2, #16
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	893a      	ldrh	r2, [r7, #8]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a5c      	ldr	r2, [pc, #368]	; (80041a0 <HAL_I2C_Master_Receive+0x228>)
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004030:	8979      	ldrh	r1, [r7, #10]
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fb40 	bl	80046bc <I2C_MasterRequestRead>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1b8      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d113      	bne.n	8004076 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e18c      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b01      	cmp	r3, #1
 800407c:	d11b      	bne.n	80040b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e16c      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d11b      	bne.n	80040f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	e14c      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800411c:	e138      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	2b03      	cmp	r3, #3
 8004124:	f200 80f1 	bhi.w	800430a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b01      	cmp	r3, #1
 800412e:	d123      	bne.n	8004178 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fd7d 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e139      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004176:	e10b      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	2b02      	cmp	r3, #2
 800417e:	d14e      	bne.n	800421e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <HAL_I2C_Master_Receive+0x22c>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fbfa 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e10e      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
 800419a:	bf00      	nop
 800419c:	00100002 	.word	0x00100002
 80041a0:	ffff0000 	.word	0xffff0000
 80041a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800421c:	e0b8      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	2200      	movs	r2, #0
 8004226:	4966      	ldr	r1, [pc, #408]	; (80043c0 <HAL_I2C_Master_Receive+0x448>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fbab 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0bf      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2200      	movs	r2, #0
 8004282:	494f      	ldr	r1, [pc, #316]	; (80043c0 <HAL_I2C_Master_Receive+0x448>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fb7d 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e091      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004308:	e042      	b.n	8004390 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fc90 	bl	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e04c      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d118      	bne.n	8004390 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	f47f aec2 	bne.w	800411e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e000      	b.n	80043b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
  }
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	00010004 	.word	0x00010004

080043c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	817b      	strh	r3, [r7, #10]
 80043d6:	460b      	mov	r3, r1
 80043d8:	813b      	strh	r3, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043de:	f7fe fc8f 	bl	8002d00 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	f040 80d9 	bne.w	80045a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2319      	movs	r3, #25
 80043f8:	2201      	movs	r2, #1
 80043fa:	496d      	ldr	r1, [pc, #436]	; (80045b0 <HAL_I2C_Mem_Write+0x1ec>)
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fac1 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
 800440a:	e0cc      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_I2C_Mem_Write+0x56>
 8004416:	2302      	movs	r3, #2
 8004418:	e0c5      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d007      	beq.n	8004440 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2221      	movs	r2, #33	; 0x21
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2240      	movs	r2, #64	; 0x40
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a4d      	ldr	r2, [pc, #308]	; (80045b4 <HAL_I2C_Mem_Write+0x1f0>)
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004482:	88f8      	ldrh	r0, [r7, #6]
 8004484:	893a      	ldrh	r2, [r7, #8]
 8004486:	8979      	ldrh	r1, [r7, #10]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4603      	mov	r3, r0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f9e0 	bl	8004858 <I2C_RequestMemoryWrite>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d052      	beq.n	8004544 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e081      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fb42 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d107      	bne.n	80044ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e06b      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d11b      	bne.n	8004544 <HAL_I2C_Mem_Write+0x180>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d017      	beq.n	8004544 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1aa      	bne.n	80044a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb2e 	bl	8004bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00d      	beq.n	8004578 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b04      	cmp	r3, #4
 8004562:	d107      	bne.n	8004574 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e016      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	00100002 	.word	0x00100002
 80045b4:	ffff0000 	.word	0xffff0000

080045b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	460b      	mov	r3, r1
 80045c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d006      	beq.n	80045e2 <I2C_MasterRequestWrite+0x2a>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d003      	beq.n	80045e2 <I2C_MasterRequestWrite+0x2a>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045e0:	d108      	bne.n	80045f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e00b      	b.n	800460c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	2b12      	cmp	r3, #18
 80045fa:	d107      	bne.n	800460c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f9b3 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d103      	bne.n	800463c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e035      	b.n	80046ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004648:	d108      	bne.n	800465c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e01b      	b.n	8004694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	11db      	asrs	r3, r3, #7
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f063 030f 	orn	r3, r3, #15
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	490e      	ldr	r1, [pc, #56]	; (80046b4 <I2C_MasterRequestWrite+0xfc>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f9d9 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e010      	b.n	80046ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4907      	ldr	r1, [pc, #28]	; (80046b8 <I2C_MasterRequestWrite+0x100>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f9c9 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	00010008 	.word	0x00010008
 80046b8:	00010002 	.word	0x00010002

080046bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	460b      	mov	r3, r1
 80046ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d006      	beq.n	80046f6 <I2C_MasterRequestRead+0x3a>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d003      	beq.n	80046f6 <I2C_MasterRequestRead+0x3a>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f4:	d108      	bne.n	8004708 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e00b      	b.n	8004720 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	2b11      	cmp	r3, #17
 800470e:	d107      	bne.n	8004720 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f929 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d103      	bne.n	8004750 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e079      	b.n	8004848 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800475c:	d108      	bne.n	8004770 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]
 800476e:	e05f      	b.n	8004830 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	11db      	asrs	r3, r3, #7
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f003 0306 	and.w	r3, r3, #6
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f063 030f 	orn	r3, r3, #15
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4930      	ldr	r1, [pc, #192]	; (8004850 <I2C_MasterRequestRead+0x194>)
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f94f 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e054      	b.n	8004848 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800479e:	897b      	ldrh	r3, [r7, #10]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4929      	ldr	r1, [pc, #164]	; (8004854 <I2C_MasterRequestRead+0x198>)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f93f 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e044      	b.n	8004848 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f8c7 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d103      	bne.n	8004814 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e017      	b.n	8004848 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004818:	897b      	ldrh	r3, [r7, #10]
 800481a:	11db      	asrs	r3, r3, #7
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f063 030e 	orn	r3, r3, #14
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4907      	ldr	r1, [pc, #28]	; (8004854 <I2C_MasterRequestRead+0x198>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8fb 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	00010008 	.word	0x00010008
 8004854:	00010002 	.word	0x00010002

08004858 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004880:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2200      	movs	r2, #0
 800488a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f878 	bl	8004984 <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a8:	d103      	bne.n	80048b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e05f      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	492d      	ldr	r1, [pc, #180]	; (8004980 <I2C_RequestMemoryWrite+0x128>)
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f8b0 	bl	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e04c      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	6a39      	ldr	r1, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f91a 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b04      	cmp	r3, #4
 8004908:	d107      	bne.n	800491a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004918:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e02b      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004924:	893b      	ldrh	r3, [r7, #8]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	e021      	b.n	8004974 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004930:	893b      	ldrh	r3, [r7, #8]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	b29b      	uxth	r3, r3
 8004936:	b2da      	uxtb	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	6a39      	ldr	r1, [r7, #32]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f8f4 	bl	8004b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b04      	cmp	r3, #4
 8004954:	d107      	bne.n	8004966 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004964:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e005      	b.n	8004976 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	00010002 	.word	0x00010002

08004984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004994:	e025      	b.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d021      	beq.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe f9af 	bl	8002d00 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e023      	b.n	8004a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10d      	bne.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	e00c      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0b6      	beq.n	8004996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a40:	e051      	b.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d123      	bne.n	8004a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e046      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d021      	beq.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe f92d 	bl	8002d00 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e020      	b.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10c      	bne.n	8004b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e00b      	b.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d18d      	bne.n	8004a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3c:	e02d      	b.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f8ce 	bl	8004ce0 <I2C_IsAcknowledgeFailed>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e02d      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d021      	beq.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fe f8d3 	bl	8002d00 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d1ca      	bne.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bbe:	e02d      	b.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f88d 	bl	8004ce0 <I2C_IsAcknowledgeFailed>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e02d      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d021      	beq.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fe f892 	bl	8002d00 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d116      	bne.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d1ca      	bne.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c40:	e042      	b.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d119      	bne.n	8004c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e029      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7fe f83c 	bl	8002d00 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d1b5      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d11b      	bne.n	8004d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0204 	orr.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
	...

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e267      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d075      	beq.n	8004e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d5e:	4b88      	ldr	r3, [pc, #544]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d00c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6a:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d112      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b82      	ldr	r3, [pc, #520]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05b      	beq.n	8004e48 <HAL_RCC_OscConfig+0x108>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d157      	bne.n	8004e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e242      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x74>
 8004da6:	4b76      	ldr	r3, [pc, #472]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a75      	ldr	r2, [pc, #468]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e01d      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x98>
 8004dbe:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6f      	ldr	r2, [pc, #444]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b6d      	ldr	r3, [pc, #436]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6c      	ldr	r2, [pc, #432]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004dd8:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a68      	ldr	r2, [pc, #416]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a65      	ldr	r2, [pc, #404]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fd ff82 	bl	8002d00 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e00:	f7fd ff7e 	bl	8002d00 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e207      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b5b      	ldr	r3, [pc, #364]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd ff6e 	bl	8002d00 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fd ff6a 	bl	8002d00 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1f3      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0xe8>
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d063      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b44      	ldr	r3, [pc, #272]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d116      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1c7      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4937      	ldr	r1, [pc, #220]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	e03a      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <HAL_RCC_OscConfig+0x244>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd ff23 	bl	8002d00 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fd ff1f 	bl	8002d00 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1a8      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4925      	ldr	r1, [pc, #148]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	e015      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCC_OscConfig+0x244>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd ff02 	bl	8002d00 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fd fefe 	bl	8002d00 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e187      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d036      	beq.n	8004f98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <HAL_RCC_OscConfig+0x248>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fd fee2 	bl	8002d00 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fd fede 	bl	8002d00 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e167      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x200>
 8004f5e:	e01b      	b.n	8004f98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_OscConfig+0x248>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f66:	f7fd fecb 	bl	8002d00 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	e00e      	b.n	8004f8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fd fec7 	bl	8002d00 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d907      	bls.n	8004f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e150      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
 8004f80:	40023800 	.word	0x40023800
 8004f84:	42470000 	.word	0x42470000
 8004f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8c:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ea      	bne.n	8004f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8097 	beq.w	80050d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004faa:	4b81      	ldr	r3, [pc, #516]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc6:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd6:	4b77      	ldr	r3, [pc, #476]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe2:	4b74      	ldr	r3, [pc, #464]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a73      	ldr	r2, [pc, #460]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fee:	f7fd fe87 	bl	8002d00 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff6:	f7fd fe83 	bl	8002d00 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e10c      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005008:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_OscConfig+0x474>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x2ea>
 800501c:	4b64      	ldr	r3, [pc, #400]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	e01c      	b.n	8005064 <HAL_RCC_OscConfig+0x324>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b05      	cmp	r3, #5
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x30c>
 8005032:	4b5f      	ldr	r3, [pc, #380]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	4a5e      	ldr	r2, [pc, #376]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	6713      	str	r3, [r2, #112]	; 0x70
 800503e:	4b5c      	ldr	r3, [pc, #368]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0x324>
 800504c:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	4a57      	ldr	r2, [pc, #348]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	6713      	str	r3, [r2, #112]	; 0x70
 8005058:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	4a54      	ldr	r2, [pc, #336]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800505e:	f023 0304 	bic.w	r3, r3, #4
 8005062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd fe48 	bl	8002d00 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005072:	e00a      	b.n	800508a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f7fd fe44 	bl	8002d00 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0cb      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508a:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ee      	beq.n	8005074 <HAL_RCC_OscConfig+0x334>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005098:	f7fd fe32 	bl	8002d00 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a0:	f7fd fe2e 	bl	8002d00 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0b5      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b6:	4b3e      	ldr	r3, [pc, #248]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ee      	bne.n	80050a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d105      	bne.n	80050d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c8:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80a1 	beq.w	8005220 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050de:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d05c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d141      	bne.n	8005176 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f2:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <HAL_RCC_OscConfig+0x478>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fd fe02 	bl	8002d00 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005100:	f7fd fdfe 	bl	8002d00 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e087      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	3b01      	subs	r3, #1
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	491b      	ldr	r1, [pc, #108]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x478>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fd fdd7 	bl	8002d00 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005156:	f7fd fdd3 	bl	8002d00 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e05c      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x416>
 8005174:	e054      	b.n	8005220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_RCC_OscConfig+0x478>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fd fdc0 	bl	8002d00 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005184:	f7fd fdbc 	bl	8002d00 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e045      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x444>
 80051a2:	e03d      	b.n	8005220 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e038      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40007000 	.word	0x40007000
 80051b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCC_OscConfig+0x4ec>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d028      	beq.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d121      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d11a      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d111      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	3b01      	subs	r3, #1
 8005206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800

08005230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0cc      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b68      	ldr	r3, [pc, #416]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d90c      	bls.n	800526c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b65      	ldr	r3, [pc, #404]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0b8      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800528e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	494d      	ldr	r1, [pc, #308]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d044      	beq.n	8005350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d119      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e06f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fe:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e067      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b37      	ldr	r3, [pc, #220]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4934      	ldr	r1, [pc, #208]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005320:	f7fd fcee 	bl	8002d00 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fd fcea 	bl	8002d00 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20c      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e032      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4916      	ldr	r1, [pc, #88]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b6:	f000 f821 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	fa22 f303 	lsr.w	r3, r2, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd fc4e 	bl	8002c78 <HAL_InitTick>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	0800a5a0 	.word	0x0800a5a0
 80053f4:	20000014 	.word	0x20000014
 80053f8:	20000018 	.word	0x20000018

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b094      	sub	sp, #80	; 0x50
 8005402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
 8005408:	2300      	movs	r3, #0
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540c:	2300      	movs	r3, #0
 800540e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005414:	4b79      	ldr	r3, [pc, #484]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b08      	cmp	r3, #8
 800541e:	d00d      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x40>
 8005420:	2b08      	cmp	r3, #8
 8005422:	f200 80e1 	bhi.w	80055e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x34>
 800542a:	2b04      	cmp	r3, #4
 800542c:	d003      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0x3a>
 800542e:	e0db      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005430:	4b73      	ldr	r3, [pc, #460]	; (8005600 <HAL_RCC_GetSysClockFreq+0x204>)
 8005432:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005434:	e0db      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005436:	4b73      	ldr	r3, [pc, #460]	; (8005604 <HAL_RCC_GetSysClockFreq+0x208>)
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800543a:	e0d8      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800543c:	4b6f      	ldr	r3, [pc, #444]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005446:	4b6d      	ldr	r3, [pc, #436]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d063      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005452:	4b6a      	ldr	r3, [pc, #424]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	2200      	movs	r2, #0
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
 800545c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
 800546a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800546e:	4622      	mov	r2, r4
 8005470:	462b      	mov	r3, r5
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	0159      	lsls	r1, r3, #5
 800547c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005480:	0150      	lsls	r0, r2, #5
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4621      	mov	r1, r4
 8005488:	1a51      	subs	r1, r2, r1
 800548a:	6139      	str	r1, [r7, #16]
 800548c:	4629      	mov	r1, r5
 800548e:	eb63 0301 	sbc.w	r3, r3, r1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054a0:	4659      	mov	r1, fp
 80054a2:	018b      	lsls	r3, r1, #6
 80054a4:	4651      	mov	r1, sl
 80054a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054aa:	4651      	mov	r1, sl
 80054ac:	018a      	lsls	r2, r1, #6
 80054ae:	4651      	mov	r1, sl
 80054b0:	ebb2 0801 	subs.w	r8, r2, r1
 80054b4:	4659      	mov	r1, fp
 80054b6:	eb63 0901 	sbc.w	r9, r3, r1
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ce:	4690      	mov	r8, r2
 80054d0:	4699      	mov	r9, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	eb18 0303 	adds.w	r3, r8, r3
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	462b      	mov	r3, r5
 80054dc:	eb49 0303 	adc.w	r3, r9, r3
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ee:	4629      	mov	r1, r5
 80054f0:	024b      	lsls	r3, r1, #9
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054f8:	4621      	mov	r1, r4
 80054fa:	024a      	lsls	r2, r1, #9
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
 8005506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800550c:	f7fb fb74 	bl	8000bf8 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005518:	e058      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b38      	ldr	r3, [pc, #224]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	2200      	movs	r2, #0
 8005522:	4618      	mov	r0, r3
 8005524:	4611      	mov	r1, r2
 8005526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
 8005530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	0159      	lsls	r1, r3, #5
 8005542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005546:	0150      	lsls	r0, r2, #5
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4641      	mov	r1, r8
 800554e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb63 0b01 	sbc.w	fp, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800556c:	ebb2 040a 	subs.w	r4, r2, sl
 8005570:	eb63 050b 	sbc.w	r5, r3, fp
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	00eb      	lsls	r3, r5, #3
 800557e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005582:	00e2      	lsls	r2, r4, #3
 8005584:	4614      	mov	r4, r2
 8005586:	461d      	mov	r5, r3
 8005588:	4643      	mov	r3, r8
 800558a:	18e3      	adds	r3, r4, r3
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	464b      	mov	r3, r9
 8005590:	eb45 0303 	adc.w	r3, r5, r3
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055a2:	4629      	mov	r1, r5
 80055a4:	028b      	lsls	r3, r1, #10
 80055a6:	4621      	mov	r1, r4
 80055a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055ac:	4621      	mov	r1, r4
 80055ae:	028a      	lsls	r2, r1, #10
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b6:	2200      	movs	r2, #0
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	61fa      	str	r2, [r7, #28]
 80055bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c0:	f7fb fb1a 	bl	8000bf8 <__aeabi_uldivmod>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4613      	mov	r3, r2
 80055ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	3301      	adds	r3, #1
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055e6:	e002      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3750      	adds	r7, #80	; 0x50
 80055f4:	46bd      	mov	sp, r7
 80055f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	00f42400 	.word	0x00f42400
 8005604:	007a1200 	.word	0x007a1200

08005608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_RCC_GetHCLKFreq+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000014 	.word	0x20000014

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005624:	f7ff fff0 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0a9b      	lsrs	r3, r3, #10
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	0800a5b0 	.word	0x0800a5b0

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800564c:	f7ff ffdc 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0b5b      	lsrs	r3, r3, #13
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	; (800566c <HAL_RCC_GetPCLK2Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	0800a5b0 	.word	0x0800a5b0

08005670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e041      	b.n	8005706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc ff8e 	bl	80025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f000 fb9c 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e03c      	b.n	80057a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <HAL_TIM_Base_Start+0xa0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d018      	beq.n	800576c <HAL_TIM_Base_Start+0x5c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005742:	d013      	beq.n	800576c <HAL_TIM_Base_Start+0x5c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <HAL_TIM_Base_Start+0xa4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <HAL_TIM_Base_Start+0x5c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <HAL_TIM_Base_Start+0xa8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d009      	beq.n	800576c <HAL_TIM_Base_Start+0x5c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <HAL_TIM_Base_Start+0xac>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_Base_Start+0x5c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <HAL_TIM_Base_Start+0xb0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d111      	bne.n	8005790 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b06      	cmp	r3, #6
 800577c:	d010      	beq.n	80057a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578e:	e007      	b.n	80057a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40014000 	.word	0x40014000

080057c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <HAL_TIM_Base_Stop+0x38>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	f240 4344 	movw	r3, #1092	; 0x444
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <HAL_TIM_Base_Stop+0x38>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d001      	beq.n	800582c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e044      	b.n	80058b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d013      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1a      	ldr	r2, [pc, #104]	; (80058c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a19      	ldr	r2, [pc, #100]	; (80058cc <HAL_TIM_Base_Start_IT+0xb8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x6c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d111      	bne.n	80058a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d010      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	e007      	b.n	80058b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40014000 	.word	0x40014000

080058d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e041      	b.n	800596e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc fea8 	bl	8002654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f000 fa68 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start+0x24>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e022      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d109      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x3e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	bf14      	ite	ne
 80059ae:	2301      	movne	r3, #1
 80059b0:	2300      	moveq	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	e015      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start+0x58>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e008      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e068      	b.n	8005abc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0x82>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x92>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2201      	movs	r2, #1
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fc84 	bl	8006338 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a23      	ldr	r2, [pc, #140]	; (8005ac4 <HAL_TIM_PWM_Start+0x14c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d107      	bne.n	8005a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIM_PWM_Start+0x14c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d013      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <HAL_TIM_PWM_Start+0x150>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_TIM_PWM_Start+0x154>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <HAL_TIM_PWM_Start+0x158>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <HAL_TIM_PWM_Start+0x15c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d111      	bne.n	8005aaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d010      	beq.n	8005aba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa8:	e007      	b.n	8005aba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40014000 	.word	0x40014000

08005ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e0ae      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b0c      	cmp	r3, #12
 8005b02:	f200 809f 	bhi.w	8005c44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b41 	.word	0x08005b41
 8005b10:	08005c45 	.word	0x08005c45
 8005b14:	08005c45 	.word	0x08005c45
 8005b18:	08005c45 	.word	0x08005c45
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005c45 	.word	0x08005c45
 8005b24:	08005c45 	.word	0x08005c45
 8005b28:	08005c45 	.word	0x08005c45
 8005b2c:	08005bc3 	.word	0x08005bc3
 8005b30:	08005c45 	.word	0x08005c45
 8005b34:	08005c45 	.word	0x08005c45
 8005b38:	08005c45 	.word	0x08005c45
 8005b3c:	08005c03 	.word	0x08005c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f9d0 	bl	8005eec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0208 	orr.w	r2, r2, #8
 8005b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0204 	bic.w	r2, r2, #4
 8005b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6999      	ldr	r1, [r3, #24]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	619a      	str	r2, [r3, #24]
      break;
 8005b7e:	e064      	b.n	8005c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fa16 	bl	8005fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	619a      	str	r2, [r3, #24]
      break;
 8005bc0:	e043      	b.n	8005c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fa61 	bl	8006090 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0208 	orr.w	r2, r2, #8
 8005bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0204 	bic.w	r2, r2, #4
 8005bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69d9      	ldr	r1, [r3, #28]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	61da      	str	r2, [r3, #28]
      break;
 8005c00:	e023      	b.n	8005c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 faab 	bl	8006164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69d9      	ldr	r1, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	021a      	lsls	r2, r3, #8
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	61da      	str	r2, [r3, #28]
      break;
 8005c42:	e002      	b.n	8005c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
      break;
 8005c48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e0b4      	b.n	8005de2 <HAL_TIM_ConfigClockSource+0x186>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb0:	d03e      	beq.n	8005d30 <HAL_TIM_ConfigClockSource+0xd4>
 8005cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb6:	f200 8087 	bhi.w	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	f000 8086 	beq.w	8005dce <HAL_TIM_ConfigClockSource+0x172>
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc6:	d87f      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b70      	cmp	r3, #112	; 0x70
 8005cca:	d01a      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0xa6>
 8005ccc:	2b70      	cmp	r3, #112	; 0x70
 8005cce:	d87b      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b60      	cmp	r3, #96	; 0x60
 8005cd2:	d050      	beq.n	8005d76 <HAL_TIM_ConfigClockSource+0x11a>
 8005cd4:	2b60      	cmp	r3, #96	; 0x60
 8005cd6:	d877      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b50      	cmp	r3, #80	; 0x50
 8005cda:	d03c      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0xfa>
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d873      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d058      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0x13a>
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d86f      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d064      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d86b      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d060      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d867      	bhi.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d05c      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d05a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d00:	e062      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6899      	ldr	r1, [r3, #8]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f000 faf1 	bl	80062f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	609a      	str	r2, [r3, #8]
      break;
 8005d2e:	e04f      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	6899      	ldr	r1, [r3, #8]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f000 fada 	bl	80062f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d52:	609a      	str	r2, [r3, #8]
      break;
 8005d54:	e03c      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6859      	ldr	r1, [r3, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f000 fa4e 	bl	8006204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2150      	movs	r1, #80	; 0x50
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 faa7 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8005d74:	e02c      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6859      	ldr	r1, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f000 fa6d 	bl	8006262 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2160      	movs	r1, #96	; 0x60
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fa97 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8005d94:	e01c      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f000 fa2e 	bl	8006204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2140      	movs	r1, #64	; 0x40
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fa87 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8005db4:	e00c      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f000 fa7e 	bl	80062c2 <TIM_ITRx_SetConfig>
      break;
 8005dc6:	e003      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	73fb      	strb	r3, [r7, #15]
      break;
 8005dcc:	e000      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a34      	ldr	r2, [pc, #208]	; (8005ed0 <TIM_Base_SetConfig+0xe4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00f      	beq.n	8005e24 <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0a:	d00b      	beq.n	8005e24 <TIM_Base_SetConfig+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <TIM_Base_SetConfig+0xe8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <TIM_Base_SetConfig+0xec>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_Base_SetConfig+0x38>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <TIM_Base_SetConfig+0xf0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d108      	bne.n	8005e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a25      	ldr	r2, [pc, #148]	; (8005ed0 <TIM_Base_SetConfig+0xe4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01b      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e44:	d017      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <TIM_Base_SetConfig+0xe8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <TIM_Base_SetConfig+0xec>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <TIM_Base_SetConfig+0xf0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <TIM_Base_SetConfig+0xf4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <TIM_Base_SetConfig+0xf8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <TIM_Base_SetConfig+0xfc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d108      	bne.n	8005e88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <TIM_Base_SetConfig+0xe4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	615a      	str	r2, [r3, #20]
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800

08005eec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0302 	bic.w	r3, r3, #2
 8005f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <TIM_OC1_SetConfig+0xc8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10c      	bne.n	8005f62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0308 	bic.w	r3, r3, #8
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 0304 	bic.w	r3, r3, #4
 8005f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <TIM_OC1_SetConfig+0xc8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d111      	bne.n	8005f8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	621a      	str	r2, [r3, #32]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	40010000 	.word	0x40010000

08005fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0210 	bic.w	r2, r3, #16
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0320 	bic.w	r3, r3, #32
 8006002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1e      	ldr	r2, [pc, #120]	; (800608c <TIM_OC2_SetConfig+0xd4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d10d      	bne.n	8006034 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <TIM_OC2_SetConfig+0xd4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d113      	bne.n	8006064 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40010000 	.word	0x40010000

08006090 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <TIM_OC3_SetConfig+0xd0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d10d      	bne.n	800610a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a14      	ldr	r2, [pc, #80]	; (8006160 <TIM_OC3_SetConfig+0xd0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d113      	bne.n	800613a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40010000 	.word	0x40010000

08006164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	031b      	lsls	r3, r3, #12
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a10      	ldr	r2, [pc, #64]	; (8006200 <TIM_OC4_SetConfig+0x9c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d109      	bne.n	80061d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	019b      	lsls	r3, r3, #6
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000

08006204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f023 030a 	bic.w	r3, r3, #10
 8006240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f023 0210 	bic.w	r2, r3, #16
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800628c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	031b      	lsls	r3, r3, #12
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800629e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	f043 0307 	orr.w	r3, r3, #7
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	609a      	str	r2, [r3, #8]
}
 80062ec:	bf00      	nop
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	021a      	lsls	r2, r3, #8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	431a      	orrs	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4313      	orrs	r3, r2
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	609a      	str	r2, [r3, #8]
}
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2201      	movs	r2, #1
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1a      	ldr	r2, [r3, #32]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	43db      	mvns	r3, r3
 800635a:	401a      	ands	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1a      	ldr	r2, [r3, #32]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	431a      	orrs	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e050      	b.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1c      	ldr	r2, [pc, #112]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d018      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d013      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a18      	ldr	r2, [pc, #96]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a16      	ldr	r2, [pc, #88]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a15      	ldr	r2, [pc, #84]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a13      	ldr	r2, [pc, #76]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10c      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	40014000 	.word	0x40014000

08006460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e03f      	b.n	80064f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fc fa1c 	bl	80028c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	; 0x24
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 ff69 	bl	800737c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08a      	sub	sp, #40	; 0x28
 80064fe:	af02      	add	r7, sp, #8
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b20      	cmp	r3, #32
 8006518:	d17c      	bne.n	8006614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Transmit+0x2c>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e075      	b.n	8006616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_UART_Transmit+0x3e>
 8006534:	2302      	movs	r3, #2
 8006536:	e06e      	b.n	8006616 <HAL_UART_Transmit+0x11c>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2221      	movs	r2, #33	; 0x21
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800654e:	f7fc fbd7 	bl	8002d00 <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006568:	d108      	bne.n	800657c <HAL_UART_Transmit+0x82>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e003      	b.n	8006584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800658c:	e02a      	b.n	80065e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2200      	movs	r2, #0
 8006596:	2180      	movs	r1, #128	; 0x80
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fc21 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e036      	b.n	8006616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	3302      	adds	r3, #2
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e007      	b.n	80065d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1cf      	bne.n	800658e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2140      	movs	r1, #64	; 0x40
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fbf1 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e006      	b.n	8006616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	4613      	mov	r3, r2
 800662a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b20      	cmp	r3, #32
 8006636:	d11d      	bne.n	8006674 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_UART_Receive_DMA+0x26>
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e016      	b.n	8006676 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_UART_Receive_DMA+0x38>
 8006652:	2302      	movs	r3, #2
 8006654:	e00f      	b.n	8006676 <HAL_UART_Receive_DMA+0x58>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	461a      	mov	r2, r3
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fc26 	bl	8006ebc <UART_Start_Receive_DMA>
 8006670:	4603      	mov	r3, r0
 8006672:	e000      	b.n	8006676 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006674:	2302      	movs	r3, #2
  }
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0ba      	sub	sp, #232	; 0xe8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10f      	bne.n	80066e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_UART_IRQHandler+0x66>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fd91 	bl	8007206 <UART_Receive_IT>
      return;
 80066e4:	e256      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80de 	beq.w	80068ac <HAL_UART_IRQHandler+0x22c>
 80066f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80d1 	beq.w	80068ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_UART_IRQHandler+0xae>
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_UART_IRQHandler+0xd2>
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <HAL_UART_IRQHandler+0xf6>
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <HAL_UART_IRQHandler+0x126>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800678e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f043 0208 	orr.w	r2, r3, #8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 81ed 	beq.w	8006b8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_UART_IRQHandler+0x14e>
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fd1c 	bl	8007206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <HAL_UART_IRQHandler+0x17a>
 80067f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04f      	beq.n	800689a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fc24 	bl	8007048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d141      	bne.n	8006892 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800683a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800683e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1d9      	bne.n	800680e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d013      	beq.n	800688a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	4a7d      	ldr	r2, [pc, #500]	; (8006a5c <HAL_UART_IRQHandler+0x3dc>)
 8006868:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	4618      	mov	r0, r3
 8006870:	f7fc fcfe 	bl	8003270 <HAL_DMA_Abort_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	e00e      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f99a 	bl	8006bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	e00a      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f996 	bl	8006bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e006      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f992 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068a6:	e170      	b.n	8006b8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	bf00      	nop
    return;
 80068aa:	e16e      	b.n	8006b8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f040 814a 	bne.w	8006b4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8143 	beq.w	8006b4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 813c 	beq.w	8006b4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	f040 80b4 	bne.w	8006a60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8140 	beq.w	8006b8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006916:	429a      	cmp	r2, r3
 8006918:	f080 8139 	bcs.w	8006b8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006922:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692e:	f000 8088 	beq.w	8006a42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800694c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800695e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800696a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1d9      	bne.n	8006932 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3314      	adds	r3, #20
 8006984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800698e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e1      	bne.n	800697e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e3      	bne.n	80069ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	330c      	adds	r3, #12
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a12:	f023 0310 	bic.w	r3, r3, #16
 8006a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a24:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e3      	bne.n	8006a00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fc fba7 	bl	8003190 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8c0 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a58:	e099      	b.n	8006b8e <HAL_UART_IRQHandler+0x50e>
 8006a5a:	bf00      	nop
 8006a5c:	0800710f 	.word	0x0800710f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 808b 	beq.w	8006b92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8086 	beq.w	8006b92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006aaa:	647a      	str	r2, [r7, #68]	; 0x44
 8006aac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e3      	bne.n	8006a86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b28:	61fa      	str	r2, [r7, #28]
 8006b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	69b9      	ldr	r1, [r7, #24]
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	617b      	str	r3, [r7, #20]
   return(result);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e3      	bne.n	8006b04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f848 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b48:	e023      	b.n	8006b92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_UART_IRQHandler+0x4ea>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fae7 	bl	8007136 <UART_Transmit_IT>
    return;
 8006b68:	e014      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <HAL_UART_IRQHandler+0x514>
 8006b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d008      	beq.n	8006b94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb27 	bl	80071d6 <UART_EndTransmit_IT>
    return;
 8006b88:	e004      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
    return;
 8006b8a:	bf00      	nop
 8006b8c:	e002      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
      return;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
      return;
 8006b92:	bf00      	nop
  }
}
 8006b94:	37e8      	adds	r7, #232	; 0xe8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b09c      	sub	sp, #112	; 0x70
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d172      	bne.n	8006cf2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	2200      	movs	r2, #0
 8006c10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c32:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e5      	bne.n	8006c12 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3314      	adds	r3, #20
 8006c64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c66:	647a      	str	r2, [r7, #68]	; 0x44
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c90:	663b      	str	r3, [r7, #96]	; 0x60
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3314      	adds	r3, #20
 8006c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e5      	bne.n	8006c7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d119      	bne.n	8006cf2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f023 0310 	bic.w	r3, r3, #16
 8006cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	330c      	adds	r3, #12
 8006cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cde:	61fa      	str	r2, [r7, #28]
 8006ce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	69b9      	ldr	r1, [r7, #24]
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	617b      	str	r3, [r7, #20]
   return(result);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e5      	bne.n	8006cbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d106      	bne.n	8006d08 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d02:	f7ff ff69 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d06:	e002      	b.n	8006d0e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006d08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d0a:	f7fb ff5b 	bl	8002bc4 <HAL_UART_RxCpltCallback>
}
 8006d0e:	bf00      	nop
 8006d10:	3770      	adds	r7, #112	; 0x70
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d108      	bne.n	8006d3e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4619      	mov	r1, r3
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff ff4e 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d3c:	e002      	b.n	8006d44 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff ff36 	bl	8006bb0 <HAL_UART_RxHalfCpltCallback>
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b80      	cmp	r3, #128	; 0x80
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b21      	cmp	r3, #33	; 0x21
 8006d7e:	d108      	bne.n	8006d92 <UART_DMAError+0x46>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d8c:	68b8      	ldr	r0, [r7, #8]
 8006d8e:	f000 f933 	bl	8006ff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b22      	cmp	r3, #34	; 0x22
 8006db2:	d108      	bne.n	8006dc6 <UART_DMAError+0x7a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	f000 f941 	bl	8007048 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f043 0210 	orr.w	r2, r3, #16
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f7ff fef6 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b090      	sub	sp, #64	; 0x40
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df0:	e050      	b.n	8006e94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d04c      	beq.n	8006e94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e00:	f7fb ff7e 	bl	8002d00 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d241      	bcs.n	8006e94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e30:	637a      	str	r2, [r7, #52]	; 0x34
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3314      	adds	r3, #20
 8006e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	613b      	str	r3, [r7, #16]
   return(result);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e64:	623a      	str	r2, [r7, #32]
 8006e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	69f9      	ldr	r1, [r7, #28]
 8006e6a:	6a3a      	ldr	r2, [r7, #32]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e00f      	b.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d09f      	beq.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3740      	adds	r7, #64	; 0x40
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b098      	sub	sp, #96	; 0x60
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	88fa      	ldrh	r2, [r7, #6]
 8006ed4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2222      	movs	r2, #34	; 0x22
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	4a40      	ldr	r2, [pc, #256]	; (8006fec <UART_Start_Receive_DMA+0x130>)
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	4a3f      	ldr	r2, [pc, #252]	; (8006ff0 <UART_Start_Receive_DMA+0x134>)
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	4a3e      	ldr	r2, [pc, #248]	; (8006ff4 <UART_Start_Receive_DMA+0x138>)
 8006efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	2200      	movs	r2, #0
 8006f02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f04:	f107 0308 	add.w	r3, r7, #8
 8006f08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	f7fc f8e0 	bl	80030e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d019      	beq.n	8006f7a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006f68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e5      	bne.n	8006f46 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3314      	adds	r3, #20
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	657b      	str	r3, [r7, #84]	; 0x54
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3314      	adds	r3, #20
 8006f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3314      	adds	r3, #20
 8006fcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fce:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6a39      	ldr	r1, [r7, #32]
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3760      	adds	r7, #96	; 0x60
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	08006bf1 	.word	0x08006bf1
 8006ff0:	08006d17 	.word	0x08006d17
 8006ff4:	08006d4d 	.word	0x08006d4d

08006ff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	61ba      	str	r2, [r7, #24]
 8007022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6979      	ldr	r1, [r7, #20]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	613b      	str	r3, [r7, #16]
   return(result);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e5      	bne.n	8007000 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800703c:	bf00      	nop
 800703e:	3724      	adds	r7, #36	; 0x24
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b095      	sub	sp, #84	; 0x54
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007070:	643a      	str	r2, [r7, #64]	; 0x40
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e5      	bne.n	8007050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3314      	adds	r3, #20
 800708a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	61fb      	str	r3, [r7, #28]
   return(result);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	64bb      	str	r3, [r7, #72]	; 0x48
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3314      	adds	r3, #20
 80070a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d119      	bne.n	80070f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070e0:	61ba      	str	r2, [r7, #24]
 80070e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	613b      	str	r3, [r7, #16]
   return(result);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e5      	bne.n	80070c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007102:	bf00      	nop
 8007104:	3754      	adds	r7, #84	; 0x54
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff fd4b 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b21      	cmp	r3, #33	; 0x21
 8007148:	d13e      	bne.n	80071c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007152:	d114      	bne.n	800717e <UART_Transmit_IT+0x48>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d110      	bne.n	800717e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	1c9a      	adds	r2, r3, #2
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	621a      	str	r2, [r3, #32]
 800717c:	e008      	b.n	8007190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6211      	str	r1, [r2, #32]
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29b      	uxth	r3, r3
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4619      	mov	r1, r3
 800719e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10f      	bne.n	80071c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fcd0 	bl	8006b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b08c      	sub	sp, #48	; 0x30
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b22      	cmp	r3, #34	; 0x22
 8007218:	f040 80ab 	bne.w	8007372 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d117      	bne.n	8007256 <UART_Receive_IT+0x50>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d113      	bne.n	8007256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007244:	b29a      	uxth	r2, r3
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
 8007254:	e026      	b.n	80072a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007268:	d007      	beq.n	800727a <UART_Receive_IT+0x74>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <UART_Receive_IT+0x82>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	b2da      	uxtb	r2, r3
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e008      	b.n	800729a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	b2da      	uxtb	r2, r3
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4619      	mov	r1, r3
 80072b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d15a      	bne.n	800736e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0220 	bic.w	r2, r2, #32
 80072c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695a      	ldr	r2, [r3, #20]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d135      	bne.n	8007364 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	613b      	str	r3, [r7, #16]
   return(result);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f023 0310 	bic.w	r3, r3, #16
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731e:	623a      	str	r2, [r7, #32]
 8007320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	69f9      	ldr	r1, [r7, #28]
 8007324:	6a3a      	ldr	r2, [r7, #32]
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	61bb      	str	r3, [r7, #24]
   return(result);
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e5      	bne.n	80072fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b10      	cmp	r3, #16
 800733e:	d10a      	bne.n	8007356 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff fc3b 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
 8007362:	e002      	b.n	800736a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fb fc2d 	bl	8002bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	e002      	b.n	8007374 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e000      	b.n	8007374 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007372:	2302      	movs	r3, #2
  }
}
 8007374:	4618      	mov	r0, r3
 8007376:	3730      	adds	r7, #48	; 0x30
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007380:	b0c0      	sub	sp, #256	; 0x100
 8007382:	af00      	add	r7, sp, #0
 8007384:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	68d9      	ldr	r1, [r3, #12]
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	ea40 0301 	orr.w	r3, r0, r1
 80073a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073d4:	f021 010c 	bic.w	r1, r1, #12
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073e2:	430b      	orrs	r3, r1
 80073e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f6:	6999      	ldr	r1, [r3, #24]
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	ea40 0301 	orr.w	r3, r0, r1
 8007402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b8f      	ldr	r3, [pc, #572]	; (8007648 <UART_SetConfig+0x2cc>)
 800740c:	429a      	cmp	r2, r3
 800740e:	d005      	beq.n	800741c <UART_SetConfig+0xa0>
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4b8d      	ldr	r3, [pc, #564]	; (800764c <UART_SetConfig+0x2d0>)
 8007418:	429a      	cmp	r2, r3
 800741a:	d104      	bne.n	8007426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800741c:	f7fe f914 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 8007420:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007424:	e003      	b.n	800742e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007426:	f7fe f8fb 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 800742a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007438:	f040 810c 	bne.w	8007654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800743c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007440:	2200      	movs	r2, #0
 8007442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007446:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800744a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	1891      	adds	r1, r2, r2
 8007454:	65b9      	str	r1, [r7, #88]	; 0x58
 8007456:	415b      	adcs	r3, r3
 8007458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800745a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800745e:	4621      	mov	r1, r4
 8007460:	eb12 0801 	adds.w	r8, r2, r1
 8007464:	4629      	mov	r1, r5
 8007466:	eb43 0901 	adc.w	r9, r3, r1
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800747a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800747e:	4690      	mov	r8, r2
 8007480:	4699      	mov	r9, r3
 8007482:	4623      	mov	r3, r4
 8007484:	eb18 0303 	adds.w	r3, r8, r3
 8007488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800748c:	462b      	mov	r3, r5
 800748e:	eb49 0303 	adc.w	r3, r9, r3
 8007492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074aa:	460b      	mov	r3, r1
 80074ac:	18db      	adds	r3, r3, r3
 80074ae:	653b      	str	r3, [r7, #80]	; 0x50
 80074b0:	4613      	mov	r3, r2
 80074b2:	eb42 0303 	adc.w	r3, r2, r3
 80074b6:	657b      	str	r3, [r7, #84]	; 0x54
 80074b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074c0:	f7f9 fb9a 	bl	8000bf8 <__aeabi_uldivmod>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4b61      	ldr	r3, [pc, #388]	; (8007650 <UART_SetConfig+0x2d4>)
 80074ca:	fba3 2302 	umull	r2, r3, r3, r2
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	011c      	lsls	r4, r3, #4
 80074d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	1891      	adds	r1, r2, r2
 80074ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80074ec:	415b      	adcs	r3, r3
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074f4:	4641      	mov	r1, r8
 80074f6:	eb12 0a01 	adds.w	sl, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb43 0b01 	adc.w	fp, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800750c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007514:	4692      	mov	sl, r2
 8007516:	469b      	mov	fp, r3
 8007518:	4643      	mov	r3, r8
 800751a:	eb1a 0303 	adds.w	r3, sl, r3
 800751e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007522:	464b      	mov	r3, r9
 8007524:	eb4b 0303 	adc.w	r3, fp, r3
 8007528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007538:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800753c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007540:	460b      	mov	r3, r1
 8007542:	18db      	adds	r3, r3, r3
 8007544:	643b      	str	r3, [r7, #64]	; 0x40
 8007546:	4613      	mov	r3, r2
 8007548:	eb42 0303 	adc.w	r3, r2, r3
 800754c:	647b      	str	r3, [r7, #68]	; 0x44
 800754e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007556:	f7f9 fb4f 	bl	8000bf8 <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4611      	mov	r1, r2
 8007560:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <UART_SetConfig+0x2d4>)
 8007562:	fba3 2301 	umull	r2, r3, r3, r1
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2264      	movs	r2, #100	; 0x64
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	1acb      	subs	r3, r1, r3
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <UART_SetConfig+0x2d4>)
 8007578:	fba3 2302 	umull	r2, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007584:	441c      	add	r4, r3
 8007586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758a:	2200      	movs	r2, #0
 800758c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007590:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	1891      	adds	r1, r2, r2
 800759e:	63b9      	str	r1, [r7, #56]	; 0x38
 80075a0:	415b      	adcs	r3, r3
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075a8:	4641      	mov	r1, r8
 80075aa:	1851      	adds	r1, r2, r1
 80075ac:	6339      	str	r1, [r7, #48]	; 0x30
 80075ae:	4649      	mov	r1, r9
 80075b0:	414b      	adcs	r3, r1
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80075c0:	4659      	mov	r1, fp
 80075c2:	00cb      	lsls	r3, r1, #3
 80075c4:	4651      	mov	r1, sl
 80075c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ca:	4651      	mov	r1, sl
 80075cc:	00ca      	lsls	r2, r1, #3
 80075ce:	4610      	mov	r0, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	4642      	mov	r2, r8
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075dc:	464b      	mov	r3, r9
 80075de:	460a      	mov	r2, r1
 80075e0:	eb42 0303 	adc.w	r3, r2, r3
 80075e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075fc:	460b      	mov	r3, r1
 80075fe:	18db      	adds	r3, r3, r3
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
 8007602:	4613      	mov	r3, r2
 8007604:	eb42 0303 	adc.w	r3, r2, r3
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800760e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007612:	f7f9 faf1 	bl	8000bf8 <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <UART_SetConfig+0x2d4>)
 800761c:	fba3 1302 	umull	r1, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	2164      	movs	r1, #100	; 0x64
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	3332      	adds	r3, #50	; 0x32
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <UART_SetConfig+0x2d4>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f003 0207 	and.w	r2, r3, #7
 800763a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4422      	add	r2, r4
 8007642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007644:	e106      	b.n	8007854 <UART_SetConfig+0x4d8>
 8007646:	bf00      	nop
 8007648:	40011000 	.word	0x40011000
 800764c:	40011400 	.word	0x40011400
 8007650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800765e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	1891      	adds	r1, r2, r2
 800766c:	6239      	str	r1, [r7, #32]
 800766e:	415b      	adcs	r3, r3
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
 8007672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007676:	4641      	mov	r1, r8
 8007678:	1854      	adds	r4, r2, r1
 800767a:	4649      	mov	r1, r9
 800767c:	eb43 0501 	adc.w	r5, r3, r1
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	00eb      	lsls	r3, r5, #3
 800768a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800768e:	00e2      	lsls	r2, r4, #3
 8007690:	4614      	mov	r4, r2
 8007692:	461d      	mov	r5, r3
 8007694:	4643      	mov	r3, r8
 8007696:	18e3      	adds	r3, r4, r3
 8007698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800769c:	464b      	mov	r3, r9
 800769e:	eb45 0303 	adc.w	r3, r5, r3
 80076a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80076c2:	4629      	mov	r1, r5
 80076c4:	008b      	lsls	r3, r1, #2
 80076c6:	4621      	mov	r1, r4
 80076c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076cc:	4621      	mov	r1, r4
 80076ce:	008a      	lsls	r2, r1, #2
 80076d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076d4:	f7f9 fa90 	bl	8000bf8 <__aeabi_uldivmod>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4b60      	ldr	r3, [pc, #384]	; (8007860 <UART_SetConfig+0x4e4>)
 80076de:	fba3 2302 	umull	r2, r3, r3, r2
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	011c      	lsls	r4, r3, #4
 80076e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	1891      	adds	r1, r2, r2
 80076fe:	61b9      	str	r1, [r7, #24]
 8007700:	415b      	adcs	r3, r3
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007708:	4641      	mov	r1, r8
 800770a:	1851      	adds	r1, r2, r1
 800770c:	6139      	str	r1, [r7, #16]
 800770e:	4649      	mov	r1, r9
 8007710:	414b      	adcs	r3, r1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007720:	4659      	mov	r1, fp
 8007722:	00cb      	lsls	r3, r1, #3
 8007724:	4651      	mov	r1, sl
 8007726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772a:	4651      	mov	r1, sl
 800772c:	00ca      	lsls	r2, r1, #3
 800772e:	4610      	mov	r0, r2
 8007730:	4619      	mov	r1, r3
 8007732:	4603      	mov	r3, r0
 8007734:	4642      	mov	r2, r8
 8007736:	189b      	adds	r3, r3, r2
 8007738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800773c:	464b      	mov	r3, r9
 800773e:	460a      	mov	r2, r1
 8007740:	eb42 0303 	adc.w	r3, r2, r3
 8007744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	67bb      	str	r3, [r7, #120]	; 0x78
 8007752:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007760:	4649      	mov	r1, r9
 8007762:	008b      	lsls	r3, r1, #2
 8007764:	4641      	mov	r1, r8
 8007766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800776a:	4641      	mov	r1, r8
 800776c:	008a      	lsls	r2, r1, #2
 800776e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007772:	f7f9 fa41 	bl	8000bf8 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4611      	mov	r1, r2
 800777c:	4b38      	ldr	r3, [pc, #224]	; (8007860 <UART_SetConfig+0x4e4>)
 800777e:	fba3 2301 	umull	r2, r3, r3, r1
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2264      	movs	r2, #100	; 0x64
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	1acb      	subs	r3, r1, r3
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	3332      	adds	r3, #50	; 0x32
 8007790:	4a33      	ldr	r2, [pc, #204]	; (8007860 <UART_SetConfig+0x4e4>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800779c:	441c      	add	r4, r3
 800779e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a2:	2200      	movs	r2, #0
 80077a4:	673b      	str	r3, [r7, #112]	; 0x70
 80077a6:	677a      	str	r2, [r7, #116]	; 0x74
 80077a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	1891      	adds	r1, r2, r2
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	415b      	adcs	r3, r3
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077bc:	4641      	mov	r1, r8
 80077be:	1851      	adds	r1, r2, r1
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	4649      	mov	r1, r9
 80077c4:	414b      	adcs	r3, r1
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077d4:	4659      	mov	r1, fp
 80077d6:	00cb      	lsls	r3, r1, #3
 80077d8:	4651      	mov	r1, sl
 80077da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077de:	4651      	mov	r1, sl
 80077e0:	00ca      	lsls	r2, r1, #3
 80077e2:	4610      	mov	r0, r2
 80077e4:	4619      	mov	r1, r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	4642      	mov	r2, r8
 80077ea:	189b      	adds	r3, r3, r2
 80077ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ee:	464b      	mov	r3, r9
 80077f0:	460a      	mov	r2, r1
 80077f2:	eb42 0303 	adc.w	r3, r2, r3
 80077f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	663b      	str	r3, [r7, #96]	; 0x60
 8007802:	667a      	str	r2, [r7, #100]	; 0x64
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007810:	4649      	mov	r1, r9
 8007812:	008b      	lsls	r3, r1, #2
 8007814:	4641      	mov	r1, r8
 8007816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781a:	4641      	mov	r1, r8
 800781c:	008a      	lsls	r2, r1, #2
 800781e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007822:	f7f9 f9e9 	bl	8000bf8 <__aeabi_uldivmod>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <UART_SetConfig+0x4e4>)
 800782c:	fba3 1302 	umull	r1, r3, r3, r2
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	2164      	movs	r1, #100	; 0x64
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	3332      	adds	r3, #50	; 0x32
 800783e:	4a08      	ldr	r2, [pc, #32]	; (8007860 <UART_SetConfig+0x4e4>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4422      	add	r2, r4
 8007852:	609a      	str	r2, [r3, #8]
}
 8007854:	bf00      	nop
 8007856:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800785a:	46bd      	mov	sp, r7
 800785c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007860:	51eb851f 	.word	0x51eb851f

08007864 <__cvt>:
 8007864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	ec55 4b10 	vmov	r4, r5, d0
 800786c:	2d00      	cmp	r5, #0
 800786e:	460e      	mov	r6, r1
 8007870:	4619      	mov	r1, r3
 8007872:	462b      	mov	r3, r5
 8007874:	bfbb      	ittet	lt
 8007876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800787a:	461d      	movlt	r5, r3
 800787c:	2300      	movge	r3, #0
 800787e:	232d      	movlt	r3, #45	; 0x2d
 8007880:	700b      	strb	r3, [r1, #0]
 8007882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007884:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007888:	4691      	mov	r9, r2
 800788a:	f023 0820 	bic.w	r8, r3, #32
 800788e:	bfbc      	itt	lt
 8007890:	4622      	movlt	r2, r4
 8007892:	4614      	movlt	r4, r2
 8007894:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007898:	d005      	beq.n	80078a6 <__cvt+0x42>
 800789a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800789e:	d100      	bne.n	80078a2 <__cvt+0x3e>
 80078a0:	3601      	adds	r6, #1
 80078a2:	2102      	movs	r1, #2
 80078a4:	e000      	b.n	80078a8 <__cvt+0x44>
 80078a6:	2103      	movs	r1, #3
 80078a8:	ab03      	add	r3, sp, #12
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	ab02      	add	r3, sp, #8
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	ec45 4b10 	vmov	d0, r4, r5
 80078b4:	4653      	mov	r3, sl
 80078b6:	4632      	mov	r2, r6
 80078b8:	f000 fe6a 	bl	8008590 <_dtoa_r>
 80078bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078c0:	4607      	mov	r7, r0
 80078c2:	d102      	bne.n	80078ca <__cvt+0x66>
 80078c4:	f019 0f01 	tst.w	r9, #1
 80078c8:	d022      	beq.n	8007910 <__cvt+0xac>
 80078ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078ce:	eb07 0906 	add.w	r9, r7, r6
 80078d2:	d110      	bne.n	80078f6 <__cvt+0x92>
 80078d4:	783b      	ldrb	r3, [r7, #0]
 80078d6:	2b30      	cmp	r3, #48	; 0x30
 80078d8:	d10a      	bne.n	80078f0 <__cvt+0x8c>
 80078da:	2200      	movs	r2, #0
 80078dc:	2300      	movs	r3, #0
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f9 f8f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e6:	b918      	cbnz	r0, 80078f0 <__cvt+0x8c>
 80078e8:	f1c6 0601 	rsb	r6, r6, #1
 80078ec:	f8ca 6000 	str.w	r6, [sl]
 80078f0:	f8da 3000 	ldr.w	r3, [sl]
 80078f4:	4499      	add	r9, r3
 80078f6:	2200      	movs	r2, #0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f9 f8eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007902:	b108      	cbz	r0, 8007908 <__cvt+0xa4>
 8007904:	f8cd 900c 	str.w	r9, [sp, #12]
 8007908:	2230      	movs	r2, #48	; 0x30
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	454b      	cmp	r3, r9
 800790e:	d307      	bcc.n	8007920 <__cvt+0xbc>
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007914:	1bdb      	subs	r3, r3, r7
 8007916:	4638      	mov	r0, r7
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	b004      	add	sp, #16
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	1c59      	adds	r1, r3, #1
 8007922:	9103      	str	r1, [sp, #12]
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e7f0      	b.n	800790a <__cvt+0xa6>

08007928 <__exponent>:
 8007928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800792a:	4603      	mov	r3, r0
 800792c:	2900      	cmp	r1, #0
 800792e:	bfb8      	it	lt
 8007930:	4249      	neglt	r1, r1
 8007932:	f803 2b02 	strb.w	r2, [r3], #2
 8007936:	bfb4      	ite	lt
 8007938:	222d      	movlt	r2, #45	; 0x2d
 800793a:	222b      	movge	r2, #43	; 0x2b
 800793c:	2909      	cmp	r1, #9
 800793e:	7042      	strb	r2, [r0, #1]
 8007940:	dd2a      	ble.n	8007998 <__exponent+0x70>
 8007942:	f10d 0207 	add.w	r2, sp, #7
 8007946:	4617      	mov	r7, r2
 8007948:	260a      	movs	r6, #10
 800794a:	4694      	mov	ip, r2
 800794c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007950:	fb06 1415 	mls	r4, r6, r5, r1
 8007954:	3430      	adds	r4, #48	; 0x30
 8007956:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800795a:	460c      	mov	r4, r1
 800795c:	2c63      	cmp	r4, #99	; 0x63
 800795e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007962:	4629      	mov	r1, r5
 8007964:	dcf1      	bgt.n	800794a <__exponent+0x22>
 8007966:	3130      	adds	r1, #48	; 0x30
 8007968:	f1ac 0402 	sub.w	r4, ip, #2
 800796c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007970:	1c41      	adds	r1, r0, #1
 8007972:	4622      	mov	r2, r4
 8007974:	42ba      	cmp	r2, r7
 8007976:	d30a      	bcc.n	800798e <__exponent+0x66>
 8007978:	f10d 0209 	add.w	r2, sp, #9
 800797c:	eba2 020c 	sub.w	r2, r2, ip
 8007980:	42bc      	cmp	r4, r7
 8007982:	bf88      	it	hi
 8007984:	2200      	movhi	r2, #0
 8007986:	4413      	add	r3, r2
 8007988:	1a18      	subs	r0, r3, r0
 800798a:	b003      	add	sp, #12
 800798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800798e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007992:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007996:	e7ed      	b.n	8007974 <__exponent+0x4c>
 8007998:	2330      	movs	r3, #48	; 0x30
 800799a:	3130      	adds	r1, #48	; 0x30
 800799c:	7083      	strb	r3, [r0, #2]
 800799e:	70c1      	strb	r1, [r0, #3]
 80079a0:	1d03      	adds	r3, r0, #4
 80079a2:	e7f1      	b.n	8007988 <__exponent+0x60>

080079a4 <_printf_float>:
 80079a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	ed2d 8b02 	vpush	{d8}
 80079ac:	b08d      	sub	sp, #52	; 0x34
 80079ae:	460c      	mov	r4, r1
 80079b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079b4:	4616      	mov	r6, r2
 80079b6:	461f      	mov	r7, r3
 80079b8:	4605      	mov	r5, r0
 80079ba:	f000 fce7 	bl	800838c <_localeconv_r>
 80079be:	f8d0 a000 	ldr.w	sl, [r0]
 80079c2:	4650      	mov	r0, sl
 80079c4:	f7f8 fc5c 	bl	8000280 <strlen>
 80079c8:	2300      	movs	r3, #0
 80079ca:	930a      	str	r3, [sp, #40]	; 0x28
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	f8d8 3000 	ldr.w	r3, [r8]
 80079d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80079d8:	3307      	adds	r3, #7
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	f103 0208 	add.w	r2, r3, #8
 80079e2:	f8c8 2000 	str.w	r2, [r8]
 80079e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80079f4:	ee08 0a10 	vmov	s16, r0
 80079f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80079fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a00:	4b9e      	ldr	r3, [pc, #632]	; (8007c7c <_printf_float+0x2d8>)
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	f7f9 f899 	bl	8000b3c <__aeabi_dcmpun>
 8007a0a:	bb88      	cbnz	r0, 8007a70 <_printf_float+0xcc>
 8007a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a10:	4b9a      	ldr	r3, [pc, #616]	; (8007c7c <_printf_float+0x2d8>)
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	f7f9 f873 	bl	8000b00 <__aeabi_dcmple>
 8007a1a:	bb48      	cbnz	r0, 8007a70 <_printf_float+0xcc>
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f9 f862 	bl	8000aec <__aeabi_dcmplt>
 8007a28:	b110      	cbz	r0, 8007a30 <_printf_float+0x8c>
 8007a2a:	232d      	movs	r3, #45	; 0x2d
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a30:	4a93      	ldr	r2, [pc, #588]	; (8007c80 <_printf_float+0x2dc>)
 8007a32:	4b94      	ldr	r3, [pc, #592]	; (8007c84 <_printf_float+0x2e0>)
 8007a34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a38:	bf94      	ite	ls
 8007a3a:	4690      	movls	r8, r2
 8007a3c:	4698      	movhi	r8, r3
 8007a3e:	2303      	movs	r3, #3
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	9b05      	ldr	r3, [sp, #20]
 8007a44:	f023 0304 	bic.w	r3, r3, #4
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	f04f 0900 	mov.w	r9, #0
 8007a4e:	9700      	str	r7, [sp, #0]
 8007a50:	4633      	mov	r3, r6
 8007a52:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a54:	4621      	mov	r1, r4
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 f9da 	bl	8007e10 <_printf_common>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f040 8090 	bne.w	8007b82 <_printf_float+0x1de>
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295
 8007a66:	b00d      	add	sp, #52	; 0x34
 8007a68:	ecbd 8b02 	vpop	{d8}
 8007a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f9 f860 	bl	8000b3c <__aeabi_dcmpun>
 8007a7c:	b140      	cbz	r0, 8007a90 <_printf_float+0xec>
 8007a7e:	464b      	mov	r3, r9
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfbc      	itt	lt
 8007a84:	232d      	movlt	r3, #45	; 0x2d
 8007a86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a8a:	4a7f      	ldr	r2, [pc, #508]	; (8007c88 <_printf_float+0x2e4>)
 8007a8c:	4b7f      	ldr	r3, [pc, #508]	; (8007c8c <_printf_float+0x2e8>)
 8007a8e:	e7d1      	b.n	8007a34 <_printf_float+0x90>
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a96:	9206      	str	r2, [sp, #24]
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	d13f      	bne.n	8007b1c <_printf_float+0x178>
 8007a9c:	2306      	movs	r3, #6
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	9b05      	ldr	r3, [sp, #20]
 8007aa2:	6861      	ldr	r1, [r4, #4]
 8007aa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	ab0a      	add	r3, sp, #40	; 0x28
 8007aae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ab2:	ab09      	add	r3, sp, #36	; 0x24
 8007ab4:	ec49 8b10 	vmov	d0, r8, r9
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	6022      	str	r2, [r4, #0]
 8007abc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f7ff fecf 	bl	8007864 <__cvt>
 8007ac6:	9b06      	ldr	r3, [sp, #24]
 8007ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aca:	2b47      	cmp	r3, #71	; 0x47
 8007acc:	4680      	mov	r8, r0
 8007ace:	d108      	bne.n	8007ae2 <_printf_float+0x13e>
 8007ad0:	1cc8      	adds	r0, r1, #3
 8007ad2:	db02      	blt.n	8007ada <_printf_float+0x136>
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	dd41      	ble.n	8007b5e <_printf_float+0x1ba>
 8007ada:	f1ab 0302 	sub.w	r3, fp, #2
 8007ade:	fa5f fb83 	uxtb.w	fp, r3
 8007ae2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ae6:	d820      	bhi.n	8007b2a <_printf_float+0x186>
 8007ae8:	3901      	subs	r1, #1
 8007aea:	465a      	mov	r2, fp
 8007aec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007af0:	9109      	str	r1, [sp, #36]	; 0x24
 8007af2:	f7ff ff19 	bl	8007928 <__exponent>
 8007af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007af8:	1813      	adds	r3, r2, r0
 8007afa:	2a01      	cmp	r2, #1
 8007afc:	4681      	mov	r9, r0
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	dc02      	bgt.n	8007b08 <_printf_float+0x164>
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	07d2      	lsls	r2, r2, #31
 8007b06:	d501      	bpl.n	8007b0c <_printf_float+0x168>
 8007b08:	3301      	adds	r3, #1
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d09c      	beq.n	8007a4e <_printf_float+0xaa>
 8007b14:	232d      	movs	r3, #45	; 0x2d
 8007b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b1a:	e798      	b.n	8007a4e <_printf_float+0xaa>
 8007b1c:	9a06      	ldr	r2, [sp, #24]
 8007b1e:	2a47      	cmp	r2, #71	; 0x47
 8007b20:	d1be      	bne.n	8007aa0 <_printf_float+0xfc>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1bc      	bne.n	8007aa0 <_printf_float+0xfc>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e7b9      	b.n	8007a9e <_printf_float+0xfa>
 8007b2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b2e:	d118      	bne.n	8007b62 <_printf_float+0x1be>
 8007b30:	2900      	cmp	r1, #0
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	dd0b      	ble.n	8007b4e <_printf_float+0x1aa>
 8007b36:	6121      	str	r1, [r4, #16]
 8007b38:	b913      	cbnz	r3, 8007b40 <_printf_float+0x19c>
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	07d0      	lsls	r0, r2, #31
 8007b3e:	d502      	bpl.n	8007b46 <_printf_float+0x1a2>
 8007b40:	3301      	adds	r3, #1
 8007b42:	440b      	add	r3, r1
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b48:	f04f 0900 	mov.w	r9, #0
 8007b4c:	e7de      	b.n	8007b0c <_printf_float+0x168>
 8007b4e:	b913      	cbnz	r3, 8007b56 <_printf_float+0x1b2>
 8007b50:	6822      	ldr	r2, [r4, #0]
 8007b52:	07d2      	lsls	r2, r2, #31
 8007b54:	d501      	bpl.n	8007b5a <_printf_float+0x1b6>
 8007b56:	3302      	adds	r3, #2
 8007b58:	e7f4      	b.n	8007b44 <_printf_float+0x1a0>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e7f2      	b.n	8007b44 <_printf_float+0x1a0>
 8007b5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b64:	4299      	cmp	r1, r3
 8007b66:	db05      	blt.n	8007b74 <_printf_float+0x1d0>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	6121      	str	r1, [r4, #16]
 8007b6c:	07d8      	lsls	r0, r3, #31
 8007b6e:	d5ea      	bpl.n	8007b46 <_printf_float+0x1a2>
 8007b70:	1c4b      	adds	r3, r1, #1
 8007b72:	e7e7      	b.n	8007b44 <_printf_float+0x1a0>
 8007b74:	2900      	cmp	r1, #0
 8007b76:	bfd4      	ite	le
 8007b78:	f1c1 0202 	rsble	r2, r1, #2
 8007b7c:	2201      	movgt	r2, #1
 8007b7e:	4413      	add	r3, r2
 8007b80:	e7e0      	b.n	8007b44 <_printf_float+0x1a0>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	055a      	lsls	r2, r3, #21
 8007b86:	d407      	bmi.n	8007b98 <_printf_float+0x1f4>
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	d12c      	bne.n	8007bf0 <_printf_float+0x24c>
 8007b96:	e764      	b.n	8007a62 <_printf_float+0xbe>
 8007b98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b9c:	f240 80e0 	bls.w	8007d60 <_printf_float+0x3bc>
 8007ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f7f8 ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d034      	beq.n	8007c1a <_printf_float+0x276>
 8007bb0:	4a37      	ldr	r2, [pc, #220]	; (8007c90 <_printf_float+0x2ec>)
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f af51 	beq.w	8007a62 <_printf_float+0xbe>
 8007bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	db02      	blt.n	8007bce <_printf_float+0x22a>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	07d8      	lsls	r0, r3, #31
 8007bcc:	d510      	bpl.n	8007bf0 <_printf_float+0x24c>
 8007bce:	ee18 3a10 	vmov	r3, s16
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f af41 	beq.w	8007a62 <_printf_float+0xbe>
 8007be0:	f04f 0800 	mov.w	r8, #0
 8007be4:	f104 091a 	add.w	r9, r4, #26
 8007be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4543      	cmp	r3, r8
 8007bee:	dc09      	bgt.n	8007c04 <_printf_float+0x260>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	079b      	lsls	r3, r3, #30
 8007bf4:	f100 8107 	bmi.w	8007e06 <_printf_float+0x462>
 8007bf8:	68e0      	ldr	r0, [r4, #12]
 8007bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bfc:	4298      	cmp	r0, r3
 8007bfe:	bfb8      	it	lt
 8007c00:	4618      	movlt	r0, r3
 8007c02:	e730      	b.n	8007a66 <_printf_float+0xc2>
 8007c04:	2301      	movs	r3, #1
 8007c06:	464a      	mov	r2, r9
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	f43f af27 	beq.w	8007a62 <_printf_float+0xbe>
 8007c14:	f108 0801 	add.w	r8, r8, #1
 8007c18:	e7e6      	b.n	8007be8 <_printf_float+0x244>
 8007c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dc39      	bgt.n	8007c94 <_printf_float+0x2f0>
 8007c20:	4a1b      	ldr	r2, [pc, #108]	; (8007c90 <_printf_float+0x2ec>)
 8007c22:	2301      	movs	r3, #1
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	f43f af19 	beq.w	8007a62 <_printf_float+0xbe>
 8007c30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c34:	4313      	orrs	r3, r2
 8007c36:	d102      	bne.n	8007c3e <_printf_float+0x29a>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	07d9      	lsls	r1, r3, #31
 8007c3c:	d5d8      	bpl.n	8007bf0 <_printf_float+0x24c>
 8007c3e:	ee18 3a10 	vmov	r3, s16
 8007c42:	4652      	mov	r2, sl
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	f43f af09 	beq.w	8007a62 <_printf_float+0xbe>
 8007c50:	f04f 0900 	mov.w	r9, #0
 8007c54:	f104 0a1a 	add.w	sl, r4, #26
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	425b      	negs	r3, r3
 8007c5c:	454b      	cmp	r3, r9
 8007c5e:	dc01      	bgt.n	8007c64 <_printf_float+0x2c0>
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	e792      	b.n	8007b8a <_printf_float+0x1e6>
 8007c64:	2301      	movs	r3, #1
 8007c66:	4652      	mov	r2, sl
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f aef7 	beq.w	8007a62 <_printf_float+0xbe>
 8007c74:	f109 0901 	add.w	r9, r9, #1
 8007c78:	e7ee      	b.n	8007c58 <_printf_float+0x2b4>
 8007c7a:	bf00      	nop
 8007c7c:	7fefffff 	.word	0x7fefffff
 8007c80:	0800a5c0 	.word	0x0800a5c0
 8007c84:	0800a5c4 	.word	0x0800a5c4
 8007c88:	0800a5c8 	.word	0x0800a5c8
 8007c8c:	0800a5cc 	.word	0x0800a5cc
 8007c90:	0800a5d0 	.word	0x0800a5d0
 8007c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	bfa8      	it	ge
 8007c9c:	461a      	movge	r2, r3
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	4691      	mov	r9, r2
 8007ca2:	dc37      	bgt.n	8007d14 <_printf_float+0x370>
 8007ca4:	f04f 0b00 	mov.w	fp, #0
 8007ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cac:	f104 021a 	add.w	r2, r4, #26
 8007cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	eba3 0309 	sub.w	r3, r3, r9
 8007cb8:	455b      	cmp	r3, fp
 8007cba:	dc33      	bgt.n	8007d24 <_printf_float+0x380>
 8007cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	db3b      	blt.n	8007d3c <_printf_float+0x398>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	07da      	lsls	r2, r3, #31
 8007cc8:	d438      	bmi.n	8007d3c <_printf_float+0x398>
 8007cca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007cce:	eba2 0903 	sub.w	r9, r2, r3
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	4591      	cmp	r9, r2
 8007cd8:	bfa8      	it	ge
 8007cda:	4691      	movge	r9, r2
 8007cdc:	f1b9 0f00 	cmp.w	r9, #0
 8007ce0:	dc35      	bgt.n	8007d4e <_printf_float+0x3aa>
 8007ce2:	f04f 0800 	mov.w	r8, #0
 8007ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cea:	f104 0a1a 	add.w	sl, r4, #26
 8007cee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	eba3 0309 	sub.w	r3, r3, r9
 8007cf8:	4543      	cmp	r3, r8
 8007cfa:	f77f af79 	ble.w	8007bf0 <_printf_float+0x24c>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f43f aeaa 	beq.w	8007a62 <_printf_float+0xbe>
 8007d0e:	f108 0801 	add.w	r8, r8, #1
 8007d12:	e7ec      	b.n	8007cee <_printf_float+0x34a>
 8007d14:	4613      	mov	r3, r2
 8007d16:	4631      	mov	r1, r6
 8007d18:	4642      	mov	r2, r8
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b8      	blx	r7
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d1c0      	bne.n	8007ca4 <_printf_float+0x300>
 8007d22:	e69e      	b.n	8007a62 <_printf_float+0xbe>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	9205      	str	r2, [sp, #20]
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f43f ae97 	beq.w	8007a62 <_printf_float+0xbe>
 8007d34:	9a05      	ldr	r2, [sp, #20]
 8007d36:	f10b 0b01 	add.w	fp, fp, #1
 8007d3a:	e7b9      	b.n	8007cb0 <_printf_float+0x30c>
 8007d3c:	ee18 3a10 	vmov	r3, s16
 8007d40:	4652      	mov	r2, sl
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d1be      	bne.n	8007cca <_printf_float+0x326>
 8007d4c:	e689      	b.n	8007a62 <_printf_float+0xbe>
 8007d4e:	9a05      	ldr	r2, [sp, #20]
 8007d50:	464b      	mov	r3, r9
 8007d52:	4442      	add	r2, r8
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d1c1      	bne.n	8007ce2 <_printf_float+0x33e>
 8007d5e:	e680      	b.n	8007a62 <_printf_float+0xbe>
 8007d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d62:	2a01      	cmp	r2, #1
 8007d64:	dc01      	bgt.n	8007d6a <_printf_float+0x3c6>
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	d53a      	bpl.n	8007de0 <_printf_float+0x43c>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f43f ae74 	beq.w	8007a62 <_printf_float+0xbe>
 8007d7a:	ee18 3a10 	vmov	r3, s16
 8007d7e:	4652      	mov	r2, sl
 8007d80:	4631      	mov	r1, r6
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b8      	blx	r7
 8007d86:	3001      	adds	r0, #1
 8007d88:	f43f ae6b 	beq.w	8007a62 <_printf_float+0xbe>
 8007d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d90:	2200      	movs	r2, #0
 8007d92:	2300      	movs	r3, #0
 8007d94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007d98:	f7f8 fe9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d9c:	b9d8      	cbnz	r0, 8007dd6 <_printf_float+0x432>
 8007d9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007da2:	f108 0201 	add.w	r2, r8, #1
 8007da6:	4631      	mov	r1, r6
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b8      	blx	r7
 8007dac:	3001      	adds	r0, #1
 8007dae:	d10e      	bne.n	8007dce <_printf_float+0x42a>
 8007db0:	e657      	b.n	8007a62 <_printf_float+0xbe>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4652      	mov	r2, sl
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f43f ae50 	beq.w	8007a62 <_printf_float+0xbe>
 8007dc2:	f108 0801 	add.w	r8, r8, #1
 8007dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4543      	cmp	r3, r8
 8007dcc:	dcf1      	bgt.n	8007db2 <_printf_float+0x40e>
 8007dce:	464b      	mov	r3, r9
 8007dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dd4:	e6da      	b.n	8007b8c <_printf_float+0x1e8>
 8007dd6:	f04f 0800 	mov.w	r8, #0
 8007dda:	f104 0a1a 	add.w	sl, r4, #26
 8007dde:	e7f2      	b.n	8007dc6 <_printf_float+0x422>
 8007de0:	2301      	movs	r3, #1
 8007de2:	4642      	mov	r2, r8
 8007de4:	e7df      	b.n	8007da6 <_printf_float+0x402>
 8007de6:	2301      	movs	r3, #1
 8007de8:	464a      	mov	r2, r9
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	f43f ae36 	beq.w	8007a62 <_printf_float+0xbe>
 8007df6:	f108 0801 	add.w	r8, r8, #1
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dfe:	1a5b      	subs	r3, r3, r1
 8007e00:	4543      	cmp	r3, r8
 8007e02:	dcf0      	bgt.n	8007de6 <_printf_float+0x442>
 8007e04:	e6f8      	b.n	8007bf8 <_printf_float+0x254>
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	f104 0919 	add.w	r9, r4, #25
 8007e0e:	e7f4      	b.n	8007dfa <_printf_float+0x456>

08007e10 <_printf_common>:
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	4616      	mov	r6, r2
 8007e16:	4699      	mov	r9, r3
 8007e18:	688a      	ldr	r2, [r1, #8]
 8007e1a:	690b      	ldr	r3, [r1, #16]
 8007e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	bfb8      	it	lt
 8007e24:	4613      	movlt	r3, r2
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b10a      	cbz	r2, 8007e36 <_printf_common+0x26>
 8007e32:	3301      	adds	r3, #1
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	0699      	lsls	r1, r3, #26
 8007e3a:	bf42      	ittt	mi
 8007e3c:	6833      	ldrmi	r3, [r6, #0]
 8007e3e:	3302      	addmi	r3, #2
 8007e40:	6033      	strmi	r3, [r6, #0]
 8007e42:	6825      	ldr	r5, [r4, #0]
 8007e44:	f015 0506 	ands.w	r5, r5, #6
 8007e48:	d106      	bne.n	8007e58 <_printf_common+0x48>
 8007e4a:	f104 0a19 	add.w	sl, r4, #25
 8007e4e:	68e3      	ldr	r3, [r4, #12]
 8007e50:	6832      	ldr	r2, [r6, #0]
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	dc26      	bgt.n	8007ea6 <_printf_common+0x96>
 8007e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e5c:	1e13      	subs	r3, r2, #0
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	bf18      	it	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	0692      	lsls	r2, r2, #26
 8007e66:	d42b      	bmi.n	8007ec0 <_printf_common+0xb0>
 8007e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	4638      	mov	r0, r7
 8007e70:	47c0      	blx	r8
 8007e72:	3001      	adds	r0, #1
 8007e74:	d01e      	beq.n	8007eb4 <_printf_common+0xa4>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	6922      	ldr	r2, [r4, #16]
 8007e7a:	f003 0306 	and.w	r3, r3, #6
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	bf02      	ittt	eq
 8007e82:	68e5      	ldreq	r5, [r4, #12]
 8007e84:	6833      	ldreq	r3, [r6, #0]
 8007e86:	1aed      	subeq	r5, r5, r3
 8007e88:	68a3      	ldr	r3, [r4, #8]
 8007e8a:	bf0c      	ite	eq
 8007e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e90:	2500      	movne	r5, #0
 8007e92:	4293      	cmp	r3, r2
 8007e94:	bfc4      	itt	gt
 8007e96:	1a9b      	subgt	r3, r3, r2
 8007e98:	18ed      	addgt	r5, r5, r3
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	341a      	adds	r4, #26
 8007e9e:	42b5      	cmp	r5, r6
 8007ea0:	d11a      	bne.n	8007ed8 <_printf_common+0xc8>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e008      	b.n	8007eb8 <_printf_common+0xa8>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4638      	mov	r0, r7
 8007eae:	47c0      	blx	r8
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d103      	bne.n	8007ebc <_printf_common+0xac>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	e7c6      	b.n	8007e4e <_printf_common+0x3e>
 8007ec0:	18e1      	adds	r1, r4, r3
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	2030      	movs	r0, #48	; 0x30
 8007ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eca:	4422      	add	r2, r4
 8007ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	e7c7      	b.n	8007e68 <_printf_common+0x58>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4622      	mov	r2, r4
 8007edc:	4649      	mov	r1, r9
 8007ede:	4638      	mov	r0, r7
 8007ee0:	47c0      	blx	r8
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d0e6      	beq.n	8007eb4 <_printf_common+0xa4>
 8007ee6:	3601      	adds	r6, #1
 8007ee8:	e7d9      	b.n	8007e9e <_printf_common+0x8e>
	...

08007eec <_printf_i>:
 8007eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	7e0f      	ldrb	r7, [r1, #24]
 8007ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ef4:	2f78      	cmp	r7, #120	; 0x78
 8007ef6:	4691      	mov	r9, r2
 8007ef8:	4680      	mov	r8, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	469a      	mov	sl, r3
 8007efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f02:	d807      	bhi.n	8007f14 <_printf_i+0x28>
 8007f04:	2f62      	cmp	r7, #98	; 0x62
 8007f06:	d80a      	bhi.n	8007f1e <_printf_i+0x32>
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	f000 80d4 	beq.w	80080b6 <_printf_i+0x1ca>
 8007f0e:	2f58      	cmp	r7, #88	; 0x58
 8007f10:	f000 80c0 	beq.w	8008094 <_printf_i+0x1a8>
 8007f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f1c:	e03a      	b.n	8007f94 <_printf_i+0xa8>
 8007f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f22:	2b15      	cmp	r3, #21
 8007f24:	d8f6      	bhi.n	8007f14 <_printf_i+0x28>
 8007f26:	a101      	add	r1, pc, #4	; (adr r1, 8007f2c <_printf_i+0x40>)
 8007f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f99 	.word	0x08007f99
 8007f34:	08007f15 	.word	0x08007f15
 8007f38:	08007f15 	.word	0x08007f15
 8007f3c:	08007f15 	.word	0x08007f15
 8007f40:	08007f15 	.word	0x08007f15
 8007f44:	08007f99 	.word	0x08007f99
 8007f48:	08007f15 	.word	0x08007f15
 8007f4c:	08007f15 	.word	0x08007f15
 8007f50:	08007f15 	.word	0x08007f15
 8007f54:	08007f15 	.word	0x08007f15
 8007f58:	0800809d 	.word	0x0800809d
 8007f5c:	08007fc5 	.word	0x08007fc5
 8007f60:	08008057 	.word	0x08008057
 8007f64:	08007f15 	.word	0x08007f15
 8007f68:	08007f15 	.word	0x08007f15
 8007f6c:	080080bf 	.word	0x080080bf
 8007f70:	08007f15 	.word	0x08007f15
 8007f74:	08007fc5 	.word	0x08007fc5
 8007f78:	08007f15 	.word	0x08007f15
 8007f7c:	08007f15 	.word	0x08007f15
 8007f80:	0800805f 	.word	0x0800805f
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	1d1a      	adds	r2, r3, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	602a      	str	r2, [r5, #0]
 8007f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f94:	2301      	movs	r3, #1
 8007f96:	e09f      	b.n	80080d8 <_printf_i+0x1ec>
 8007f98:	6820      	ldr	r0, [r4, #0]
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	0607      	lsls	r7, r0, #24
 8007f9e:	f103 0104 	add.w	r1, r3, #4
 8007fa2:	6029      	str	r1, [r5, #0]
 8007fa4:	d501      	bpl.n	8007faa <_printf_i+0xbe>
 8007fa6:	681e      	ldr	r6, [r3, #0]
 8007fa8:	e003      	b.n	8007fb2 <_printf_i+0xc6>
 8007faa:	0646      	lsls	r6, r0, #25
 8007fac:	d5fb      	bpl.n	8007fa6 <_printf_i+0xba>
 8007fae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fb2:	2e00      	cmp	r6, #0
 8007fb4:	da03      	bge.n	8007fbe <_printf_i+0xd2>
 8007fb6:	232d      	movs	r3, #45	; 0x2d
 8007fb8:	4276      	negs	r6, r6
 8007fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fbe:	485a      	ldr	r0, [pc, #360]	; (8008128 <_printf_i+0x23c>)
 8007fc0:	230a      	movs	r3, #10
 8007fc2:	e012      	b.n	8007fea <_printf_i+0xfe>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	6820      	ldr	r0, [r4, #0]
 8007fc8:	1d19      	adds	r1, r3, #4
 8007fca:	6029      	str	r1, [r5, #0]
 8007fcc:	0605      	lsls	r5, r0, #24
 8007fce:	d501      	bpl.n	8007fd4 <_printf_i+0xe8>
 8007fd0:	681e      	ldr	r6, [r3, #0]
 8007fd2:	e002      	b.n	8007fda <_printf_i+0xee>
 8007fd4:	0641      	lsls	r1, r0, #25
 8007fd6:	d5fb      	bpl.n	8007fd0 <_printf_i+0xe4>
 8007fd8:	881e      	ldrh	r6, [r3, #0]
 8007fda:	4853      	ldr	r0, [pc, #332]	; (8008128 <_printf_i+0x23c>)
 8007fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8007fde:	bf0c      	ite	eq
 8007fe0:	2308      	moveq	r3, #8
 8007fe2:	230a      	movne	r3, #10
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fea:	6865      	ldr	r5, [r4, #4]
 8007fec:	60a5      	str	r5, [r4, #8]
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	bfa2      	ittt	ge
 8007ff2:	6821      	ldrge	r1, [r4, #0]
 8007ff4:	f021 0104 	bicge.w	r1, r1, #4
 8007ff8:	6021      	strge	r1, [r4, #0]
 8007ffa:	b90e      	cbnz	r6, 8008000 <_printf_i+0x114>
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	d04b      	beq.n	8008098 <_printf_i+0x1ac>
 8008000:	4615      	mov	r5, r2
 8008002:	fbb6 f1f3 	udiv	r1, r6, r3
 8008006:	fb03 6711 	mls	r7, r3, r1, r6
 800800a:	5dc7      	ldrb	r7, [r0, r7]
 800800c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008010:	4637      	mov	r7, r6
 8008012:	42bb      	cmp	r3, r7
 8008014:	460e      	mov	r6, r1
 8008016:	d9f4      	bls.n	8008002 <_printf_i+0x116>
 8008018:	2b08      	cmp	r3, #8
 800801a:	d10b      	bne.n	8008034 <_printf_i+0x148>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	07de      	lsls	r6, r3, #31
 8008020:	d508      	bpl.n	8008034 <_printf_i+0x148>
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	6861      	ldr	r1, [r4, #4]
 8008026:	4299      	cmp	r1, r3
 8008028:	bfde      	ittt	le
 800802a:	2330      	movle	r3, #48	; 0x30
 800802c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008030:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008034:	1b52      	subs	r2, r2, r5
 8008036:	6122      	str	r2, [r4, #16]
 8008038:	f8cd a000 	str.w	sl, [sp]
 800803c:	464b      	mov	r3, r9
 800803e:	aa03      	add	r2, sp, #12
 8008040:	4621      	mov	r1, r4
 8008042:	4640      	mov	r0, r8
 8008044:	f7ff fee4 	bl	8007e10 <_printf_common>
 8008048:	3001      	adds	r0, #1
 800804a:	d14a      	bne.n	80080e2 <_printf_i+0x1f6>
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	b004      	add	sp, #16
 8008052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	f043 0320 	orr.w	r3, r3, #32
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	4833      	ldr	r0, [pc, #204]	; (800812c <_printf_i+0x240>)
 8008060:	2778      	movs	r7, #120	; 0x78
 8008062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	6829      	ldr	r1, [r5, #0]
 800806a:	061f      	lsls	r7, r3, #24
 800806c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008070:	d402      	bmi.n	8008078 <_printf_i+0x18c>
 8008072:	065f      	lsls	r7, r3, #25
 8008074:	bf48      	it	mi
 8008076:	b2b6      	uxthmi	r6, r6
 8008078:	07df      	lsls	r7, r3, #31
 800807a:	bf48      	it	mi
 800807c:	f043 0320 	orrmi.w	r3, r3, #32
 8008080:	6029      	str	r1, [r5, #0]
 8008082:	bf48      	it	mi
 8008084:	6023      	strmi	r3, [r4, #0]
 8008086:	b91e      	cbnz	r6, 8008090 <_printf_i+0x1a4>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	f023 0320 	bic.w	r3, r3, #32
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	2310      	movs	r3, #16
 8008092:	e7a7      	b.n	8007fe4 <_printf_i+0xf8>
 8008094:	4824      	ldr	r0, [pc, #144]	; (8008128 <_printf_i+0x23c>)
 8008096:	e7e4      	b.n	8008062 <_printf_i+0x176>
 8008098:	4615      	mov	r5, r2
 800809a:	e7bd      	b.n	8008018 <_printf_i+0x12c>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	6826      	ldr	r6, [r4, #0]
 80080a0:	6961      	ldr	r1, [r4, #20]
 80080a2:	1d18      	adds	r0, r3, #4
 80080a4:	6028      	str	r0, [r5, #0]
 80080a6:	0635      	lsls	r5, r6, #24
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	d501      	bpl.n	80080b0 <_printf_i+0x1c4>
 80080ac:	6019      	str	r1, [r3, #0]
 80080ae:	e002      	b.n	80080b6 <_printf_i+0x1ca>
 80080b0:	0670      	lsls	r0, r6, #25
 80080b2:	d5fb      	bpl.n	80080ac <_printf_i+0x1c0>
 80080b4:	8019      	strh	r1, [r3, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	6123      	str	r3, [r4, #16]
 80080ba:	4615      	mov	r5, r2
 80080bc:	e7bc      	b.n	8008038 <_printf_i+0x14c>
 80080be:	682b      	ldr	r3, [r5, #0]
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	602a      	str	r2, [r5, #0]
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	6862      	ldr	r2, [r4, #4]
 80080c8:	2100      	movs	r1, #0
 80080ca:	4628      	mov	r0, r5
 80080cc:	f7f8 f888 	bl	80001e0 <memchr>
 80080d0:	b108      	cbz	r0, 80080d6 <_printf_i+0x1ea>
 80080d2:	1b40      	subs	r0, r0, r5
 80080d4:	6060      	str	r0, [r4, #4]
 80080d6:	6863      	ldr	r3, [r4, #4]
 80080d8:	6123      	str	r3, [r4, #16]
 80080da:	2300      	movs	r3, #0
 80080dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e0:	e7aa      	b.n	8008038 <_printf_i+0x14c>
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4649      	mov	r1, r9
 80080e8:	4640      	mov	r0, r8
 80080ea:	47d0      	blx	sl
 80080ec:	3001      	adds	r0, #1
 80080ee:	d0ad      	beq.n	800804c <_printf_i+0x160>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	079b      	lsls	r3, r3, #30
 80080f4:	d413      	bmi.n	800811e <_printf_i+0x232>
 80080f6:	68e0      	ldr	r0, [r4, #12]
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	4298      	cmp	r0, r3
 80080fc:	bfb8      	it	lt
 80080fe:	4618      	movlt	r0, r3
 8008100:	e7a6      	b.n	8008050 <_printf_i+0x164>
 8008102:	2301      	movs	r3, #1
 8008104:	4632      	mov	r2, r6
 8008106:	4649      	mov	r1, r9
 8008108:	4640      	mov	r0, r8
 800810a:	47d0      	blx	sl
 800810c:	3001      	adds	r0, #1
 800810e:	d09d      	beq.n	800804c <_printf_i+0x160>
 8008110:	3501      	adds	r5, #1
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	9903      	ldr	r1, [sp, #12]
 8008116:	1a5b      	subs	r3, r3, r1
 8008118:	42ab      	cmp	r3, r5
 800811a:	dcf2      	bgt.n	8008102 <_printf_i+0x216>
 800811c:	e7eb      	b.n	80080f6 <_printf_i+0x20a>
 800811e:	2500      	movs	r5, #0
 8008120:	f104 0619 	add.w	r6, r4, #25
 8008124:	e7f5      	b.n	8008112 <_printf_i+0x226>
 8008126:	bf00      	nop
 8008128:	0800a5d2 	.word	0x0800a5d2
 800812c:	0800a5e3 	.word	0x0800a5e3

08008130 <std>:
 8008130:	2300      	movs	r3, #0
 8008132:	b510      	push	{r4, lr}
 8008134:	4604      	mov	r4, r0
 8008136:	e9c0 3300 	strd	r3, r3, [r0]
 800813a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800813e:	6083      	str	r3, [r0, #8]
 8008140:	8181      	strh	r1, [r0, #12]
 8008142:	6643      	str	r3, [r0, #100]	; 0x64
 8008144:	81c2      	strh	r2, [r0, #14]
 8008146:	6183      	str	r3, [r0, #24]
 8008148:	4619      	mov	r1, r3
 800814a:	2208      	movs	r2, #8
 800814c:	305c      	adds	r0, #92	; 0x5c
 800814e:	f000 f914 	bl	800837a <memset>
 8008152:	4b0d      	ldr	r3, [pc, #52]	; (8008188 <std+0x58>)
 8008154:	6263      	str	r3, [r4, #36]	; 0x24
 8008156:	4b0d      	ldr	r3, [pc, #52]	; (800818c <std+0x5c>)
 8008158:	62a3      	str	r3, [r4, #40]	; 0x28
 800815a:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <std+0x60>)
 800815c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <std+0x64>)
 8008160:	6323      	str	r3, [r4, #48]	; 0x30
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <std+0x68>)
 8008164:	6224      	str	r4, [r4, #32]
 8008166:	429c      	cmp	r4, r3
 8008168:	d006      	beq.n	8008178 <std+0x48>
 800816a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800816e:	4294      	cmp	r4, r2
 8008170:	d002      	beq.n	8008178 <std+0x48>
 8008172:	33d0      	adds	r3, #208	; 0xd0
 8008174:	429c      	cmp	r4, r3
 8008176:	d105      	bne.n	8008184 <std+0x54>
 8008178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800817c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008180:	f000 b978 	b.w	8008474 <__retarget_lock_init_recursive>
 8008184:	bd10      	pop	{r4, pc}
 8008186:	bf00      	nop
 8008188:	080082f5 	.word	0x080082f5
 800818c:	08008317 	.word	0x08008317
 8008190:	0800834f 	.word	0x0800834f
 8008194:	08008373 	.word	0x08008373
 8008198:	200005fc 	.word	0x200005fc

0800819c <stdio_exit_handler>:
 800819c:	4a02      	ldr	r2, [pc, #8]	; (80081a8 <stdio_exit_handler+0xc>)
 800819e:	4903      	ldr	r1, [pc, #12]	; (80081ac <stdio_exit_handler+0x10>)
 80081a0:	4803      	ldr	r0, [pc, #12]	; (80081b0 <stdio_exit_handler+0x14>)
 80081a2:	f000 b869 	b.w	8008278 <_fwalk_sglue>
 80081a6:	bf00      	nop
 80081a8:	20000020 	.word	0x20000020
 80081ac:	08009e29 	.word	0x08009e29
 80081b0:	2000002c 	.word	0x2000002c

080081b4 <cleanup_stdio>:
 80081b4:	6841      	ldr	r1, [r0, #4]
 80081b6:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <cleanup_stdio+0x34>)
 80081b8:	4299      	cmp	r1, r3
 80081ba:	b510      	push	{r4, lr}
 80081bc:	4604      	mov	r4, r0
 80081be:	d001      	beq.n	80081c4 <cleanup_stdio+0x10>
 80081c0:	f001 fe32 	bl	8009e28 <_fflush_r>
 80081c4:	68a1      	ldr	r1, [r4, #8]
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <cleanup_stdio+0x38>)
 80081c8:	4299      	cmp	r1, r3
 80081ca:	d002      	beq.n	80081d2 <cleanup_stdio+0x1e>
 80081cc:	4620      	mov	r0, r4
 80081ce:	f001 fe2b 	bl	8009e28 <_fflush_r>
 80081d2:	68e1      	ldr	r1, [r4, #12]
 80081d4:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <cleanup_stdio+0x3c>)
 80081d6:	4299      	cmp	r1, r3
 80081d8:	d004      	beq.n	80081e4 <cleanup_stdio+0x30>
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e0:	f001 be22 	b.w	8009e28 <_fflush_r>
 80081e4:	bd10      	pop	{r4, pc}
 80081e6:	bf00      	nop
 80081e8:	200005fc 	.word	0x200005fc
 80081ec:	20000664 	.word	0x20000664
 80081f0:	200006cc 	.word	0x200006cc

080081f4 <global_stdio_init.part.0>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <global_stdio_init.part.0+0x30>)
 80081f8:	4c0b      	ldr	r4, [pc, #44]	; (8008228 <global_stdio_init.part.0+0x34>)
 80081fa:	4a0c      	ldr	r2, [pc, #48]	; (800822c <global_stdio_init.part.0+0x38>)
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	4620      	mov	r0, r4
 8008200:	2200      	movs	r2, #0
 8008202:	2104      	movs	r1, #4
 8008204:	f7ff ff94 	bl	8008130 <std>
 8008208:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800820c:	2201      	movs	r2, #1
 800820e:	2109      	movs	r1, #9
 8008210:	f7ff ff8e 	bl	8008130 <std>
 8008214:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008218:	2202      	movs	r2, #2
 800821a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800821e:	2112      	movs	r1, #18
 8008220:	f7ff bf86 	b.w	8008130 <std>
 8008224:	20000734 	.word	0x20000734
 8008228:	200005fc 	.word	0x200005fc
 800822c:	0800819d 	.word	0x0800819d

08008230 <__sfp_lock_acquire>:
 8008230:	4801      	ldr	r0, [pc, #4]	; (8008238 <__sfp_lock_acquire+0x8>)
 8008232:	f000 b920 	b.w	8008476 <__retarget_lock_acquire_recursive>
 8008236:	bf00      	nop
 8008238:	2000073d 	.word	0x2000073d

0800823c <__sfp_lock_release>:
 800823c:	4801      	ldr	r0, [pc, #4]	; (8008244 <__sfp_lock_release+0x8>)
 800823e:	f000 b91b 	b.w	8008478 <__retarget_lock_release_recursive>
 8008242:	bf00      	nop
 8008244:	2000073d 	.word	0x2000073d

08008248 <__sinit>:
 8008248:	b510      	push	{r4, lr}
 800824a:	4604      	mov	r4, r0
 800824c:	f7ff fff0 	bl	8008230 <__sfp_lock_acquire>
 8008250:	6a23      	ldr	r3, [r4, #32]
 8008252:	b11b      	cbz	r3, 800825c <__sinit+0x14>
 8008254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008258:	f7ff bff0 	b.w	800823c <__sfp_lock_release>
 800825c:	4b04      	ldr	r3, [pc, #16]	; (8008270 <__sinit+0x28>)
 800825e:	6223      	str	r3, [r4, #32]
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <__sinit+0x2c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1f5      	bne.n	8008254 <__sinit+0xc>
 8008268:	f7ff ffc4 	bl	80081f4 <global_stdio_init.part.0>
 800826c:	e7f2      	b.n	8008254 <__sinit+0xc>
 800826e:	bf00      	nop
 8008270:	080081b5 	.word	0x080081b5
 8008274:	20000734 	.word	0x20000734

08008278 <_fwalk_sglue>:
 8008278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800827c:	4607      	mov	r7, r0
 800827e:	4688      	mov	r8, r1
 8008280:	4614      	mov	r4, r2
 8008282:	2600      	movs	r6, #0
 8008284:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008288:	f1b9 0901 	subs.w	r9, r9, #1
 800828c:	d505      	bpl.n	800829a <_fwalk_sglue+0x22>
 800828e:	6824      	ldr	r4, [r4, #0]
 8008290:	2c00      	cmp	r4, #0
 8008292:	d1f7      	bne.n	8008284 <_fwalk_sglue+0xc>
 8008294:	4630      	mov	r0, r6
 8008296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d907      	bls.n	80082b0 <_fwalk_sglue+0x38>
 80082a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082a4:	3301      	adds	r3, #1
 80082a6:	d003      	beq.n	80082b0 <_fwalk_sglue+0x38>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4638      	mov	r0, r7
 80082ac:	47c0      	blx	r8
 80082ae:	4306      	orrs	r6, r0
 80082b0:	3568      	adds	r5, #104	; 0x68
 80082b2:	e7e9      	b.n	8008288 <_fwalk_sglue+0x10>

080082b4 <siprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	b500      	push	{lr}
 80082b8:	b09c      	sub	sp, #112	; 0x70
 80082ba:	ab1d      	add	r3, sp, #116	; 0x74
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	9006      	str	r0, [sp, #24]
 80082c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <siprintf+0x38>)
 80082c6:	9107      	str	r1, [sp, #28]
 80082c8:	9104      	str	r1, [sp, #16]
 80082ca:	4909      	ldr	r1, [pc, #36]	; (80082f0 <siprintf+0x3c>)
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	6800      	ldr	r0, [r0, #0]
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	a902      	add	r1, sp, #8
 80082d8:	f001 fc22 	bl	8009b20 <_svfiprintf_r>
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	b01c      	add	sp, #112	; 0x70
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	20000078 	.word	0x20000078
 80082f0:	ffff0208 	.word	0xffff0208

080082f4 <__sread>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	460c      	mov	r4, r1
 80082f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fc:	f000 f86c 	bl	80083d8 <_read_r>
 8008300:	2800      	cmp	r0, #0
 8008302:	bfab      	itete	ge
 8008304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008306:	89a3      	ldrhlt	r3, [r4, #12]
 8008308:	181b      	addge	r3, r3, r0
 800830a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800830e:	bfac      	ite	ge
 8008310:	6563      	strge	r3, [r4, #84]	; 0x54
 8008312:	81a3      	strhlt	r3, [r4, #12]
 8008314:	bd10      	pop	{r4, pc}

08008316 <__swrite>:
 8008316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831a:	461f      	mov	r7, r3
 800831c:	898b      	ldrh	r3, [r1, #12]
 800831e:	05db      	lsls	r3, r3, #23
 8008320:	4605      	mov	r5, r0
 8008322:	460c      	mov	r4, r1
 8008324:	4616      	mov	r6, r2
 8008326:	d505      	bpl.n	8008334 <__swrite+0x1e>
 8008328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832c:	2302      	movs	r3, #2
 800832e:	2200      	movs	r2, #0
 8008330:	f000 f840 	bl	80083b4 <_lseek_r>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800833a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	4632      	mov	r2, r6
 8008342:	463b      	mov	r3, r7
 8008344:	4628      	mov	r0, r5
 8008346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800834a:	f000 b857 	b.w	80083fc <_write_r>

0800834e <__sseek>:
 800834e:	b510      	push	{r4, lr}
 8008350:	460c      	mov	r4, r1
 8008352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008356:	f000 f82d 	bl	80083b4 <_lseek_r>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	bf15      	itete	ne
 8008360:	6560      	strne	r0, [r4, #84]	; 0x54
 8008362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800836a:	81a3      	strheq	r3, [r4, #12]
 800836c:	bf18      	it	ne
 800836e:	81a3      	strhne	r3, [r4, #12]
 8008370:	bd10      	pop	{r4, pc}

08008372 <__sclose>:
 8008372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008376:	f000 b80d 	b.w	8008394 <_close_r>

0800837a <memset>:
 800837a:	4402      	add	r2, r0
 800837c:	4603      	mov	r3, r0
 800837e:	4293      	cmp	r3, r2
 8008380:	d100      	bne.n	8008384 <memset+0xa>
 8008382:	4770      	bx	lr
 8008384:	f803 1b01 	strb.w	r1, [r3], #1
 8008388:	e7f9      	b.n	800837e <memset+0x4>
	...

0800838c <_localeconv_r>:
 800838c:	4800      	ldr	r0, [pc, #0]	; (8008390 <_localeconv_r+0x4>)
 800838e:	4770      	bx	lr
 8008390:	2000016c 	.word	0x2000016c

08008394 <_close_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d06      	ldr	r5, [pc, #24]	; (80083b0 <_close_r+0x1c>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7f9 ff1d 	bl	80021de <_close>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_close_r+0x1a>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_close_r+0x1a>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	20000738 	.word	0x20000738

080083b4 <_lseek_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d07      	ldr	r5, [pc, #28]	; (80083d4 <_lseek_r+0x20>)
 80083b8:	4604      	mov	r4, r0
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	2200      	movs	r2, #0
 80083c0:	602a      	str	r2, [r5, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f7f9 ff32 	bl	800222c <_lseek>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_lseek_r+0x1e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_lseek_r+0x1e>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20000738 	.word	0x20000738

080083d8 <_read_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d07      	ldr	r5, [pc, #28]	; (80083f8 <_read_r+0x20>)
 80083dc:	4604      	mov	r4, r0
 80083de:	4608      	mov	r0, r1
 80083e0:	4611      	mov	r1, r2
 80083e2:	2200      	movs	r2, #0
 80083e4:	602a      	str	r2, [r5, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	f7f9 fec0 	bl	800216c <_read>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d102      	bne.n	80083f6 <_read_r+0x1e>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	b103      	cbz	r3, 80083f6 <_read_r+0x1e>
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
 80083f8:	20000738 	.word	0x20000738

080083fc <_write_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d07      	ldr	r5, [pc, #28]	; (800841c <_write_r+0x20>)
 8008400:	4604      	mov	r4, r0
 8008402:	4608      	mov	r0, r1
 8008404:	4611      	mov	r1, r2
 8008406:	2200      	movs	r2, #0
 8008408:	602a      	str	r2, [r5, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	f7f9 fecb 	bl	80021a6 <_write>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_write_r+0x1e>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_write_r+0x1e>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	20000738 	.word	0x20000738

08008420 <__errno>:
 8008420:	4b01      	ldr	r3, [pc, #4]	; (8008428 <__errno+0x8>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000078 	.word	0x20000078

0800842c <__libc_init_array>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4d0d      	ldr	r5, [pc, #52]	; (8008464 <__libc_init_array+0x38>)
 8008430:	4c0d      	ldr	r4, [pc, #52]	; (8008468 <__libc_init_array+0x3c>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	2600      	movs	r6, #0
 8008438:	42a6      	cmp	r6, r4
 800843a:	d109      	bne.n	8008450 <__libc_init_array+0x24>
 800843c:	4d0b      	ldr	r5, [pc, #44]	; (800846c <__libc_init_array+0x40>)
 800843e:	4c0c      	ldr	r4, [pc, #48]	; (8008470 <__libc_init_array+0x44>)
 8008440:	f002 f896 	bl	800a570 <_init>
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	2600      	movs	r6, #0
 800844a:	42a6      	cmp	r6, r4
 800844c:	d105      	bne.n	800845a <__libc_init_array+0x2e>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	f855 3b04 	ldr.w	r3, [r5], #4
 8008454:	4798      	blx	r3
 8008456:	3601      	adds	r6, #1
 8008458:	e7ee      	b.n	8008438 <__libc_init_array+0xc>
 800845a:	f855 3b04 	ldr.w	r3, [r5], #4
 800845e:	4798      	blx	r3
 8008460:	3601      	adds	r6, #1
 8008462:	e7f2      	b.n	800844a <__libc_init_array+0x1e>
 8008464:	0800a93c 	.word	0x0800a93c
 8008468:	0800a93c 	.word	0x0800a93c
 800846c:	0800a93c 	.word	0x0800a93c
 8008470:	0800a940 	.word	0x0800a940

08008474 <__retarget_lock_init_recursive>:
 8008474:	4770      	bx	lr

08008476 <__retarget_lock_acquire_recursive>:
 8008476:	4770      	bx	lr

08008478 <__retarget_lock_release_recursive>:
 8008478:	4770      	bx	lr

0800847a <quorem>:
 800847a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847e:	6903      	ldr	r3, [r0, #16]
 8008480:	690c      	ldr	r4, [r1, #16]
 8008482:	42a3      	cmp	r3, r4
 8008484:	4607      	mov	r7, r0
 8008486:	db7e      	blt.n	8008586 <quorem+0x10c>
 8008488:	3c01      	subs	r4, #1
 800848a:	f101 0814 	add.w	r8, r1, #20
 800848e:	f100 0514 	add.w	r5, r0, #20
 8008492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800849c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084a0:	3301      	adds	r3, #1
 80084a2:	429a      	cmp	r2, r3
 80084a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80084b0:	d331      	bcc.n	8008516 <quorem+0x9c>
 80084b2:	f04f 0e00 	mov.w	lr, #0
 80084b6:	4640      	mov	r0, r8
 80084b8:	46ac      	mov	ip, r5
 80084ba:	46f2      	mov	sl, lr
 80084bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80084c0:	b293      	uxth	r3, r2
 80084c2:	fb06 e303 	mla	r3, r6, r3, lr
 80084c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084ca:	0c1a      	lsrs	r2, r3, #16
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ebaa 0303 	sub.w	r3, sl, r3
 80084d2:	f8dc a000 	ldr.w	sl, [ip]
 80084d6:	fa13 f38a 	uxtah	r3, r3, sl
 80084da:	fb06 220e 	mla	r2, r6, lr, r2
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	9b00      	ldr	r3, [sp, #0]
 80084e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084e6:	b292      	uxth	r2, r2
 80084e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80084f4:	4581      	cmp	r9, r0
 80084f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084fa:	f84c 3b04 	str.w	r3, [ip], #4
 80084fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008502:	d2db      	bcs.n	80084bc <quorem+0x42>
 8008504:	f855 300b 	ldr.w	r3, [r5, fp]
 8008508:	b92b      	cbnz	r3, 8008516 <quorem+0x9c>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	3b04      	subs	r3, #4
 800850e:	429d      	cmp	r5, r3
 8008510:	461a      	mov	r2, r3
 8008512:	d32c      	bcc.n	800856e <quorem+0xf4>
 8008514:	613c      	str	r4, [r7, #16]
 8008516:	4638      	mov	r0, r7
 8008518:	f001 f9a8 	bl	800986c <__mcmp>
 800851c:	2800      	cmp	r0, #0
 800851e:	db22      	blt.n	8008566 <quorem+0xec>
 8008520:	3601      	adds	r6, #1
 8008522:	4629      	mov	r1, r5
 8008524:	2000      	movs	r0, #0
 8008526:	f858 2b04 	ldr.w	r2, [r8], #4
 800852a:	f8d1 c000 	ldr.w	ip, [r1]
 800852e:	b293      	uxth	r3, r2
 8008530:	1ac3      	subs	r3, r0, r3
 8008532:	0c12      	lsrs	r2, r2, #16
 8008534:	fa13 f38c 	uxtah	r3, r3, ip
 8008538:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800853c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008546:	45c1      	cmp	r9, r8
 8008548:	f841 3b04 	str.w	r3, [r1], #4
 800854c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008550:	d2e9      	bcs.n	8008526 <quorem+0xac>
 8008552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800855a:	b922      	cbnz	r2, 8008566 <quorem+0xec>
 800855c:	3b04      	subs	r3, #4
 800855e:	429d      	cmp	r5, r3
 8008560:	461a      	mov	r2, r3
 8008562:	d30a      	bcc.n	800857a <quorem+0x100>
 8008564:	613c      	str	r4, [r7, #16]
 8008566:	4630      	mov	r0, r6
 8008568:	b003      	add	sp, #12
 800856a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856e:	6812      	ldr	r2, [r2, #0]
 8008570:	3b04      	subs	r3, #4
 8008572:	2a00      	cmp	r2, #0
 8008574:	d1ce      	bne.n	8008514 <quorem+0x9a>
 8008576:	3c01      	subs	r4, #1
 8008578:	e7c9      	b.n	800850e <quorem+0x94>
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	3b04      	subs	r3, #4
 800857e:	2a00      	cmp	r2, #0
 8008580:	d1f0      	bne.n	8008564 <quorem+0xea>
 8008582:	3c01      	subs	r4, #1
 8008584:	e7eb      	b.n	800855e <quorem+0xe4>
 8008586:	2000      	movs	r0, #0
 8008588:	e7ee      	b.n	8008568 <quorem+0xee>
 800858a:	0000      	movs	r0, r0
 800858c:	0000      	movs	r0, r0
	...

08008590 <_dtoa_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	ed2d 8b04 	vpush	{d8-d9}
 8008598:	69c5      	ldr	r5, [r0, #28]
 800859a:	b093      	sub	sp, #76	; 0x4c
 800859c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085a0:	ec57 6b10 	vmov	r6, r7, d0
 80085a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085a8:	9107      	str	r1, [sp, #28]
 80085aa:	4604      	mov	r4, r0
 80085ac:	920a      	str	r2, [sp, #40]	; 0x28
 80085ae:	930d      	str	r3, [sp, #52]	; 0x34
 80085b0:	b975      	cbnz	r5, 80085d0 <_dtoa_r+0x40>
 80085b2:	2010      	movs	r0, #16
 80085b4:	f000 fe2a 	bl	800920c <malloc>
 80085b8:	4602      	mov	r2, r0
 80085ba:	61e0      	str	r0, [r4, #28]
 80085bc:	b920      	cbnz	r0, 80085c8 <_dtoa_r+0x38>
 80085be:	4bae      	ldr	r3, [pc, #696]	; (8008878 <_dtoa_r+0x2e8>)
 80085c0:	21ef      	movs	r1, #239	; 0xef
 80085c2:	48ae      	ldr	r0, [pc, #696]	; (800887c <_dtoa_r+0x2ec>)
 80085c4:	f001 fc90 	bl	8009ee8 <__assert_func>
 80085c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085cc:	6005      	str	r5, [r0, #0]
 80085ce:	60c5      	str	r5, [r0, #12]
 80085d0:	69e3      	ldr	r3, [r4, #28]
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	b151      	cbz	r1, 80085ec <_dtoa_r+0x5c>
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	604a      	str	r2, [r1, #4]
 80085da:	2301      	movs	r3, #1
 80085dc:	4093      	lsls	r3, r2
 80085de:	608b      	str	r3, [r1, #8]
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 ff07 	bl	80093f4 <_Bfree>
 80085e6:	69e3      	ldr	r3, [r4, #28]
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	1e3b      	subs	r3, r7, #0
 80085ee:	bfbb      	ittet	lt
 80085f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085f4:	9303      	strlt	r3, [sp, #12]
 80085f6:	2300      	movge	r3, #0
 80085f8:	2201      	movlt	r2, #1
 80085fa:	bfac      	ite	ge
 80085fc:	f8c8 3000 	strge.w	r3, [r8]
 8008600:	f8c8 2000 	strlt.w	r2, [r8]
 8008604:	4b9e      	ldr	r3, [pc, #632]	; (8008880 <_dtoa_r+0x2f0>)
 8008606:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800860a:	ea33 0308 	bics.w	r3, r3, r8
 800860e:	d11b      	bne.n	8008648 <_dtoa_r+0xb8>
 8008610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008612:	f242 730f 	movw	r3, #9999	; 0x270f
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800861c:	4333      	orrs	r3, r6
 800861e:	f000 8593 	beq.w	8009148 <_dtoa_r+0xbb8>
 8008622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008624:	b963      	cbnz	r3, 8008640 <_dtoa_r+0xb0>
 8008626:	4b97      	ldr	r3, [pc, #604]	; (8008884 <_dtoa_r+0x2f4>)
 8008628:	e027      	b.n	800867a <_dtoa_r+0xea>
 800862a:	4b97      	ldr	r3, [pc, #604]	; (8008888 <_dtoa_r+0x2f8>)
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	9800      	ldr	r0, [sp, #0]
 8008636:	b013      	add	sp, #76	; 0x4c
 8008638:	ecbd 8b04 	vpop	{d8-d9}
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	4b90      	ldr	r3, [pc, #576]	; (8008884 <_dtoa_r+0x2f4>)
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	3303      	adds	r3, #3
 8008646:	e7f3      	b.n	8008630 <_dtoa_r+0xa0>
 8008648:	ed9d 7b02 	vldr	d7, [sp, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	ec51 0b17 	vmov	r0, r1, d7
 8008652:	eeb0 8a47 	vmov.f32	s16, s14
 8008656:	eef0 8a67 	vmov.f32	s17, s15
 800865a:	2300      	movs	r3, #0
 800865c:	f7f8 fa3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008660:	4681      	mov	r9, r0
 8008662:	b160      	cbz	r0, 800867e <_dtoa_r+0xee>
 8008664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008666:	2301      	movs	r3, #1
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 8568 	beq.w	8009142 <_dtoa_r+0xbb2>
 8008672:	4b86      	ldr	r3, [pc, #536]	; (800888c <_dtoa_r+0x2fc>)
 8008674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	3b01      	subs	r3, #1
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	e7da      	b.n	8008634 <_dtoa_r+0xa4>
 800867e:	aa10      	add	r2, sp, #64	; 0x40
 8008680:	a911      	add	r1, sp, #68	; 0x44
 8008682:	4620      	mov	r0, r4
 8008684:	eeb0 0a48 	vmov.f32	s0, s16
 8008688:	eef0 0a68 	vmov.f32	s1, s17
 800868c:	f001 f994 	bl	80099b8 <__d2b>
 8008690:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008694:	4682      	mov	sl, r0
 8008696:	2d00      	cmp	r5, #0
 8008698:	d07f      	beq.n	800879a <_dtoa_r+0x20a>
 800869a:	ee18 3a90 	vmov	r3, s17
 800869e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086a6:	ec51 0b18 	vmov	r0, r1, d8
 80086aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086b6:	4619      	mov	r1, r3
 80086b8:	2200      	movs	r2, #0
 80086ba:	4b75      	ldr	r3, [pc, #468]	; (8008890 <_dtoa_r+0x300>)
 80086bc:	f7f7 fdec 	bl	8000298 <__aeabi_dsub>
 80086c0:	a367      	add	r3, pc, #412	; (adr r3, 8008860 <_dtoa_r+0x2d0>)
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	f7f7 ff9f 	bl	8000608 <__aeabi_dmul>
 80086ca:	a367      	add	r3, pc, #412	; (adr r3, 8008868 <_dtoa_r+0x2d8>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f7f7 fde4 	bl	800029c <__adddf3>
 80086d4:	4606      	mov	r6, r0
 80086d6:	4628      	mov	r0, r5
 80086d8:	460f      	mov	r7, r1
 80086da:	f7f7 ff2b 	bl	8000534 <__aeabi_i2d>
 80086de:	a364      	add	r3, pc, #400	; (adr r3, 8008870 <_dtoa_r+0x2e0>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f7f7 fdd4 	bl	800029c <__adddf3>
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	f7f8 fa36 	bl	8000b68 <__aeabi_d2iz>
 80086fc:	2200      	movs	r2, #0
 80086fe:	4683      	mov	fp, r0
 8008700:	2300      	movs	r3, #0
 8008702:	4630      	mov	r0, r6
 8008704:	4639      	mov	r1, r7
 8008706:	f7f8 f9f1 	bl	8000aec <__aeabi_dcmplt>
 800870a:	b148      	cbz	r0, 8008720 <_dtoa_r+0x190>
 800870c:	4658      	mov	r0, fp
 800870e:	f7f7 ff11 	bl	8000534 <__aeabi_i2d>
 8008712:	4632      	mov	r2, r6
 8008714:	463b      	mov	r3, r7
 8008716:	f7f8 f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800871a:	b908      	cbnz	r0, 8008720 <_dtoa_r+0x190>
 800871c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008720:	f1bb 0f16 	cmp.w	fp, #22
 8008724:	d857      	bhi.n	80087d6 <_dtoa_r+0x246>
 8008726:	4b5b      	ldr	r3, [pc, #364]	; (8008894 <_dtoa_r+0x304>)
 8008728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	ec51 0b18 	vmov	r0, r1, d8
 8008734:	f7f8 f9da 	bl	8000aec <__aeabi_dcmplt>
 8008738:	2800      	cmp	r0, #0
 800873a:	d04e      	beq.n	80087da <_dtoa_r+0x24a>
 800873c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008740:	2300      	movs	r3, #0
 8008742:	930c      	str	r3, [sp, #48]	; 0x30
 8008744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008746:	1b5b      	subs	r3, r3, r5
 8008748:	1e5a      	subs	r2, r3, #1
 800874a:	bf45      	ittet	mi
 800874c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008750:	9305      	strmi	r3, [sp, #20]
 8008752:	2300      	movpl	r3, #0
 8008754:	2300      	movmi	r3, #0
 8008756:	9206      	str	r2, [sp, #24]
 8008758:	bf54      	ite	pl
 800875a:	9305      	strpl	r3, [sp, #20]
 800875c:	9306      	strmi	r3, [sp, #24]
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	db3c      	blt.n	80087de <_dtoa_r+0x24e>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800876a:	445b      	add	r3, fp
 800876c:	9306      	str	r3, [sp, #24]
 800876e:	2300      	movs	r3, #0
 8008770:	9308      	str	r3, [sp, #32]
 8008772:	9b07      	ldr	r3, [sp, #28]
 8008774:	2b09      	cmp	r3, #9
 8008776:	d868      	bhi.n	800884a <_dtoa_r+0x2ba>
 8008778:	2b05      	cmp	r3, #5
 800877a:	bfc4      	itt	gt
 800877c:	3b04      	subgt	r3, #4
 800877e:	9307      	strgt	r3, [sp, #28]
 8008780:	9b07      	ldr	r3, [sp, #28]
 8008782:	f1a3 0302 	sub.w	r3, r3, #2
 8008786:	bfcc      	ite	gt
 8008788:	2500      	movgt	r5, #0
 800878a:	2501      	movle	r5, #1
 800878c:	2b03      	cmp	r3, #3
 800878e:	f200 8085 	bhi.w	800889c <_dtoa_r+0x30c>
 8008792:	e8df f003 	tbb	[pc, r3]
 8008796:	3b2e      	.short	0x3b2e
 8008798:	5839      	.short	0x5839
 800879a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800879e:	441d      	add	r5, r3
 80087a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	bfc1      	itttt	gt
 80087a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80087b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80087b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80087b8:	bfd6      	itet	le
 80087ba:	f1c3 0320 	rsble	r3, r3, #32
 80087be:	ea48 0003 	orrgt.w	r0, r8, r3
 80087c2:	fa06 f003 	lslle.w	r0, r6, r3
 80087c6:	f7f7 fea5 	bl	8000514 <__aeabi_ui2d>
 80087ca:	2201      	movs	r2, #1
 80087cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80087d0:	3d01      	subs	r5, #1
 80087d2:	920e      	str	r2, [sp, #56]	; 0x38
 80087d4:	e76f      	b.n	80086b6 <_dtoa_r+0x126>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e7b3      	b.n	8008742 <_dtoa_r+0x1b2>
 80087da:	900c      	str	r0, [sp, #48]	; 0x30
 80087dc:	e7b2      	b.n	8008744 <_dtoa_r+0x1b4>
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	eba3 030b 	sub.w	r3, r3, fp
 80087e4:	9305      	str	r3, [sp, #20]
 80087e6:	f1cb 0300 	rsb	r3, fp, #0
 80087ea:	9308      	str	r3, [sp, #32]
 80087ec:	2300      	movs	r3, #0
 80087ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f0:	e7bf      	b.n	8008772 <_dtoa_r+0x1e2>
 80087f2:	2300      	movs	r3, #0
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dc52      	bgt.n	80088a2 <_dtoa_r+0x312>
 80087fc:	2301      	movs	r3, #1
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	461a      	mov	r2, r3
 8008804:	920a      	str	r2, [sp, #40]	; 0x28
 8008806:	e00b      	b.n	8008820 <_dtoa_r+0x290>
 8008808:	2301      	movs	r3, #1
 800880a:	e7f3      	b.n	80087f4 <_dtoa_r+0x264>
 800880c:	2300      	movs	r3, #0
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008812:	445b      	add	r3, fp
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	3301      	adds	r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	bfb8      	it	lt
 800881e:	2301      	movlt	r3, #1
 8008820:	69e0      	ldr	r0, [r4, #28]
 8008822:	2100      	movs	r1, #0
 8008824:	2204      	movs	r2, #4
 8008826:	f102 0614 	add.w	r6, r2, #20
 800882a:	429e      	cmp	r6, r3
 800882c:	d93d      	bls.n	80088aa <_dtoa_r+0x31a>
 800882e:	6041      	str	r1, [r0, #4]
 8008830:	4620      	mov	r0, r4
 8008832:	f000 fd9f 	bl	8009374 <_Balloc>
 8008836:	9000      	str	r0, [sp, #0]
 8008838:	2800      	cmp	r0, #0
 800883a:	d139      	bne.n	80088b0 <_dtoa_r+0x320>
 800883c:	4b16      	ldr	r3, [pc, #88]	; (8008898 <_dtoa_r+0x308>)
 800883e:	4602      	mov	r2, r0
 8008840:	f240 11af 	movw	r1, #431	; 0x1af
 8008844:	e6bd      	b.n	80085c2 <_dtoa_r+0x32>
 8008846:	2301      	movs	r3, #1
 8008848:	e7e1      	b.n	800880e <_dtoa_r+0x27e>
 800884a:	2501      	movs	r5, #1
 800884c:	2300      	movs	r3, #0
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	9509      	str	r5, [sp, #36]	; 0x24
 8008852:	f04f 33ff 	mov.w	r3, #4294967295
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	2200      	movs	r2, #0
 800885c:	2312      	movs	r3, #18
 800885e:	e7d1      	b.n	8008804 <_dtoa_r+0x274>
 8008860:	636f4361 	.word	0x636f4361
 8008864:	3fd287a7 	.word	0x3fd287a7
 8008868:	8b60c8b3 	.word	0x8b60c8b3
 800886c:	3fc68a28 	.word	0x3fc68a28
 8008870:	509f79fb 	.word	0x509f79fb
 8008874:	3fd34413 	.word	0x3fd34413
 8008878:	0800a601 	.word	0x0800a601
 800887c:	0800a618 	.word	0x0800a618
 8008880:	7ff00000 	.word	0x7ff00000
 8008884:	0800a5fd 	.word	0x0800a5fd
 8008888:	0800a5f4 	.word	0x0800a5f4
 800888c:	0800a5d1 	.word	0x0800a5d1
 8008890:	3ff80000 	.word	0x3ff80000
 8008894:	0800a708 	.word	0x0800a708
 8008898:	0800a670 	.word	0x0800a670
 800889c:	2301      	movs	r3, #1
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	e7d7      	b.n	8008852 <_dtoa_r+0x2c2>
 80088a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	e7ba      	b.n	8008820 <_dtoa_r+0x290>
 80088aa:	3101      	adds	r1, #1
 80088ac:	0052      	lsls	r2, r2, #1
 80088ae:	e7ba      	b.n	8008826 <_dtoa_r+0x296>
 80088b0:	69e3      	ldr	r3, [r4, #28]
 80088b2:	9a00      	ldr	r2, [sp, #0]
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	2b0e      	cmp	r3, #14
 80088ba:	f200 80a8 	bhi.w	8008a0e <_dtoa_r+0x47e>
 80088be:	2d00      	cmp	r5, #0
 80088c0:	f000 80a5 	beq.w	8008a0e <_dtoa_r+0x47e>
 80088c4:	f1bb 0f00 	cmp.w	fp, #0
 80088c8:	dd38      	ble.n	800893c <_dtoa_r+0x3ac>
 80088ca:	4bc0      	ldr	r3, [pc, #768]	; (8008bcc <_dtoa_r+0x63c>)
 80088cc:	f00b 020f 	and.w	r2, fp, #15
 80088d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80088dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80088e0:	d019      	beq.n	8008916 <_dtoa_r+0x386>
 80088e2:	4bbb      	ldr	r3, [pc, #748]	; (8008bd0 <_dtoa_r+0x640>)
 80088e4:	ec51 0b18 	vmov	r0, r1, d8
 80088e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088ec:	f7f7 ffb6 	bl	800085c <__aeabi_ddiv>
 80088f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f4:	f008 080f 	and.w	r8, r8, #15
 80088f8:	2503      	movs	r5, #3
 80088fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008bd0 <_dtoa_r+0x640>
 80088fe:	f1b8 0f00 	cmp.w	r8, #0
 8008902:	d10a      	bne.n	800891a <_dtoa_r+0x38a>
 8008904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008908:	4632      	mov	r2, r6
 800890a:	463b      	mov	r3, r7
 800890c:	f7f7 ffa6 	bl	800085c <__aeabi_ddiv>
 8008910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008914:	e02b      	b.n	800896e <_dtoa_r+0x3de>
 8008916:	2502      	movs	r5, #2
 8008918:	e7ef      	b.n	80088fa <_dtoa_r+0x36a>
 800891a:	f018 0f01 	tst.w	r8, #1
 800891e:	d008      	beq.n	8008932 <_dtoa_r+0x3a2>
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008928:	f7f7 fe6e 	bl	8000608 <__aeabi_dmul>
 800892c:	3501      	adds	r5, #1
 800892e:	4606      	mov	r6, r0
 8008930:	460f      	mov	r7, r1
 8008932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008936:	f109 0908 	add.w	r9, r9, #8
 800893a:	e7e0      	b.n	80088fe <_dtoa_r+0x36e>
 800893c:	f000 809f 	beq.w	8008a7e <_dtoa_r+0x4ee>
 8008940:	f1cb 0600 	rsb	r6, fp, #0
 8008944:	4ba1      	ldr	r3, [pc, #644]	; (8008bcc <_dtoa_r+0x63c>)
 8008946:	4fa2      	ldr	r7, [pc, #648]	; (8008bd0 <_dtoa_r+0x640>)
 8008948:	f006 020f 	and.w	r2, r6, #15
 800894c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	ec51 0b18 	vmov	r0, r1, d8
 8008958:	f7f7 fe56 	bl	8000608 <__aeabi_dmul>
 800895c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008960:	1136      	asrs	r6, r6, #4
 8008962:	2300      	movs	r3, #0
 8008964:	2502      	movs	r5, #2
 8008966:	2e00      	cmp	r6, #0
 8008968:	d17e      	bne.n	8008a68 <_dtoa_r+0x4d8>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1d0      	bne.n	8008910 <_dtoa_r+0x380>
 800896e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008970:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 8084 	beq.w	8008a82 <_dtoa_r+0x4f2>
 800897a:	4b96      	ldr	r3, [pc, #600]	; (8008bd4 <_dtoa_r+0x644>)
 800897c:	2200      	movs	r2, #0
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f7f8 f8b3 	bl	8000aec <__aeabi_dcmplt>
 8008986:	2800      	cmp	r0, #0
 8008988:	d07b      	beq.n	8008a82 <_dtoa_r+0x4f2>
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d078      	beq.n	8008a82 <_dtoa_r+0x4f2>
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	dd39      	ble.n	8008a0a <_dtoa_r+0x47a>
 8008996:	4b90      	ldr	r3, [pc, #576]	; (8008bd8 <_dtoa_r+0x648>)
 8008998:	2200      	movs	r2, #0
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f7 fe33 	bl	8000608 <__aeabi_dmul>
 80089a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a6:	9e01      	ldr	r6, [sp, #4]
 80089a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089ac:	3501      	adds	r5, #1
 80089ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7f7 fdbe 	bl	8000534 <__aeabi_i2d>
 80089b8:	4642      	mov	r2, r8
 80089ba:	464b      	mov	r3, r9
 80089bc:	f7f7 fe24 	bl	8000608 <__aeabi_dmul>
 80089c0:	4b86      	ldr	r3, [pc, #536]	; (8008bdc <_dtoa_r+0x64c>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	f7f7 fc6a 	bl	800029c <__adddf3>
 80089c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d0:	9303      	str	r3, [sp, #12]
 80089d2:	2e00      	cmp	r6, #0
 80089d4:	d158      	bne.n	8008a88 <_dtoa_r+0x4f8>
 80089d6:	4b82      	ldr	r3, [pc, #520]	; (8008be0 <_dtoa_r+0x650>)
 80089d8:	2200      	movs	r2, #0
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fc5b 	bl	8000298 <__aeabi_dsub>
 80089e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089e6:	4680      	mov	r8, r0
 80089e8:	4689      	mov	r9, r1
 80089ea:	f7f8 f89d 	bl	8000b28 <__aeabi_dcmpgt>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f040 8296 	bne.w	8008f20 <_dtoa_r+0x990>
 80089f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80089f8:	4640      	mov	r0, r8
 80089fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089fe:	4649      	mov	r1, r9
 8008a00:	f7f8 f874 	bl	8000aec <__aeabi_dcmplt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f040 8289 	bne.w	8008f1c <_dtoa_r+0x98c>
 8008a0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f2c0 814e 	blt.w	8008cb2 <_dtoa_r+0x722>
 8008a16:	f1bb 0f0e 	cmp.w	fp, #14
 8008a1a:	f300 814a 	bgt.w	8008cb2 <_dtoa_r+0x722>
 8008a1e:	4b6b      	ldr	r3, [pc, #428]	; (8008bcc <_dtoa_r+0x63c>)
 8008a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f280 80dc 	bge.w	8008be8 <_dtoa_r+0x658>
 8008a30:	9b04      	ldr	r3, [sp, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f300 80d8 	bgt.w	8008be8 <_dtoa_r+0x658>
 8008a38:	f040 826f 	bne.w	8008f1a <_dtoa_r+0x98a>
 8008a3c:	4b68      	ldr	r3, [pc, #416]	; (8008be0 <_dtoa_r+0x650>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f7 fde0 	bl	8000608 <__aeabi_dmul>
 8008a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a4c:	f7f8 f862 	bl	8000b14 <__aeabi_dcmpge>
 8008a50:	9e04      	ldr	r6, [sp, #16]
 8008a52:	4637      	mov	r7, r6
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 8245 	bne.w	8008ee4 <_dtoa_r+0x954>
 8008a5a:	9d00      	ldr	r5, [sp, #0]
 8008a5c:	2331      	movs	r3, #49	; 0x31
 8008a5e:	f805 3b01 	strb.w	r3, [r5], #1
 8008a62:	f10b 0b01 	add.w	fp, fp, #1
 8008a66:	e241      	b.n	8008eec <_dtoa_r+0x95c>
 8008a68:	07f2      	lsls	r2, r6, #31
 8008a6a:	d505      	bpl.n	8008a78 <_dtoa_r+0x4e8>
 8008a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a70:	f7f7 fdca 	bl	8000608 <__aeabi_dmul>
 8008a74:	3501      	adds	r5, #1
 8008a76:	2301      	movs	r3, #1
 8008a78:	1076      	asrs	r6, r6, #1
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	e773      	b.n	8008966 <_dtoa_r+0x3d6>
 8008a7e:	2502      	movs	r5, #2
 8008a80:	e775      	b.n	800896e <_dtoa_r+0x3de>
 8008a82:	9e04      	ldr	r6, [sp, #16]
 8008a84:	465f      	mov	r7, fp
 8008a86:	e792      	b.n	80089ae <_dtoa_r+0x41e>
 8008a88:	9900      	ldr	r1, [sp, #0]
 8008a8a:	4b50      	ldr	r3, [pc, #320]	; (8008bcc <_dtoa_r+0x63c>)
 8008a8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a90:	4431      	add	r1, r6
 8008a92:	9102      	str	r1, [sp, #8]
 8008a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a96:	eeb0 9a47 	vmov.f32	s18, s14
 8008a9a:	eef0 9a67 	vmov.f32	s19, s15
 8008a9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d044      	beq.n	8008b34 <_dtoa_r+0x5a4>
 8008aaa:	494e      	ldr	r1, [pc, #312]	; (8008be4 <_dtoa_r+0x654>)
 8008aac:	2000      	movs	r0, #0
 8008aae:	f7f7 fed5 	bl	800085c <__aeabi_ddiv>
 8008ab2:	ec53 2b19 	vmov	r2, r3, d9
 8008ab6:	f7f7 fbef 	bl	8000298 <__aeabi_dsub>
 8008aba:	9d00      	ldr	r5, [sp, #0]
 8008abc:	ec41 0b19 	vmov	d9, r0, r1
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f7f8 f850 	bl	8000b68 <__aeabi_d2iz>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	f7f7 fd33 	bl	8000534 <__aeabi_i2d>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f7 fbdf 	bl	8000298 <__aeabi_dsub>
 8008ada:	3630      	adds	r6, #48	; 0x30
 8008adc:	f805 6b01 	strb.w	r6, [r5], #1
 8008ae0:	ec53 2b19 	vmov	r2, r3, d9
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4689      	mov	r9, r1
 8008ae8:	f7f8 f800 	bl	8000aec <__aeabi_dcmplt>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d164      	bne.n	8008bba <_dtoa_r+0x62a>
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	4937      	ldr	r1, [pc, #220]	; (8008bd4 <_dtoa_r+0x644>)
 8008af6:	2000      	movs	r0, #0
 8008af8:	f7f7 fbce 	bl	8000298 <__aeabi_dsub>
 8008afc:	ec53 2b19 	vmov	r2, r3, d9
 8008b00:	f7f7 fff4 	bl	8000aec <__aeabi_dcmplt>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f040 80b6 	bne.w	8008c76 <_dtoa_r+0x6e6>
 8008b0a:	9b02      	ldr	r3, [sp, #8]
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	f43f af7c 	beq.w	8008a0a <_dtoa_r+0x47a>
 8008b12:	4b31      	ldr	r3, [pc, #196]	; (8008bd8 <_dtoa_r+0x648>)
 8008b14:	ec51 0b19 	vmov	r0, r1, d9
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7f7 fd75 	bl	8000608 <__aeabi_dmul>
 8008b1e:	4b2e      	ldr	r3, [pc, #184]	; (8008bd8 <_dtoa_r+0x648>)
 8008b20:	ec41 0b19 	vmov	d9, r0, r1
 8008b24:	2200      	movs	r2, #0
 8008b26:	4640      	mov	r0, r8
 8008b28:	4649      	mov	r1, r9
 8008b2a:	f7f7 fd6d 	bl	8000608 <__aeabi_dmul>
 8008b2e:	4680      	mov	r8, r0
 8008b30:	4689      	mov	r9, r1
 8008b32:	e7c5      	b.n	8008ac0 <_dtoa_r+0x530>
 8008b34:	ec51 0b17 	vmov	r0, r1, d7
 8008b38:	f7f7 fd66 	bl	8000608 <__aeabi_dmul>
 8008b3c:	9b02      	ldr	r3, [sp, #8]
 8008b3e:	9d00      	ldr	r5, [sp, #0]
 8008b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b42:	ec41 0b19 	vmov	d9, r0, r1
 8008b46:	4649      	mov	r1, r9
 8008b48:	4640      	mov	r0, r8
 8008b4a:	f7f8 f80d 	bl	8000b68 <__aeabi_d2iz>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	f7f7 fcf0 	bl	8000534 <__aeabi_i2d>
 8008b54:	3630      	adds	r6, #48	; 0x30
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	f7f7 fb9b 	bl	8000298 <__aeabi_dsub>
 8008b62:	f805 6b01 	strb.w	r6, [r5], #1
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	429d      	cmp	r5, r3
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4689      	mov	r9, r1
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	d124      	bne.n	8008bbe <_dtoa_r+0x62e>
 8008b74:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <_dtoa_r+0x654>)
 8008b76:	ec51 0b19 	vmov	r0, r1, d9
 8008b7a:	f7f7 fb8f 	bl	800029c <__adddf3>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 ffcf 	bl	8000b28 <__aeabi_dcmpgt>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d173      	bne.n	8008c76 <_dtoa_r+0x6e6>
 8008b8e:	ec53 2b19 	vmov	r2, r3, d9
 8008b92:	4914      	ldr	r1, [pc, #80]	; (8008be4 <_dtoa_r+0x654>)
 8008b94:	2000      	movs	r0, #0
 8008b96:	f7f7 fb7f 	bl	8000298 <__aeabi_dsub>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	f7f7 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f af2f 	beq.w	8008a0a <_dtoa_r+0x47a>
 8008bac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bae:	1e6b      	subs	r3, r5, #1
 8008bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bb6:	2b30      	cmp	r3, #48	; 0x30
 8008bb8:	d0f8      	beq.n	8008bac <_dtoa_r+0x61c>
 8008bba:	46bb      	mov	fp, r7
 8008bbc:	e04a      	b.n	8008c54 <_dtoa_r+0x6c4>
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <_dtoa_r+0x648>)
 8008bc0:	f7f7 fd22 	bl	8000608 <__aeabi_dmul>
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	4689      	mov	r9, r1
 8008bc8:	e7bd      	b.n	8008b46 <_dtoa_r+0x5b6>
 8008bca:	bf00      	nop
 8008bcc:	0800a708 	.word	0x0800a708
 8008bd0:	0800a6e0 	.word	0x0800a6e0
 8008bd4:	3ff00000 	.word	0x3ff00000
 8008bd8:	40240000 	.word	0x40240000
 8008bdc:	401c0000 	.word	0x401c0000
 8008be0:	40140000 	.word	0x40140000
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bec:	9d00      	ldr	r5, [sp, #0]
 8008bee:	4642      	mov	r2, r8
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fe31 	bl	800085c <__aeabi_ddiv>
 8008bfa:	f7f7 ffb5 	bl	8000b68 <__aeabi_d2iz>
 8008bfe:	9001      	str	r0, [sp, #4]
 8008c00:	f7f7 fc98 	bl	8000534 <__aeabi_i2d>
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	f7f7 fcfe 	bl	8000608 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fb40 	bl	8000298 <__aeabi_dsub>
 8008c18:	9e01      	ldr	r6, [sp, #4]
 8008c1a:	9f04      	ldr	r7, [sp, #16]
 8008c1c:	3630      	adds	r6, #48	; 0x30
 8008c1e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c22:	9e00      	ldr	r6, [sp, #0]
 8008c24:	1bae      	subs	r6, r5, r6
 8008c26:	42b7      	cmp	r7, r6
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	d134      	bne.n	8008c98 <_dtoa_r+0x708>
 8008c2e:	f7f7 fb35 	bl	800029c <__adddf3>
 8008c32:	4642      	mov	r2, r8
 8008c34:	464b      	mov	r3, r9
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	f7f7 ff75 	bl	8000b28 <__aeabi_dcmpgt>
 8008c3e:	b9c8      	cbnz	r0, 8008c74 <_dtoa_r+0x6e4>
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	4630      	mov	r0, r6
 8008c46:	4639      	mov	r1, r7
 8008c48:	f7f7 ff46 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c4c:	b110      	cbz	r0, 8008c54 <_dtoa_r+0x6c4>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	07db      	lsls	r3, r3, #31
 8008c52:	d40f      	bmi.n	8008c74 <_dtoa_r+0x6e4>
 8008c54:	4651      	mov	r1, sl
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 fbcc 	bl	80093f4 <_Bfree>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c60:	702b      	strb	r3, [r5, #0]
 8008c62:	f10b 0301 	add.w	r3, fp, #1
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f43f ace2 	beq.w	8008634 <_dtoa_r+0xa4>
 8008c70:	601d      	str	r5, [r3, #0]
 8008c72:	e4df      	b.n	8008634 <_dtoa_r+0xa4>
 8008c74:	465f      	mov	r7, fp
 8008c76:	462b      	mov	r3, r5
 8008c78:	461d      	mov	r5, r3
 8008c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c7e:	2a39      	cmp	r2, #57	; 0x39
 8008c80:	d106      	bne.n	8008c90 <_dtoa_r+0x700>
 8008c82:	9a00      	ldr	r2, [sp, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d1f7      	bne.n	8008c78 <_dtoa_r+0x6e8>
 8008c88:	9900      	ldr	r1, [sp, #0]
 8008c8a:	2230      	movs	r2, #48	; 0x30
 8008c8c:	3701      	adds	r7, #1
 8008c8e:	700a      	strb	r2, [r1, #0]
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	3201      	adds	r2, #1
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	e790      	b.n	8008bba <_dtoa_r+0x62a>
 8008c98:	4ba3      	ldr	r3, [pc, #652]	; (8008f28 <_dtoa_r+0x998>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f7f7 fcb4 	bl	8000608 <__aeabi_dmul>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	f7f7 ff16 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d09e      	beq.n	8008bee <_dtoa_r+0x65e>
 8008cb0:	e7d0      	b.n	8008c54 <_dtoa_r+0x6c4>
 8008cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	f000 80ca 	beq.w	8008e4e <_dtoa_r+0x8be>
 8008cba:	9a07      	ldr	r2, [sp, #28]
 8008cbc:	2a01      	cmp	r2, #1
 8008cbe:	f300 80ad 	bgt.w	8008e1c <_dtoa_r+0x88c>
 8008cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	f000 80a5 	beq.w	8008e14 <_dtoa_r+0x884>
 8008cca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cce:	9e08      	ldr	r6, [sp, #32]
 8008cd0:	9d05      	ldr	r5, [sp, #20]
 8008cd2:	9a05      	ldr	r2, [sp, #20]
 8008cd4:	441a      	add	r2, r3
 8008cd6:	9205      	str	r2, [sp, #20]
 8008cd8:	9a06      	ldr	r2, [sp, #24]
 8008cda:	2101      	movs	r1, #1
 8008cdc:	441a      	add	r2, r3
 8008cde:	4620      	mov	r0, r4
 8008ce0:	9206      	str	r2, [sp, #24]
 8008ce2:	f000 fc3d 	bl	8009560 <__i2b>
 8008ce6:	4607      	mov	r7, r0
 8008ce8:	b165      	cbz	r5, 8008d04 <_dtoa_r+0x774>
 8008cea:	9b06      	ldr	r3, [sp, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd09      	ble.n	8008d04 <_dtoa_r+0x774>
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	9a05      	ldr	r2, [sp, #20]
 8008cf4:	bfa8      	it	ge
 8008cf6:	462b      	movge	r3, r5
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	9205      	str	r2, [sp, #20]
 8008cfc:	9a06      	ldr	r2, [sp, #24]
 8008cfe:	1aed      	subs	r5, r5, r3
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	9306      	str	r3, [sp, #24]
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	b1f3      	cbz	r3, 8008d46 <_dtoa_r+0x7b6>
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80a3 	beq.w	8008e56 <_dtoa_r+0x8c6>
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	dd10      	ble.n	8008d36 <_dtoa_r+0x7a6>
 8008d14:	4639      	mov	r1, r7
 8008d16:	4632      	mov	r2, r6
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fce1 	bl	80096e0 <__pow5mult>
 8008d1e:	4652      	mov	r2, sl
 8008d20:	4601      	mov	r1, r0
 8008d22:	4607      	mov	r7, r0
 8008d24:	4620      	mov	r0, r4
 8008d26:	f000 fc31 	bl	800958c <__multiply>
 8008d2a:	4651      	mov	r1, sl
 8008d2c:	4680      	mov	r8, r0
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 fb60 	bl	80093f4 <_Bfree>
 8008d34:	46c2      	mov	sl, r8
 8008d36:	9b08      	ldr	r3, [sp, #32]
 8008d38:	1b9a      	subs	r2, r3, r6
 8008d3a:	d004      	beq.n	8008d46 <_dtoa_r+0x7b6>
 8008d3c:	4651      	mov	r1, sl
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fcce 	bl	80096e0 <__pow5mult>
 8008d44:	4682      	mov	sl, r0
 8008d46:	2101      	movs	r1, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fc09 	bl	8009560 <__i2b>
 8008d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	4606      	mov	r6, r0
 8008d54:	f340 8081 	ble.w	8008e5a <_dtoa_r+0x8ca>
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fcbf 	bl	80096e0 <__pow5mult>
 8008d62:	9b07      	ldr	r3, [sp, #28]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	4606      	mov	r6, r0
 8008d68:	dd7a      	ble.n	8008e60 <_dtoa_r+0x8d0>
 8008d6a:	f04f 0800 	mov.w	r8, #0
 8008d6e:	6933      	ldr	r3, [r6, #16]
 8008d70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d74:	6918      	ldr	r0, [r3, #16]
 8008d76:	f000 fba5 	bl	80094c4 <__hi0bits>
 8008d7a:	f1c0 0020 	rsb	r0, r0, #32
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	4418      	add	r0, r3
 8008d82:	f010 001f 	ands.w	r0, r0, #31
 8008d86:	f000 8094 	beq.w	8008eb2 <_dtoa_r+0x922>
 8008d8a:	f1c0 0320 	rsb	r3, r0, #32
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	f340 8085 	ble.w	8008e9e <_dtoa_r+0x90e>
 8008d94:	9b05      	ldr	r3, [sp, #20]
 8008d96:	f1c0 001c 	rsb	r0, r0, #28
 8008d9a:	4403      	add	r3, r0
 8008d9c:	9305      	str	r3, [sp, #20]
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	4403      	add	r3, r0
 8008da2:	4405      	add	r5, r0
 8008da4:	9306      	str	r3, [sp, #24]
 8008da6:	9b05      	ldr	r3, [sp, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dd05      	ble.n	8008db8 <_dtoa_r+0x828>
 8008dac:	4651      	mov	r1, sl
 8008dae:	461a      	mov	r2, r3
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 fcef 	bl	8009794 <__lshift>
 8008db6:	4682      	mov	sl, r0
 8008db8:	9b06      	ldr	r3, [sp, #24]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dd05      	ble.n	8008dca <_dtoa_r+0x83a>
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fce6 	bl	8009794 <__lshift>
 8008dc8:	4606      	mov	r6, r0
 8008dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d072      	beq.n	8008eb6 <_dtoa_r+0x926>
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	f000 fd4a 	bl	800986c <__mcmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	da6c      	bge.n	8008eb6 <_dtoa_r+0x926>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4651      	mov	r1, sl
 8008de0:	220a      	movs	r2, #10
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 fb28 	bl	8009438 <__multadd>
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dee:	4682      	mov	sl, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 81b0 	beq.w	8009156 <_dtoa_r+0xbc6>
 8008df6:	2300      	movs	r3, #0
 8008df8:	4639      	mov	r1, r7
 8008dfa:	220a      	movs	r2, #10
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fb1b 	bl	8009438 <__multadd>
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	4607      	mov	r7, r0
 8008e08:	f300 8096 	bgt.w	8008f38 <_dtoa_r+0x9a8>
 8008e0c:	9b07      	ldr	r3, [sp, #28]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	dc59      	bgt.n	8008ec6 <_dtoa_r+0x936>
 8008e12:	e091      	b.n	8008f38 <_dtoa_r+0x9a8>
 8008e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e1a:	e758      	b.n	8008cce <_dtoa_r+0x73e>
 8008e1c:	9b04      	ldr	r3, [sp, #16]
 8008e1e:	1e5e      	subs	r6, r3, #1
 8008e20:	9b08      	ldr	r3, [sp, #32]
 8008e22:	42b3      	cmp	r3, r6
 8008e24:	bfbf      	itttt	lt
 8008e26:	9b08      	ldrlt	r3, [sp, #32]
 8008e28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e2a:	9608      	strlt	r6, [sp, #32]
 8008e2c:	1af3      	sublt	r3, r6, r3
 8008e2e:	bfb4      	ite	lt
 8008e30:	18d2      	addlt	r2, r2, r3
 8008e32:	1b9e      	subge	r6, r3, r6
 8008e34:	9b04      	ldr	r3, [sp, #16]
 8008e36:	bfbc      	itt	lt
 8008e38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e3a:	2600      	movlt	r6, #0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	bfb7      	itett	lt
 8008e40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e48:	1a9d      	sublt	r5, r3, r2
 8008e4a:	2300      	movlt	r3, #0
 8008e4c:	e741      	b.n	8008cd2 <_dtoa_r+0x742>
 8008e4e:	9e08      	ldr	r6, [sp, #32]
 8008e50:	9d05      	ldr	r5, [sp, #20]
 8008e52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e54:	e748      	b.n	8008ce8 <_dtoa_r+0x758>
 8008e56:	9a08      	ldr	r2, [sp, #32]
 8008e58:	e770      	b.n	8008d3c <_dtoa_r+0x7ac>
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	dc19      	bgt.n	8008e94 <_dtoa_r+0x904>
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	b9bb      	cbnz	r3, 8008e94 <_dtoa_r+0x904>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e6a:	b99b      	cbnz	r3, 8008e94 <_dtoa_r+0x904>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e72:	0d1b      	lsrs	r3, r3, #20
 8008e74:	051b      	lsls	r3, r3, #20
 8008e76:	b183      	cbz	r3, 8008e9a <_dtoa_r+0x90a>
 8008e78:	9b05      	ldr	r3, [sp, #20]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	9305      	str	r3, [sp, #20]
 8008e7e:	9b06      	ldr	r3, [sp, #24]
 8008e80:	3301      	adds	r3, #1
 8008e82:	9306      	str	r3, [sp, #24]
 8008e84:	f04f 0801 	mov.w	r8, #1
 8008e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f47f af6f 	bne.w	8008d6e <_dtoa_r+0x7de>
 8008e90:	2001      	movs	r0, #1
 8008e92:	e774      	b.n	8008d7e <_dtoa_r+0x7ee>
 8008e94:	f04f 0800 	mov.w	r8, #0
 8008e98:	e7f6      	b.n	8008e88 <_dtoa_r+0x8f8>
 8008e9a:	4698      	mov	r8, r3
 8008e9c:	e7f4      	b.n	8008e88 <_dtoa_r+0x8f8>
 8008e9e:	d082      	beq.n	8008da6 <_dtoa_r+0x816>
 8008ea0:	9a05      	ldr	r2, [sp, #20]
 8008ea2:	331c      	adds	r3, #28
 8008ea4:	441a      	add	r2, r3
 8008ea6:	9205      	str	r2, [sp, #20]
 8008ea8:	9a06      	ldr	r2, [sp, #24]
 8008eaa:	441a      	add	r2, r3
 8008eac:	441d      	add	r5, r3
 8008eae:	9206      	str	r2, [sp, #24]
 8008eb0:	e779      	b.n	8008da6 <_dtoa_r+0x816>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	e7f4      	b.n	8008ea0 <_dtoa_r+0x910>
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dc37      	bgt.n	8008f2c <_dtoa_r+0x99c>
 8008ebc:	9b07      	ldr	r3, [sp, #28]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	dd34      	ble.n	8008f2c <_dtoa_r+0x99c>
 8008ec2:	9b04      	ldr	r3, [sp, #16]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	b963      	cbnz	r3, 8008ee4 <_dtoa_r+0x954>
 8008eca:	4631      	mov	r1, r6
 8008ecc:	2205      	movs	r2, #5
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 fab2 	bl	8009438 <__multadd>
 8008ed4:	4601      	mov	r1, r0
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	4650      	mov	r0, sl
 8008eda:	f000 fcc7 	bl	800986c <__mcmp>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f73f adbb 	bgt.w	8008a5a <_dtoa_r+0x4ca>
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee6:	9d00      	ldr	r5, [sp, #0]
 8008ee8:	ea6f 0b03 	mvn.w	fp, r3
 8008eec:	f04f 0800 	mov.w	r8, #0
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 fa7e 	bl	80093f4 <_Bfree>
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	f43f aeab 	beq.w	8008c54 <_dtoa_r+0x6c4>
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	d005      	beq.n	8008f10 <_dtoa_r+0x980>
 8008f04:	45b8      	cmp	r8, r7
 8008f06:	d003      	beq.n	8008f10 <_dtoa_r+0x980>
 8008f08:	4641      	mov	r1, r8
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 fa72 	bl	80093f4 <_Bfree>
 8008f10:	4639      	mov	r1, r7
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fa6e 	bl	80093f4 <_Bfree>
 8008f18:	e69c      	b.n	8008c54 <_dtoa_r+0x6c4>
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	4637      	mov	r7, r6
 8008f1e:	e7e1      	b.n	8008ee4 <_dtoa_r+0x954>
 8008f20:	46bb      	mov	fp, r7
 8008f22:	4637      	mov	r7, r6
 8008f24:	e599      	b.n	8008a5a <_dtoa_r+0x4ca>
 8008f26:	bf00      	nop
 8008f28:	40240000 	.word	0x40240000
 8008f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 80c8 	beq.w	80090c4 <_dtoa_r+0xb34>
 8008f34:	9b04      	ldr	r3, [sp, #16]
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	dd05      	ble.n	8008f48 <_dtoa_r+0x9b8>
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	462a      	mov	r2, r5
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fc27 	bl	8009794 <__lshift>
 8008f46:	4607      	mov	r7, r0
 8008f48:	f1b8 0f00 	cmp.w	r8, #0
 8008f4c:	d05b      	beq.n	8009006 <_dtoa_r+0xa76>
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fa0f 	bl	8009374 <_Balloc>
 8008f56:	4605      	mov	r5, r0
 8008f58:	b928      	cbnz	r0, 8008f66 <_dtoa_r+0x9d6>
 8008f5a:	4b83      	ldr	r3, [pc, #524]	; (8009168 <_dtoa_r+0xbd8>)
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f62:	f7ff bb2e 	b.w	80085c2 <_dtoa_r+0x32>
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	3202      	adds	r2, #2
 8008f6a:	0092      	lsls	r2, r2, #2
 8008f6c:	f107 010c 	add.w	r1, r7, #12
 8008f70:	300c      	adds	r0, #12
 8008f72:	f000 ffab 	bl	8009ecc <memcpy>
 8008f76:	2201      	movs	r2, #1
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fc0a 	bl	8009794 <__lshift>
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	9308      	str	r3, [sp, #32]
 8008f8e:	9b02      	ldr	r3, [sp, #8]
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	46b8      	mov	r8, r7
 8008f96:	9306      	str	r3, [sp, #24]
 8008f98:	4607      	mov	r7, r0
 8008f9a:	9b04      	ldr	r3, [sp, #16]
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	9301      	str	r3, [sp, #4]
 8008fa4:	f7ff fa69 	bl	800847a <quorem>
 8008fa8:	4641      	mov	r1, r8
 8008faa:	9002      	str	r0, [sp, #8]
 8008fac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	f000 fc5b 	bl	800986c <__mcmp>
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fc71 	bl	80098a4 <__mdiff>
 8008fc2:	68c2      	ldr	r2, [r0, #12]
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	bb02      	cbnz	r2, 800900a <_dtoa_r+0xa7a>
 8008fc8:	4601      	mov	r1, r0
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f000 fc4e 	bl	800986c <__mcmp>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd8:	f000 fa0c 	bl	80093f4 <_Bfree>
 8008fdc:	9b07      	ldr	r3, [sp, #28]
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	9d04      	ldr	r5, [sp, #16]
 8008fe2:	ea43 0102 	orr.w	r1, r3, r2
 8008fe6:	9b06      	ldr	r3, [sp, #24]
 8008fe8:	4319      	orrs	r1, r3
 8008fea:	d110      	bne.n	800900e <_dtoa_r+0xa7e>
 8008fec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ff0:	d029      	beq.n	8009046 <_dtoa_r+0xab6>
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dd02      	ble.n	8008ffe <_dtoa_r+0xa6e>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	f883 9000 	strb.w	r9, [r3]
 8009004:	e774      	b.n	8008ef0 <_dtoa_r+0x960>
 8009006:	4638      	mov	r0, r7
 8009008:	e7ba      	b.n	8008f80 <_dtoa_r+0x9f0>
 800900a:	2201      	movs	r2, #1
 800900c:	e7e1      	b.n	8008fd2 <_dtoa_r+0xa42>
 800900e:	9b05      	ldr	r3, [sp, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	db04      	blt.n	800901e <_dtoa_r+0xa8e>
 8009014:	9907      	ldr	r1, [sp, #28]
 8009016:	430b      	orrs	r3, r1
 8009018:	9906      	ldr	r1, [sp, #24]
 800901a:	430b      	orrs	r3, r1
 800901c:	d120      	bne.n	8009060 <_dtoa_r+0xad0>
 800901e:	2a00      	cmp	r2, #0
 8009020:	dded      	ble.n	8008ffe <_dtoa_r+0xa6e>
 8009022:	4651      	mov	r1, sl
 8009024:	2201      	movs	r2, #1
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fbb4 	bl	8009794 <__lshift>
 800902c:	4631      	mov	r1, r6
 800902e:	4682      	mov	sl, r0
 8009030:	f000 fc1c 	bl	800986c <__mcmp>
 8009034:	2800      	cmp	r0, #0
 8009036:	dc03      	bgt.n	8009040 <_dtoa_r+0xab0>
 8009038:	d1e1      	bne.n	8008ffe <_dtoa_r+0xa6e>
 800903a:	f019 0f01 	tst.w	r9, #1
 800903e:	d0de      	beq.n	8008ffe <_dtoa_r+0xa6e>
 8009040:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009044:	d1d8      	bne.n	8008ff8 <_dtoa_r+0xa68>
 8009046:	9a01      	ldr	r2, [sp, #4]
 8009048:	2339      	movs	r3, #57	; 0x39
 800904a:	7013      	strb	r3, [r2, #0]
 800904c:	462b      	mov	r3, r5
 800904e:	461d      	mov	r5, r3
 8009050:	3b01      	subs	r3, #1
 8009052:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009056:	2a39      	cmp	r2, #57	; 0x39
 8009058:	d06c      	beq.n	8009134 <_dtoa_r+0xba4>
 800905a:	3201      	adds	r2, #1
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e747      	b.n	8008ef0 <_dtoa_r+0x960>
 8009060:	2a00      	cmp	r2, #0
 8009062:	dd07      	ble.n	8009074 <_dtoa_r+0xae4>
 8009064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009068:	d0ed      	beq.n	8009046 <_dtoa_r+0xab6>
 800906a:	9a01      	ldr	r2, [sp, #4]
 800906c:	f109 0301 	add.w	r3, r9, #1
 8009070:	7013      	strb	r3, [r2, #0]
 8009072:	e73d      	b.n	8008ef0 <_dtoa_r+0x960>
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	9a08      	ldr	r2, [sp, #32]
 8009078:	f803 9c01 	strb.w	r9, [r3, #-1]
 800907c:	4293      	cmp	r3, r2
 800907e:	d043      	beq.n	8009108 <_dtoa_r+0xb78>
 8009080:	4651      	mov	r1, sl
 8009082:	2300      	movs	r3, #0
 8009084:	220a      	movs	r2, #10
 8009086:	4620      	mov	r0, r4
 8009088:	f000 f9d6 	bl	8009438 <__multadd>
 800908c:	45b8      	cmp	r8, r7
 800908e:	4682      	mov	sl, r0
 8009090:	f04f 0300 	mov.w	r3, #0
 8009094:	f04f 020a 	mov.w	r2, #10
 8009098:	4641      	mov	r1, r8
 800909a:	4620      	mov	r0, r4
 800909c:	d107      	bne.n	80090ae <_dtoa_r+0xb1e>
 800909e:	f000 f9cb 	bl	8009438 <__multadd>
 80090a2:	4680      	mov	r8, r0
 80090a4:	4607      	mov	r7, r0
 80090a6:	9b04      	ldr	r3, [sp, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	e775      	b.n	8008f9a <_dtoa_r+0xa0a>
 80090ae:	f000 f9c3 	bl	8009438 <__multadd>
 80090b2:	4639      	mov	r1, r7
 80090b4:	4680      	mov	r8, r0
 80090b6:	2300      	movs	r3, #0
 80090b8:	220a      	movs	r2, #10
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 f9bc 	bl	8009438 <__multadd>
 80090c0:	4607      	mov	r7, r0
 80090c2:	e7f0      	b.n	80090a6 <_dtoa_r+0xb16>
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	9d00      	ldr	r5, [sp, #0]
 80090ca:	4631      	mov	r1, r6
 80090cc:	4650      	mov	r0, sl
 80090ce:	f7ff f9d4 	bl	800847a <quorem>
 80090d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	f805 9b01 	strb.w	r9, [r5], #1
 80090dc:	1aea      	subs	r2, r5, r3
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	4293      	cmp	r3, r2
 80090e2:	dd07      	ble.n	80090f4 <_dtoa_r+0xb64>
 80090e4:	4651      	mov	r1, sl
 80090e6:	2300      	movs	r3, #0
 80090e8:	220a      	movs	r2, #10
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f9a4 	bl	8009438 <__multadd>
 80090f0:	4682      	mov	sl, r0
 80090f2:	e7ea      	b.n	80090ca <_dtoa_r+0xb3a>
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfc8      	it	gt
 80090fa:	461d      	movgt	r5, r3
 80090fc:	9b00      	ldr	r3, [sp, #0]
 80090fe:	bfd8      	it	le
 8009100:	2501      	movle	r5, #1
 8009102:	441d      	add	r5, r3
 8009104:	f04f 0800 	mov.w	r8, #0
 8009108:	4651      	mov	r1, sl
 800910a:	2201      	movs	r2, #1
 800910c:	4620      	mov	r0, r4
 800910e:	f000 fb41 	bl	8009794 <__lshift>
 8009112:	4631      	mov	r1, r6
 8009114:	4682      	mov	sl, r0
 8009116:	f000 fba9 	bl	800986c <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	dc96      	bgt.n	800904c <_dtoa_r+0xabc>
 800911e:	d102      	bne.n	8009126 <_dtoa_r+0xb96>
 8009120:	f019 0f01 	tst.w	r9, #1
 8009124:	d192      	bne.n	800904c <_dtoa_r+0xabc>
 8009126:	462b      	mov	r3, r5
 8009128:	461d      	mov	r5, r3
 800912a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800912e:	2a30      	cmp	r2, #48	; 0x30
 8009130:	d0fa      	beq.n	8009128 <_dtoa_r+0xb98>
 8009132:	e6dd      	b.n	8008ef0 <_dtoa_r+0x960>
 8009134:	9a00      	ldr	r2, [sp, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d189      	bne.n	800904e <_dtoa_r+0xabe>
 800913a:	f10b 0b01 	add.w	fp, fp, #1
 800913e:	2331      	movs	r3, #49	; 0x31
 8009140:	e796      	b.n	8009070 <_dtoa_r+0xae0>
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <_dtoa_r+0xbdc>)
 8009144:	f7ff ba99 	b.w	800867a <_dtoa_r+0xea>
 8009148:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800914a:	2b00      	cmp	r3, #0
 800914c:	f47f aa6d 	bne.w	800862a <_dtoa_r+0x9a>
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <_dtoa_r+0xbe0>)
 8009152:	f7ff ba92 	b.w	800867a <_dtoa_r+0xea>
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	dcb5      	bgt.n	80090c8 <_dtoa_r+0xb38>
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	2b02      	cmp	r3, #2
 8009160:	f73f aeb1 	bgt.w	8008ec6 <_dtoa_r+0x936>
 8009164:	e7b0      	b.n	80090c8 <_dtoa_r+0xb38>
 8009166:	bf00      	nop
 8009168:	0800a670 	.word	0x0800a670
 800916c:	0800a5d0 	.word	0x0800a5d0
 8009170:	0800a5f4 	.word	0x0800a5f4

08009174 <_free_r>:
 8009174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009176:	2900      	cmp	r1, #0
 8009178:	d044      	beq.n	8009204 <_free_r+0x90>
 800917a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917e:	9001      	str	r0, [sp, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f1a1 0404 	sub.w	r4, r1, #4
 8009186:	bfb8      	it	lt
 8009188:	18e4      	addlt	r4, r4, r3
 800918a:	f000 f8e7 	bl	800935c <__malloc_lock>
 800918e:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <_free_r+0x94>)
 8009190:	9801      	ldr	r0, [sp, #4]
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	b933      	cbnz	r3, 80091a4 <_free_r+0x30>
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	6014      	str	r4, [r2, #0]
 800919a:	b003      	add	sp, #12
 800919c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091a0:	f000 b8e2 	b.w	8009368 <__malloc_unlock>
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d908      	bls.n	80091ba <_free_r+0x46>
 80091a8:	6825      	ldr	r5, [r4, #0]
 80091aa:	1961      	adds	r1, r4, r5
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf01      	itttt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	1949      	addeq	r1, r1, r5
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	e7ed      	b.n	8009196 <_free_r+0x22>
 80091ba:	461a      	mov	r2, r3
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	b10b      	cbz	r3, 80091c4 <_free_r+0x50>
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d9fa      	bls.n	80091ba <_free_r+0x46>
 80091c4:	6811      	ldr	r1, [r2, #0]
 80091c6:	1855      	adds	r5, r2, r1
 80091c8:	42a5      	cmp	r5, r4
 80091ca:	d10b      	bne.n	80091e4 <_free_r+0x70>
 80091cc:	6824      	ldr	r4, [r4, #0]
 80091ce:	4421      	add	r1, r4
 80091d0:	1854      	adds	r4, r2, r1
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	d1e0      	bne.n	800919a <_free_r+0x26>
 80091d8:	681c      	ldr	r4, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	6053      	str	r3, [r2, #4]
 80091de:	440c      	add	r4, r1
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	e7da      	b.n	800919a <_free_r+0x26>
 80091e4:	d902      	bls.n	80091ec <_free_r+0x78>
 80091e6:	230c      	movs	r3, #12
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	e7d6      	b.n	800919a <_free_r+0x26>
 80091ec:	6825      	ldr	r5, [r4, #0]
 80091ee:	1961      	adds	r1, r4, r5
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf04      	itt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	bf04      	itt	eq
 80091fc:	1949      	addeq	r1, r1, r5
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	6054      	str	r4, [r2, #4]
 8009202:	e7ca      	b.n	800919a <_free_r+0x26>
 8009204:	b003      	add	sp, #12
 8009206:	bd30      	pop	{r4, r5, pc}
 8009208:	20000740 	.word	0x20000740

0800920c <malloc>:
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <malloc+0xc>)
 800920e:	4601      	mov	r1, r0
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f000 b823 	b.w	800925c <_malloc_r>
 8009216:	bf00      	nop
 8009218:	20000078 	.word	0x20000078

0800921c <sbrk_aligned>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4e0e      	ldr	r6, [pc, #56]	; (8009258 <sbrk_aligned+0x3c>)
 8009220:	460c      	mov	r4, r1
 8009222:	6831      	ldr	r1, [r6, #0]
 8009224:	4605      	mov	r5, r0
 8009226:	b911      	cbnz	r1, 800922e <sbrk_aligned+0x12>
 8009228:	f000 fe40 	bl	8009eac <_sbrk_r>
 800922c:	6030      	str	r0, [r6, #0]
 800922e:	4621      	mov	r1, r4
 8009230:	4628      	mov	r0, r5
 8009232:	f000 fe3b 	bl	8009eac <_sbrk_r>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d00a      	beq.n	8009250 <sbrk_aligned+0x34>
 800923a:	1cc4      	adds	r4, r0, #3
 800923c:	f024 0403 	bic.w	r4, r4, #3
 8009240:	42a0      	cmp	r0, r4
 8009242:	d007      	beq.n	8009254 <sbrk_aligned+0x38>
 8009244:	1a21      	subs	r1, r4, r0
 8009246:	4628      	mov	r0, r5
 8009248:	f000 fe30 	bl	8009eac <_sbrk_r>
 800924c:	3001      	adds	r0, #1
 800924e:	d101      	bne.n	8009254 <sbrk_aligned+0x38>
 8009250:	f04f 34ff 	mov.w	r4, #4294967295
 8009254:	4620      	mov	r0, r4
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	20000744 	.word	0x20000744

0800925c <_malloc_r>:
 800925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	1ccd      	adds	r5, r1, #3
 8009262:	f025 0503 	bic.w	r5, r5, #3
 8009266:	3508      	adds	r5, #8
 8009268:	2d0c      	cmp	r5, #12
 800926a:	bf38      	it	cc
 800926c:	250c      	movcc	r5, #12
 800926e:	2d00      	cmp	r5, #0
 8009270:	4607      	mov	r7, r0
 8009272:	db01      	blt.n	8009278 <_malloc_r+0x1c>
 8009274:	42a9      	cmp	r1, r5
 8009276:	d905      	bls.n	8009284 <_malloc_r+0x28>
 8009278:	230c      	movs	r3, #12
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	2600      	movs	r6, #0
 800927e:	4630      	mov	r0, r6
 8009280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009284:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009358 <_malloc_r+0xfc>
 8009288:	f000 f868 	bl	800935c <__malloc_lock>
 800928c:	f8d8 3000 	ldr.w	r3, [r8]
 8009290:	461c      	mov	r4, r3
 8009292:	bb5c      	cbnz	r4, 80092ec <_malloc_r+0x90>
 8009294:	4629      	mov	r1, r5
 8009296:	4638      	mov	r0, r7
 8009298:	f7ff ffc0 	bl	800921c <sbrk_aligned>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	4604      	mov	r4, r0
 80092a0:	d155      	bne.n	800934e <_malloc_r+0xf2>
 80092a2:	f8d8 4000 	ldr.w	r4, [r8]
 80092a6:	4626      	mov	r6, r4
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	d145      	bne.n	8009338 <_malloc_r+0xdc>
 80092ac:	2c00      	cmp	r4, #0
 80092ae:	d048      	beq.n	8009342 <_malloc_r+0xe6>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	4631      	mov	r1, r6
 80092b4:	4638      	mov	r0, r7
 80092b6:	eb04 0903 	add.w	r9, r4, r3
 80092ba:	f000 fdf7 	bl	8009eac <_sbrk_r>
 80092be:	4581      	cmp	r9, r0
 80092c0:	d13f      	bne.n	8009342 <_malloc_r+0xe6>
 80092c2:	6821      	ldr	r1, [r4, #0]
 80092c4:	1a6d      	subs	r5, r5, r1
 80092c6:	4629      	mov	r1, r5
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff ffa7 	bl	800921c <sbrk_aligned>
 80092ce:	3001      	adds	r0, #1
 80092d0:	d037      	beq.n	8009342 <_malloc_r+0xe6>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	442b      	add	r3, r5
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	f8d8 3000 	ldr.w	r3, [r8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d038      	beq.n	8009352 <_malloc_r+0xf6>
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	42a2      	cmp	r2, r4
 80092e4:	d12b      	bne.n	800933e <_malloc_r+0xe2>
 80092e6:	2200      	movs	r2, #0
 80092e8:	605a      	str	r2, [r3, #4]
 80092ea:	e00f      	b.n	800930c <_malloc_r+0xb0>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	1b52      	subs	r2, r2, r5
 80092f0:	d41f      	bmi.n	8009332 <_malloc_r+0xd6>
 80092f2:	2a0b      	cmp	r2, #11
 80092f4:	d917      	bls.n	8009326 <_malloc_r+0xca>
 80092f6:	1961      	adds	r1, r4, r5
 80092f8:	42a3      	cmp	r3, r4
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	bf18      	it	ne
 80092fe:	6059      	strne	r1, [r3, #4]
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	bf08      	it	eq
 8009304:	f8c8 1000 	streq.w	r1, [r8]
 8009308:	5162      	str	r2, [r4, r5]
 800930a:	604b      	str	r3, [r1, #4]
 800930c:	4638      	mov	r0, r7
 800930e:	f104 060b 	add.w	r6, r4, #11
 8009312:	f000 f829 	bl	8009368 <__malloc_unlock>
 8009316:	f026 0607 	bic.w	r6, r6, #7
 800931a:	1d23      	adds	r3, r4, #4
 800931c:	1af2      	subs	r2, r6, r3
 800931e:	d0ae      	beq.n	800927e <_malloc_r+0x22>
 8009320:	1b9b      	subs	r3, r3, r6
 8009322:	50a3      	str	r3, [r4, r2]
 8009324:	e7ab      	b.n	800927e <_malloc_r+0x22>
 8009326:	42a3      	cmp	r3, r4
 8009328:	6862      	ldr	r2, [r4, #4]
 800932a:	d1dd      	bne.n	80092e8 <_malloc_r+0x8c>
 800932c:	f8c8 2000 	str.w	r2, [r8]
 8009330:	e7ec      	b.n	800930c <_malloc_r+0xb0>
 8009332:	4623      	mov	r3, r4
 8009334:	6864      	ldr	r4, [r4, #4]
 8009336:	e7ac      	b.n	8009292 <_malloc_r+0x36>
 8009338:	4634      	mov	r4, r6
 800933a:	6876      	ldr	r6, [r6, #4]
 800933c:	e7b4      	b.n	80092a8 <_malloc_r+0x4c>
 800933e:	4613      	mov	r3, r2
 8009340:	e7cc      	b.n	80092dc <_malloc_r+0x80>
 8009342:	230c      	movs	r3, #12
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	4638      	mov	r0, r7
 8009348:	f000 f80e 	bl	8009368 <__malloc_unlock>
 800934c:	e797      	b.n	800927e <_malloc_r+0x22>
 800934e:	6025      	str	r5, [r4, #0]
 8009350:	e7dc      	b.n	800930c <_malloc_r+0xb0>
 8009352:	605b      	str	r3, [r3, #4]
 8009354:	deff      	udf	#255	; 0xff
 8009356:	bf00      	nop
 8009358:	20000740 	.word	0x20000740

0800935c <__malloc_lock>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__malloc_lock+0x8>)
 800935e:	f7ff b88a 	b.w	8008476 <__retarget_lock_acquire_recursive>
 8009362:	bf00      	nop
 8009364:	2000073c 	.word	0x2000073c

08009368 <__malloc_unlock>:
 8009368:	4801      	ldr	r0, [pc, #4]	; (8009370 <__malloc_unlock+0x8>)
 800936a:	f7ff b885 	b.w	8008478 <__retarget_lock_release_recursive>
 800936e:	bf00      	nop
 8009370:	2000073c 	.word	0x2000073c

08009374 <_Balloc>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	69c6      	ldr	r6, [r0, #28]
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	b976      	cbnz	r6, 800939c <_Balloc+0x28>
 800937e:	2010      	movs	r0, #16
 8009380:	f7ff ff44 	bl	800920c <malloc>
 8009384:	4602      	mov	r2, r0
 8009386:	61e0      	str	r0, [r4, #28]
 8009388:	b920      	cbnz	r0, 8009394 <_Balloc+0x20>
 800938a:	4b18      	ldr	r3, [pc, #96]	; (80093ec <_Balloc+0x78>)
 800938c:	4818      	ldr	r0, [pc, #96]	; (80093f0 <_Balloc+0x7c>)
 800938e:	216b      	movs	r1, #107	; 0x6b
 8009390:	f000 fdaa 	bl	8009ee8 <__assert_func>
 8009394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009398:	6006      	str	r6, [r0, #0]
 800939a:	60c6      	str	r6, [r0, #12]
 800939c:	69e6      	ldr	r6, [r4, #28]
 800939e:	68f3      	ldr	r3, [r6, #12]
 80093a0:	b183      	cbz	r3, 80093c4 <_Balloc+0x50>
 80093a2:	69e3      	ldr	r3, [r4, #28]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093aa:	b9b8      	cbnz	r0, 80093dc <_Balloc+0x68>
 80093ac:	2101      	movs	r1, #1
 80093ae:	fa01 f605 	lsl.w	r6, r1, r5
 80093b2:	1d72      	adds	r2, r6, #5
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fdb4 	bl	8009f24 <_calloc_r>
 80093bc:	b160      	cbz	r0, 80093d8 <_Balloc+0x64>
 80093be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c2:	e00e      	b.n	80093e2 <_Balloc+0x6e>
 80093c4:	2221      	movs	r2, #33	; 0x21
 80093c6:	2104      	movs	r1, #4
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 fdab 	bl	8009f24 <_calloc_r>
 80093ce:	69e3      	ldr	r3, [r4, #28]
 80093d0:	60f0      	str	r0, [r6, #12]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e4      	bne.n	80093a2 <_Balloc+0x2e>
 80093d8:	2000      	movs	r0, #0
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	6802      	ldr	r2, [r0, #0]
 80093de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e2:	2300      	movs	r3, #0
 80093e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093e8:	e7f7      	b.n	80093da <_Balloc+0x66>
 80093ea:	bf00      	nop
 80093ec:	0800a601 	.word	0x0800a601
 80093f0:	0800a681 	.word	0x0800a681

080093f4 <_Bfree>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	69c6      	ldr	r6, [r0, #28]
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	b976      	cbnz	r6, 800941c <_Bfree+0x28>
 80093fe:	2010      	movs	r0, #16
 8009400:	f7ff ff04 	bl	800920c <malloc>
 8009404:	4602      	mov	r2, r0
 8009406:	61e8      	str	r0, [r5, #28]
 8009408:	b920      	cbnz	r0, 8009414 <_Bfree+0x20>
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <_Bfree+0x3c>)
 800940c:	4809      	ldr	r0, [pc, #36]	; (8009434 <_Bfree+0x40>)
 800940e:	218f      	movs	r1, #143	; 0x8f
 8009410:	f000 fd6a 	bl	8009ee8 <__assert_func>
 8009414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009418:	6006      	str	r6, [r0, #0]
 800941a:	60c6      	str	r6, [r0, #12]
 800941c:	b13c      	cbz	r4, 800942e <_Bfree+0x3a>
 800941e:	69eb      	ldr	r3, [r5, #28]
 8009420:	6862      	ldr	r2, [r4, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009428:	6021      	str	r1, [r4, #0]
 800942a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	0800a601 	.word	0x0800a601
 8009434:	0800a681 	.word	0x0800a681

08009438 <__multadd>:
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	690d      	ldr	r5, [r1, #16]
 800943e:	4607      	mov	r7, r0
 8009440:	460c      	mov	r4, r1
 8009442:	461e      	mov	r6, r3
 8009444:	f101 0c14 	add.w	ip, r1, #20
 8009448:	2000      	movs	r0, #0
 800944a:	f8dc 3000 	ldr.w	r3, [ip]
 800944e:	b299      	uxth	r1, r3
 8009450:	fb02 6101 	mla	r1, r2, r1, r6
 8009454:	0c1e      	lsrs	r6, r3, #16
 8009456:	0c0b      	lsrs	r3, r1, #16
 8009458:	fb02 3306 	mla	r3, r2, r6, r3
 800945c:	b289      	uxth	r1, r1
 800945e:	3001      	adds	r0, #1
 8009460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009464:	4285      	cmp	r5, r0
 8009466:	f84c 1b04 	str.w	r1, [ip], #4
 800946a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800946e:	dcec      	bgt.n	800944a <__multadd+0x12>
 8009470:	b30e      	cbz	r6, 80094b6 <__multadd+0x7e>
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc19      	bgt.n	80094ac <__multadd+0x74>
 8009478:	6861      	ldr	r1, [r4, #4]
 800947a:	4638      	mov	r0, r7
 800947c:	3101      	adds	r1, #1
 800947e:	f7ff ff79 	bl	8009374 <_Balloc>
 8009482:	4680      	mov	r8, r0
 8009484:	b928      	cbnz	r0, 8009492 <__multadd+0x5a>
 8009486:	4602      	mov	r2, r0
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <__multadd+0x84>)
 800948a:	480d      	ldr	r0, [pc, #52]	; (80094c0 <__multadd+0x88>)
 800948c:	21ba      	movs	r1, #186	; 0xba
 800948e:	f000 fd2b 	bl	8009ee8 <__assert_func>
 8009492:	6922      	ldr	r2, [r4, #16]
 8009494:	3202      	adds	r2, #2
 8009496:	f104 010c 	add.w	r1, r4, #12
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	300c      	adds	r0, #12
 800949e:	f000 fd15 	bl	8009ecc <memcpy>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ffa5 	bl	80093f4 <_Bfree>
 80094aa:	4644      	mov	r4, r8
 80094ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094b0:	3501      	adds	r5, #1
 80094b2:	615e      	str	r6, [r3, #20]
 80094b4:	6125      	str	r5, [r4, #16]
 80094b6:	4620      	mov	r0, r4
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	0800a670 	.word	0x0800a670
 80094c0:	0800a681 	.word	0x0800a681

080094c4 <__hi0bits>:
 80094c4:	0c03      	lsrs	r3, r0, #16
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	b9d3      	cbnz	r3, 8009500 <__hi0bits+0x3c>
 80094ca:	0400      	lsls	r0, r0, #16
 80094cc:	2310      	movs	r3, #16
 80094ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094d2:	bf04      	itt	eq
 80094d4:	0200      	lsleq	r0, r0, #8
 80094d6:	3308      	addeq	r3, #8
 80094d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094dc:	bf04      	itt	eq
 80094de:	0100      	lsleq	r0, r0, #4
 80094e0:	3304      	addeq	r3, #4
 80094e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094e6:	bf04      	itt	eq
 80094e8:	0080      	lsleq	r0, r0, #2
 80094ea:	3302      	addeq	r3, #2
 80094ec:	2800      	cmp	r0, #0
 80094ee:	db05      	blt.n	80094fc <__hi0bits+0x38>
 80094f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094f4:	f103 0301 	add.w	r3, r3, #1
 80094f8:	bf08      	it	eq
 80094fa:	2320      	moveq	r3, #32
 80094fc:	4618      	mov	r0, r3
 80094fe:	4770      	bx	lr
 8009500:	2300      	movs	r3, #0
 8009502:	e7e4      	b.n	80094ce <__hi0bits+0xa>

08009504 <__lo0bits>:
 8009504:	6803      	ldr	r3, [r0, #0]
 8009506:	f013 0207 	ands.w	r2, r3, #7
 800950a:	d00c      	beq.n	8009526 <__lo0bits+0x22>
 800950c:	07d9      	lsls	r1, r3, #31
 800950e:	d422      	bmi.n	8009556 <__lo0bits+0x52>
 8009510:	079a      	lsls	r2, r3, #30
 8009512:	bf49      	itett	mi
 8009514:	085b      	lsrmi	r3, r3, #1
 8009516:	089b      	lsrpl	r3, r3, #2
 8009518:	6003      	strmi	r3, [r0, #0]
 800951a:	2201      	movmi	r2, #1
 800951c:	bf5c      	itt	pl
 800951e:	6003      	strpl	r3, [r0, #0]
 8009520:	2202      	movpl	r2, #2
 8009522:	4610      	mov	r0, r2
 8009524:	4770      	bx	lr
 8009526:	b299      	uxth	r1, r3
 8009528:	b909      	cbnz	r1, 800952e <__lo0bits+0x2a>
 800952a:	0c1b      	lsrs	r3, r3, #16
 800952c:	2210      	movs	r2, #16
 800952e:	b2d9      	uxtb	r1, r3
 8009530:	b909      	cbnz	r1, 8009536 <__lo0bits+0x32>
 8009532:	3208      	adds	r2, #8
 8009534:	0a1b      	lsrs	r3, r3, #8
 8009536:	0719      	lsls	r1, r3, #28
 8009538:	bf04      	itt	eq
 800953a:	091b      	lsreq	r3, r3, #4
 800953c:	3204      	addeq	r2, #4
 800953e:	0799      	lsls	r1, r3, #30
 8009540:	bf04      	itt	eq
 8009542:	089b      	lsreq	r3, r3, #2
 8009544:	3202      	addeq	r2, #2
 8009546:	07d9      	lsls	r1, r3, #31
 8009548:	d403      	bmi.n	8009552 <__lo0bits+0x4e>
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	f102 0201 	add.w	r2, r2, #1
 8009550:	d003      	beq.n	800955a <__lo0bits+0x56>
 8009552:	6003      	str	r3, [r0, #0]
 8009554:	e7e5      	b.n	8009522 <__lo0bits+0x1e>
 8009556:	2200      	movs	r2, #0
 8009558:	e7e3      	b.n	8009522 <__lo0bits+0x1e>
 800955a:	2220      	movs	r2, #32
 800955c:	e7e1      	b.n	8009522 <__lo0bits+0x1e>
	...

08009560 <__i2b>:
 8009560:	b510      	push	{r4, lr}
 8009562:	460c      	mov	r4, r1
 8009564:	2101      	movs	r1, #1
 8009566:	f7ff ff05 	bl	8009374 <_Balloc>
 800956a:	4602      	mov	r2, r0
 800956c:	b928      	cbnz	r0, 800957a <__i2b+0x1a>
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <__i2b+0x24>)
 8009570:	4805      	ldr	r0, [pc, #20]	; (8009588 <__i2b+0x28>)
 8009572:	f240 1145 	movw	r1, #325	; 0x145
 8009576:	f000 fcb7 	bl	8009ee8 <__assert_func>
 800957a:	2301      	movs	r3, #1
 800957c:	6144      	str	r4, [r0, #20]
 800957e:	6103      	str	r3, [r0, #16]
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop
 8009584:	0800a670 	.word	0x0800a670
 8009588:	0800a681 	.word	0x0800a681

0800958c <__multiply>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	4691      	mov	r9, r2
 8009592:	690a      	ldr	r2, [r1, #16]
 8009594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009598:	429a      	cmp	r2, r3
 800959a:	bfb8      	it	lt
 800959c:	460b      	movlt	r3, r1
 800959e:	460c      	mov	r4, r1
 80095a0:	bfbc      	itt	lt
 80095a2:	464c      	movlt	r4, r9
 80095a4:	4699      	movlt	r9, r3
 80095a6:	6927      	ldr	r7, [r4, #16]
 80095a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	6861      	ldr	r1, [r4, #4]
 80095b0:	eb07 060a 	add.w	r6, r7, sl
 80095b4:	42b3      	cmp	r3, r6
 80095b6:	b085      	sub	sp, #20
 80095b8:	bfb8      	it	lt
 80095ba:	3101      	addlt	r1, #1
 80095bc:	f7ff feda 	bl	8009374 <_Balloc>
 80095c0:	b930      	cbnz	r0, 80095d0 <__multiply+0x44>
 80095c2:	4602      	mov	r2, r0
 80095c4:	4b44      	ldr	r3, [pc, #272]	; (80096d8 <__multiply+0x14c>)
 80095c6:	4845      	ldr	r0, [pc, #276]	; (80096dc <__multiply+0x150>)
 80095c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80095cc:	f000 fc8c 	bl	8009ee8 <__assert_func>
 80095d0:	f100 0514 	add.w	r5, r0, #20
 80095d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095d8:	462b      	mov	r3, r5
 80095da:	2200      	movs	r2, #0
 80095dc:	4543      	cmp	r3, r8
 80095de:	d321      	bcc.n	8009624 <__multiply+0x98>
 80095e0:	f104 0314 	add.w	r3, r4, #20
 80095e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095e8:	f109 0314 	add.w	r3, r9, #20
 80095ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095f0:	9202      	str	r2, [sp, #8]
 80095f2:	1b3a      	subs	r2, r7, r4
 80095f4:	3a15      	subs	r2, #21
 80095f6:	f022 0203 	bic.w	r2, r2, #3
 80095fa:	3204      	adds	r2, #4
 80095fc:	f104 0115 	add.w	r1, r4, #21
 8009600:	428f      	cmp	r7, r1
 8009602:	bf38      	it	cc
 8009604:	2204      	movcc	r2, #4
 8009606:	9201      	str	r2, [sp, #4]
 8009608:	9a02      	ldr	r2, [sp, #8]
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	429a      	cmp	r2, r3
 800960e:	d80c      	bhi.n	800962a <__multiply+0x9e>
 8009610:	2e00      	cmp	r6, #0
 8009612:	dd03      	ble.n	800961c <__multiply+0x90>
 8009614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009618:	2b00      	cmp	r3, #0
 800961a:	d05b      	beq.n	80096d4 <__multiply+0x148>
 800961c:	6106      	str	r6, [r0, #16]
 800961e:	b005      	add	sp, #20
 8009620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	f843 2b04 	str.w	r2, [r3], #4
 8009628:	e7d8      	b.n	80095dc <__multiply+0x50>
 800962a:	f8b3 a000 	ldrh.w	sl, [r3]
 800962e:	f1ba 0f00 	cmp.w	sl, #0
 8009632:	d024      	beq.n	800967e <__multiply+0xf2>
 8009634:	f104 0e14 	add.w	lr, r4, #20
 8009638:	46a9      	mov	r9, r5
 800963a:	f04f 0c00 	mov.w	ip, #0
 800963e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009642:	f8d9 1000 	ldr.w	r1, [r9]
 8009646:	fa1f fb82 	uxth.w	fp, r2
 800964a:	b289      	uxth	r1, r1
 800964c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009654:	f8d9 2000 	ldr.w	r2, [r9]
 8009658:	4461      	add	r1, ip
 800965a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800965e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009666:	b289      	uxth	r1, r1
 8009668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800966c:	4577      	cmp	r7, lr
 800966e:	f849 1b04 	str.w	r1, [r9], #4
 8009672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009676:	d8e2      	bhi.n	800963e <__multiply+0xb2>
 8009678:	9a01      	ldr	r2, [sp, #4]
 800967a:	f845 c002 	str.w	ip, [r5, r2]
 800967e:	9a03      	ldr	r2, [sp, #12]
 8009680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009684:	3304      	adds	r3, #4
 8009686:	f1b9 0f00 	cmp.w	r9, #0
 800968a:	d021      	beq.n	80096d0 <__multiply+0x144>
 800968c:	6829      	ldr	r1, [r5, #0]
 800968e:	f104 0c14 	add.w	ip, r4, #20
 8009692:	46ae      	mov	lr, r5
 8009694:	f04f 0a00 	mov.w	sl, #0
 8009698:	f8bc b000 	ldrh.w	fp, [ip]
 800969c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096a0:	fb09 220b 	mla	r2, r9, fp, r2
 80096a4:	4452      	add	r2, sl
 80096a6:	b289      	uxth	r1, r1
 80096a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096ac:	f84e 1b04 	str.w	r1, [lr], #4
 80096b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80096b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096b8:	f8be 1000 	ldrh.w	r1, [lr]
 80096bc:	fb09 110a 	mla	r1, r9, sl, r1
 80096c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80096c4:	4567      	cmp	r7, ip
 80096c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096ca:	d8e5      	bhi.n	8009698 <__multiply+0x10c>
 80096cc:	9a01      	ldr	r2, [sp, #4]
 80096ce:	50a9      	str	r1, [r5, r2]
 80096d0:	3504      	adds	r5, #4
 80096d2:	e799      	b.n	8009608 <__multiply+0x7c>
 80096d4:	3e01      	subs	r6, #1
 80096d6:	e79b      	b.n	8009610 <__multiply+0x84>
 80096d8:	0800a670 	.word	0x0800a670
 80096dc:	0800a681 	.word	0x0800a681

080096e0 <__pow5mult>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	4615      	mov	r5, r2
 80096e6:	f012 0203 	ands.w	r2, r2, #3
 80096ea:	4606      	mov	r6, r0
 80096ec:	460f      	mov	r7, r1
 80096ee:	d007      	beq.n	8009700 <__pow5mult+0x20>
 80096f0:	4c25      	ldr	r4, [pc, #148]	; (8009788 <__pow5mult+0xa8>)
 80096f2:	3a01      	subs	r2, #1
 80096f4:	2300      	movs	r3, #0
 80096f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096fa:	f7ff fe9d 	bl	8009438 <__multadd>
 80096fe:	4607      	mov	r7, r0
 8009700:	10ad      	asrs	r5, r5, #2
 8009702:	d03d      	beq.n	8009780 <__pow5mult+0xa0>
 8009704:	69f4      	ldr	r4, [r6, #28]
 8009706:	b97c      	cbnz	r4, 8009728 <__pow5mult+0x48>
 8009708:	2010      	movs	r0, #16
 800970a:	f7ff fd7f 	bl	800920c <malloc>
 800970e:	4602      	mov	r2, r0
 8009710:	61f0      	str	r0, [r6, #28]
 8009712:	b928      	cbnz	r0, 8009720 <__pow5mult+0x40>
 8009714:	4b1d      	ldr	r3, [pc, #116]	; (800978c <__pow5mult+0xac>)
 8009716:	481e      	ldr	r0, [pc, #120]	; (8009790 <__pow5mult+0xb0>)
 8009718:	f240 11b3 	movw	r1, #435	; 0x1b3
 800971c:	f000 fbe4 	bl	8009ee8 <__assert_func>
 8009720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009724:	6004      	str	r4, [r0, #0]
 8009726:	60c4      	str	r4, [r0, #12]
 8009728:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800972c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009730:	b94c      	cbnz	r4, 8009746 <__pow5mult+0x66>
 8009732:	f240 2171 	movw	r1, #625	; 0x271
 8009736:	4630      	mov	r0, r6
 8009738:	f7ff ff12 	bl	8009560 <__i2b>
 800973c:	2300      	movs	r3, #0
 800973e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009742:	4604      	mov	r4, r0
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	07eb      	lsls	r3, r5, #31
 800974c:	d50a      	bpl.n	8009764 <__pow5mult+0x84>
 800974e:	4639      	mov	r1, r7
 8009750:	4622      	mov	r2, r4
 8009752:	4630      	mov	r0, r6
 8009754:	f7ff ff1a 	bl	800958c <__multiply>
 8009758:	4639      	mov	r1, r7
 800975a:	4680      	mov	r8, r0
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff fe49 	bl	80093f4 <_Bfree>
 8009762:	4647      	mov	r7, r8
 8009764:	106d      	asrs	r5, r5, #1
 8009766:	d00b      	beq.n	8009780 <__pow5mult+0xa0>
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	b938      	cbnz	r0, 800977c <__pow5mult+0x9c>
 800976c:	4622      	mov	r2, r4
 800976e:	4621      	mov	r1, r4
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff ff0b 	bl	800958c <__multiply>
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	f8c0 9000 	str.w	r9, [r0]
 800977c:	4604      	mov	r4, r0
 800977e:	e7e4      	b.n	800974a <__pow5mult+0x6a>
 8009780:	4638      	mov	r0, r7
 8009782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009786:	bf00      	nop
 8009788:	0800a7d0 	.word	0x0800a7d0
 800978c:	0800a601 	.word	0x0800a601
 8009790:	0800a681 	.word	0x0800a681

08009794 <__lshift>:
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	460c      	mov	r4, r1
 800979a:	6849      	ldr	r1, [r1, #4]
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	4607      	mov	r7, r0
 80097a6:	4691      	mov	r9, r2
 80097a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097ac:	f108 0601 	add.w	r6, r8, #1
 80097b0:	42b3      	cmp	r3, r6
 80097b2:	db0b      	blt.n	80097cc <__lshift+0x38>
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff fddd 	bl	8009374 <_Balloc>
 80097ba:	4605      	mov	r5, r0
 80097bc:	b948      	cbnz	r0, 80097d2 <__lshift+0x3e>
 80097be:	4602      	mov	r2, r0
 80097c0:	4b28      	ldr	r3, [pc, #160]	; (8009864 <__lshift+0xd0>)
 80097c2:	4829      	ldr	r0, [pc, #164]	; (8009868 <__lshift+0xd4>)
 80097c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80097c8:	f000 fb8e 	bl	8009ee8 <__assert_func>
 80097cc:	3101      	adds	r1, #1
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	e7ee      	b.n	80097b0 <__lshift+0x1c>
 80097d2:	2300      	movs	r3, #0
 80097d4:	f100 0114 	add.w	r1, r0, #20
 80097d8:	f100 0210 	add.w	r2, r0, #16
 80097dc:	4618      	mov	r0, r3
 80097de:	4553      	cmp	r3, sl
 80097e0:	db33      	blt.n	800984a <__lshift+0xb6>
 80097e2:	6920      	ldr	r0, [r4, #16]
 80097e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e8:	f104 0314 	add.w	r3, r4, #20
 80097ec:	f019 091f 	ands.w	r9, r9, #31
 80097f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f8:	d02b      	beq.n	8009852 <__lshift+0xbe>
 80097fa:	f1c9 0e20 	rsb	lr, r9, #32
 80097fe:	468a      	mov	sl, r1
 8009800:	2200      	movs	r2, #0
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	fa00 f009 	lsl.w	r0, r0, r9
 8009808:	4310      	orrs	r0, r2
 800980a:	f84a 0b04 	str.w	r0, [sl], #4
 800980e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009812:	459c      	cmp	ip, r3
 8009814:	fa22 f20e 	lsr.w	r2, r2, lr
 8009818:	d8f3      	bhi.n	8009802 <__lshift+0x6e>
 800981a:	ebac 0304 	sub.w	r3, ip, r4
 800981e:	3b15      	subs	r3, #21
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	3304      	adds	r3, #4
 8009826:	f104 0015 	add.w	r0, r4, #21
 800982a:	4584      	cmp	ip, r0
 800982c:	bf38      	it	cc
 800982e:	2304      	movcc	r3, #4
 8009830:	50ca      	str	r2, [r1, r3]
 8009832:	b10a      	cbz	r2, 8009838 <__lshift+0xa4>
 8009834:	f108 0602 	add.w	r6, r8, #2
 8009838:	3e01      	subs	r6, #1
 800983a:	4638      	mov	r0, r7
 800983c:	612e      	str	r6, [r5, #16]
 800983e:	4621      	mov	r1, r4
 8009840:	f7ff fdd8 	bl	80093f4 <_Bfree>
 8009844:	4628      	mov	r0, r5
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	f842 0f04 	str.w	r0, [r2, #4]!
 800984e:	3301      	adds	r3, #1
 8009850:	e7c5      	b.n	80097de <__lshift+0x4a>
 8009852:	3904      	subs	r1, #4
 8009854:	f853 2b04 	ldr.w	r2, [r3], #4
 8009858:	f841 2f04 	str.w	r2, [r1, #4]!
 800985c:	459c      	cmp	ip, r3
 800985e:	d8f9      	bhi.n	8009854 <__lshift+0xc0>
 8009860:	e7ea      	b.n	8009838 <__lshift+0xa4>
 8009862:	bf00      	nop
 8009864:	0800a670 	.word	0x0800a670
 8009868:	0800a681 	.word	0x0800a681

0800986c <__mcmp>:
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	6902      	ldr	r2, [r0, #16]
 8009870:	690c      	ldr	r4, [r1, #16]
 8009872:	1b12      	subs	r2, r2, r4
 8009874:	d10e      	bne.n	8009894 <__mcmp+0x28>
 8009876:	f100 0314 	add.w	r3, r0, #20
 800987a:	3114      	adds	r1, #20
 800987c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800988c:	42a5      	cmp	r5, r4
 800988e:	d003      	beq.n	8009898 <__mcmp+0x2c>
 8009890:	d305      	bcc.n	800989e <__mcmp+0x32>
 8009892:	2201      	movs	r2, #1
 8009894:	4610      	mov	r0, r2
 8009896:	bd30      	pop	{r4, r5, pc}
 8009898:	4283      	cmp	r3, r0
 800989a:	d3f3      	bcc.n	8009884 <__mcmp+0x18>
 800989c:	e7fa      	b.n	8009894 <__mcmp+0x28>
 800989e:	f04f 32ff 	mov.w	r2, #4294967295
 80098a2:	e7f7      	b.n	8009894 <__mcmp+0x28>

080098a4 <__mdiff>:
 80098a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	4606      	mov	r6, r0
 80098ac:	4611      	mov	r1, r2
 80098ae:	4620      	mov	r0, r4
 80098b0:	4690      	mov	r8, r2
 80098b2:	f7ff ffdb 	bl	800986c <__mcmp>
 80098b6:	1e05      	subs	r5, r0, #0
 80098b8:	d110      	bne.n	80098dc <__mdiff+0x38>
 80098ba:	4629      	mov	r1, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff fd59 	bl	8009374 <_Balloc>
 80098c2:	b930      	cbnz	r0, 80098d2 <__mdiff+0x2e>
 80098c4:	4b3a      	ldr	r3, [pc, #232]	; (80099b0 <__mdiff+0x10c>)
 80098c6:	4602      	mov	r2, r0
 80098c8:	f240 2137 	movw	r1, #567	; 0x237
 80098cc:	4839      	ldr	r0, [pc, #228]	; (80099b4 <__mdiff+0x110>)
 80098ce:	f000 fb0b 	bl	8009ee8 <__assert_func>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	bfa4      	itt	ge
 80098de:	4643      	movge	r3, r8
 80098e0:	46a0      	movge	r8, r4
 80098e2:	4630      	mov	r0, r6
 80098e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098e8:	bfa6      	itte	ge
 80098ea:	461c      	movge	r4, r3
 80098ec:	2500      	movge	r5, #0
 80098ee:	2501      	movlt	r5, #1
 80098f0:	f7ff fd40 	bl	8009374 <_Balloc>
 80098f4:	b920      	cbnz	r0, 8009900 <__mdiff+0x5c>
 80098f6:	4b2e      	ldr	r3, [pc, #184]	; (80099b0 <__mdiff+0x10c>)
 80098f8:	4602      	mov	r2, r0
 80098fa:	f240 2145 	movw	r1, #581	; 0x245
 80098fe:	e7e5      	b.n	80098cc <__mdiff+0x28>
 8009900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009904:	6926      	ldr	r6, [r4, #16]
 8009906:	60c5      	str	r5, [r0, #12]
 8009908:	f104 0914 	add.w	r9, r4, #20
 800990c:	f108 0514 	add.w	r5, r8, #20
 8009910:	f100 0e14 	add.w	lr, r0, #20
 8009914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800991c:	f108 0210 	add.w	r2, r8, #16
 8009920:	46f2      	mov	sl, lr
 8009922:	2100      	movs	r1, #0
 8009924:	f859 3b04 	ldr.w	r3, [r9], #4
 8009928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800992c:	fa11 f88b 	uxtah	r8, r1, fp
 8009930:	b299      	uxth	r1, r3
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	eba8 0801 	sub.w	r8, r8, r1
 8009938:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800993c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009940:	fa1f f888 	uxth.w	r8, r8
 8009944:	1419      	asrs	r1, r3, #16
 8009946:	454e      	cmp	r6, r9
 8009948:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800994c:	f84a 3b04 	str.w	r3, [sl], #4
 8009950:	d8e8      	bhi.n	8009924 <__mdiff+0x80>
 8009952:	1b33      	subs	r3, r6, r4
 8009954:	3b15      	subs	r3, #21
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	3304      	adds	r3, #4
 800995c:	3415      	adds	r4, #21
 800995e:	42a6      	cmp	r6, r4
 8009960:	bf38      	it	cc
 8009962:	2304      	movcc	r3, #4
 8009964:	441d      	add	r5, r3
 8009966:	4473      	add	r3, lr
 8009968:	469e      	mov	lr, r3
 800996a:	462e      	mov	r6, r5
 800996c:	4566      	cmp	r6, ip
 800996e:	d30e      	bcc.n	800998e <__mdiff+0xea>
 8009970:	f10c 0203 	add.w	r2, ip, #3
 8009974:	1b52      	subs	r2, r2, r5
 8009976:	f022 0203 	bic.w	r2, r2, #3
 800997a:	3d03      	subs	r5, #3
 800997c:	45ac      	cmp	ip, r5
 800997e:	bf38      	it	cc
 8009980:	2200      	movcc	r2, #0
 8009982:	4413      	add	r3, r2
 8009984:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009988:	b17a      	cbz	r2, 80099aa <__mdiff+0x106>
 800998a:	6107      	str	r7, [r0, #16]
 800998c:	e7a4      	b.n	80098d8 <__mdiff+0x34>
 800998e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009992:	fa11 f288 	uxtah	r2, r1, r8
 8009996:	1414      	asrs	r4, r2, #16
 8009998:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800999c:	b292      	uxth	r2, r2
 800999e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099a2:	f84e 2b04 	str.w	r2, [lr], #4
 80099a6:	1421      	asrs	r1, r4, #16
 80099a8:	e7e0      	b.n	800996c <__mdiff+0xc8>
 80099aa:	3f01      	subs	r7, #1
 80099ac:	e7ea      	b.n	8009984 <__mdiff+0xe0>
 80099ae:	bf00      	nop
 80099b0:	0800a670 	.word	0x0800a670
 80099b4:	0800a681 	.word	0x0800a681

080099b8 <__d2b>:
 80099b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	460f      	mov	r7, r1
 80099be:	2101      	movs	r1, #1
 80099c0:	ec59 8b10 	vmov	r8, r9, d0
 80099c4:	4616      	mov	r6, r2
 80099c6:	f7ff fcd5 	bl	8009374 <_Balloc>
 80099ca:	4604      	mov	r4, r0
 80099cc:	b930      	cbnz	r0, 80099dc <__d2b+0x24>
 80099ce:	4602      	mov	r2, r0
 80099d0:	4b24      	ldr	r3, [pc, #144]	; (8009a64 <__d2b+0xac>)
 80099d2:	4825      	ldr	r0, [pc, #148]	; (8009a68 <__d2b+0xb0>)
 80099d4:	f240 310f 	movw	r1, #783	; 0x30f
 80099d8:	f000 fa86 	bl	8009ee8 <__assert_func>
 80099dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099e4:	bb2d      	cbnz	r5, 8009a32 <__d2b+0x7a>
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	f1b8 0300 	subs.w	r3, r8, #0
 80099ec:	d026      	beq.n	8009a3c <__d2b+0x84>
 80099ee:	4668      	mov	r0, sp
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	f7ff fd87 	bl	8009504 <__lo0bits>
 80099f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099fa:	b1e8      	cbz	r0, 8009a38 <__d2b+0x80>
 80099fc:	f1c0 0320 	rsb	r3, r0, #32
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	430b      	orrs	r3, r1
 8009a06:	40c2      	lsrs	r2, r0
 8009a08:	6163      	str	r3, [r4, #20]
 8009a0a:	9201      	str	r2, [sp, #4]
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	61a3      	str	r3, [r4, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bf14      	ite	ne
 8009a14:	2202      	movne	r2, #2
 8009a16:	2201      	moveq	r2, #1
 8009a18:	6122      	str	r2, [r4, #16]
 8009a1a:	b1bd      	cbz	r5, 8009a4c <__d2b+0x94>
 8009a1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a20:	4405      	add	r5, r0
 8009a22:	603d      	str	r5, [r7, #0]
 8009a24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a28:	6030      	str	r0, [r6, #0]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	b003      	add	sp, #12
 8009a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a36:	e7d6      	b.n	80099e6 <__d2b+0x2e>
 8009a38:	6161      	str	r1, [r4, #20]
 8009a3a:	e7e7      	b.n	8009a0c <__d2b+0x54>
 8009a3c:	a801      	add	r0, sp, #4
 8009a3e:	f7ff fd61 	bl	8009504 <__lo0bits>
 8009a42:	9b01      	ldr	r3, [sp, #4]
 8009a44:	6163      	str	r3, [r4, #20]
 8009a46:	3020      	adds	r0, #32
 8009a48:	2201      	movs	r2, #1
 8009a4a:	e7e5      	b.n	8009a18 <__d2b+0x60>
 8009a4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a54:	6038      	str	r0, [r7, #0]
 8009a56:	6918      	ldr	r0, [r3, #16]
 8009a58:	f7ff fd34 	bl	80094c4 <__hi0bits>
 8009a5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a60:	e7e2      	b.n	8009a28 <__d2b+0x70>
 8009a62:	bf00      	nop
 8009a64:	0800a670 	.word	0x0800a670
 8009a68:	0800a681 	.word	0x0800a681

08009a6c <__ssputs_r>:
 8009a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	688e      	ldr	r6, [r1, #8]
 8009a72:	461f      	mov	r7, r3
 8009a74:	42be      	cmp	r6, r7
 8009a76:	680b      	ldr	r3, [r1, #0]
 8009a78:	4682      	mov	sl, r0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	4690      	mov	r8, r2
 8009a7e:	d82c      	bhi.n	8009ada <__ssputs_r+0x6e>
 8009a80:	898a      	ldrh	r2, [r1, #12]
 8009a82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a86:	d026      	beq.n	8009ad6 <__ssputs_r+0x6a>
 8009a88:	6965      	ldr	r5, [r4, #20]
 8009a8a:	6909      	ldr	r1, [r1, #16]
 8009a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a90:	eba3 0901 	sub.w	r9, r3, r1
 8009a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a98:	1c7b      	adds	r3, r7, #1
 8009a9a:	444b      	add	r3, r9
 8009a9c:	106d      	asrs	r5, r5, #1
 8009a9e:	429d      	cmp	r5, r3
 8009aa0:	bf38      	it	cc
 8009aa2:	461d      	movcc	r5, r3
 8009aa4:	0553      	lsls	r3, r2, #21
 8009aa6:	d527      	bpl.n	8009af8 <__ssputs_r+0x8c>
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7ff fbd7 	bl	800925c <_malloc_r>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	b360      	cbz	r0, 8009b0c <__ssputs_r+0xa0>
 8009ab2:	6921      	ldr	r1, [r4, #16]
 8009ab4:	464a      	mov	r2, r9
 8009ab6:	f000 fa09 	bl	8009ecc <memcpy>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac4:	81a3      	strh	r3, [r4, #12]
 8009ac6:	6126      	str	r6, [r4, #16]
 8009ac8:	6165      	str	r5, [r4, #20]
 8009aca:	444e      	add	r6, r9
 8009acc:	eba5 0509 	sub.w	r5, r5, r9
 8009ad0:	6026      	str	r6, [r4, #0]
 8009ad2:	60a5      	str	r5, [r4, #8]
 8009ad4:	463e      	mov	r6, r7
 8009ad6:	42be      	cmp	r6, r7
 8009ad8:	d900      	bls.n	8009adc <__ssputs_r+0x70>
 8009ada:	463e      	mov	r6, r7
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	4632      	mov	r2, r6
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	f000 f9c9 	bl	8009e78 <memmove>
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	1b9b      	subs	r3, r3, r6
 8009aea:	60a3      	str	r3, [r4, #8]
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	4433      	add	r3, r6
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	2000      	movs	r0, #0
 8009af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af8:	462a      	mov	r2, r5
 8009afa:	f000 fa3b 	bl	8009f74 <_realloc_r>
 8009afe:	4606      	mov	r6, r0
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d1e0      	bne.n	8009ac6 <__ssputs_r+0x5a>
 8009b04:	6921      	ldr	r1, [r4, #16]
 8009b06:	4650      	mov	r0, sl
 8009b08:	f7ff fb34 	bl	8009174 <_free_r>
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	f8ca 3000 	str.w	r3, [sl]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	e7e9      	b.n	8009af4 <__ssputs_r+0x88>

08009b20 <_svfiprintf_r>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	4698      	mov	r8, r3
 8009b26:	898b      	ldrh	r3, [r1, #12]
 8009b28:	061b      	lsls	r3, r3, #24
 8009b2a:	b09d      	sub	sp, #116	; 0x74
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	460d      	mov	r5, r1
 8009b30:	4614      	mov	r4, r2
 8009b32:	d50e      	bpl.n	8009b52 <_svfiprintf_r+0x32>
 8009b34:	690b      	ldr	r3, [r1, #16]
 8009b36:	b963      	cbnz	r3, 8009b52 <_svfiprintf_r+0x32>
 8009b38:	2140      	movs	r1, #64	; 0x40
 8009b3a:	f7ff fb8f 	bl	800925c <_malloc_r>
 8009b3e:	6028      	str	r0, [r5, #0]
 8009b40:	6128      	str	r0, [r5, #16]
 8009b42:	b920      	cbnz	r0, 8009b4e <_svfiprintf_r+0x2e>
 8009b44:	230c      	movs	r3, #12
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	e0d0      	b.n	8009cf0 <_svfiprintf_r+0x1d0>
 8009b4e:	2340      	movs	r3, #64	; 0x40
 8009b50:	616b      	str	r3, [r5, #20]
 8009b52:	2300      	movs	r3, #0
 8009b54:	9309      	str	r3, [sp, #36]	; 0x24
 8009b56:	2320      	movs	r3, #32
 8009b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b60:	2330      	movs	r3, #48	; 0x30
 8009b62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d08 <_svfiprintf_r+0x1e8>
 8009b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b6a:	f04f 0901 	mov.w	r9, #1
 8009b6e:	4623      	mov	r3, r4
 8009b70:	469a      	mov	sl, r3
 8009b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b76:	b10a      	cbz	r2, 8009b7c <_svfiprintf_r+0x5c>
 8009b78:	2a25      	cmp	r2, #37	; 0x25
 8009b7a:	d1f9      	bne.n	8009b70 <_svfiprintf_r+0x50>
 8009b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b80:	d00b      	beq.n	8009b9a <_svfiprintf_r+0x7a>
 8009b82:	465b      	mov	r3, fp
 8009b84:	4622      	mov	r2, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7ff ff6f 	bl	8009a6c <__ssputs_r>
 8009b8e:	3001      	adds	r0, #1
 8009b90:	f000 80a9 	beq.w	8009ce6 <_svfiprintf_r+0x1c6>
 8009b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b96:	445a      	add	r2, fp
 8009b98:	9209      	str	r2, [sp, #36]	; 0x24
 8009b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80a1 	beq.w	8009ce6 <_svfiprintf_r+0x1c6>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8009baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bae:	f10a 0a01 	add.w	sl, sl, #1
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	9307      	str	r3, [sp, #28]
 8009bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bba:	931a      	str	r3, [sp, #104]	; 0x68
 8009bbc:	4654      	mov	r4, sl
 8009bbe:	2205      	movs	r2, #5
 8009bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc4:	4850      	ldr	r0, [pc, #320]	; (8009d08 <_svfiprintf_r+0x1e8>)
 8009bc6:	f7f6 fb0b 	bl	80001e0 <memchr>
 8009bca:	9a04      	ldr	r2, [sp, #16]
 8009bcc:	b9d8      	cbnz	r0, 8009c06 <_svfiprintf_r+0xe6>
 8009bce:	06d0      	lsls	r0, r2, #27
 8009bd0:	bf44      	itt	mi
 8009bd2:	2320      	movmi	r3, #32
 8009bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd8:	0711      	lsls	r1, r2, #28
 8009bda:	bf44      	itt	mi
 8009bdc:	232b      	movmi	r3, #43	; 0x2b
 8009bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009be2:	f89a 3000 	ldrb.w	r3, [sl]
 8009be6:	2b2a      	cmp	r3, #42	; 0x2a
 8009be8:	d015      	beq.n	8009c16 <_svfiprintf_r+0xf6>
 8009bea:	9a07      	ldr	r2, [sp, #28]
 8009bec:	4654      	mov	r4, sl
 8009bee:	2000      	movs	r0, #0
 8009bf0:	f04f 0c0a 	mov.w	ip, #10
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bfa:	3b30      	subs	r3, #48	; 0x30
 8009bfc:	2b09      	cmp	r3, #9
 8009bfe:	d94d      	bls.n	8009c9c <_svfiprintf_r+0x17c>
 8009c00:	b1b0      	cbz	r0, 8009c30 <_svfiprintf_r+0x110>
 8009c02:	9207      	str	r2, [sp, #28]
 8009c04:	e014      	b.n	8009c30 <_svfiprintf_r+0x110>
 8009c06:	eba0 0308 	sub.w	r3, r0, r8
 8009c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	46a2      	mov	sl, r4
 8009c14:	e7d2      	b.n	8009bbc <_svfiprintf_r+0x9c>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	1d19      	adds	r1, r3, #4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	9103      	str	r1, [sp, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bfbb      	ittet	lt
 8009c22:	425b      	neglt	r3, r3
 8009c24:	f042 0202 	orrlt.w	r2, r2, #2
 8009c28:	9307      	strge	r3, [sp, #28]
 8009c2a:	9307      	strlt	r3, [sp, #28]
 8009c2c:	bfb8      	it	lt
 8009c2e:	9204      	strlt	r2, [sp, #16]
 8009c30:	7823      	ldrb	r3, [r4, #0]
 8009c32:	2b2e      	cmp	r3, #46	; 0x2e
 8009c34:	d10c      	bne.n	8009c50 <_svfiprintf_r+0x130>
 8009c36:	7863      	ldrb	r3, [r4, #1]
 8009c38:	2b2a      	cmp	r3, #42	; 0x2a
 8009c3a:	d134      	bne.n	8009ca6 <_svfiprintf_r+0x186>
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	9203      	str	r2, [sp, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bfb8      	it	lt
 8009c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c4c:	3402      	adds	r4, #2
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009d18 <_svfiprintf_r+0x1f8>
 8009c54:	7821      	ldrb	r1, [r4, #0]
 8009c56:	2203      	movs	r2, #3
 8009c58:	4650      	mov	r0, sl
 8009c5a:	f7f6 fac1 	bl	80001e0 <memchr>
 8009c5e:	b138      	cbz	r0, 8009c70 <_svfiprintf_r+0x150>
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	eba0 000a 	sub.w	r0, r0, sl
 8009c66:	2240      	movs	r2, #64	; 0x40
 8009c68:	4082      	lsls	r2, r0
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	3401      	adds	r4, #1
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c74:	4825      	ldr	r0, [pc, #148]	; (8009d0c <_svfiprintf_r+0x1ec>)
 8009c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c7a:	2206      	movs	r2, #6
 8009c7c:	f7f6 fab0 	bl	80001e0 <memchr>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d038      	beq.n	8009cf6 <_svfiprintf_r+0x1d6>
 8009c84:	4b22      	ldr	r3, [pc, #136]	; (8009d10 <_svfiprintf_r+0x1f0>)
 8009c86:	bb1b      	cbnz	r3, 8009cd0 <_svfiprintf_r+0x1b0>
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	3307      	adds	r3, #7
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	3308      	adds	r3, #8
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c96:	4433      	add	r3, r6
 8009c98:	9309      	str	r3, [sp, #36]	; 0x24
 8009c9a:	e768      	b.n	8009b6e <_svfiprintf_r+0x4e>
 8009c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	e7a6      	b.n	8009bf4 <_svfiprintf_r+0xd4>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	3401      	adds	r4, #1
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	4619      	mov	r1, r3
 8009cae:	f04f 0c0a 	mov.w	ip, #10
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb8:	3a30      	subs	r2, #48	; 0x30
 8009cba:	2a09      	cmp	r2, #9
 8009cbc:	d903      	bls.n	8009cc6 <_svfiprintf_r+0x1a6>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0c6      	beq.n	8009c50 <_svfiprintf_r+0x130>
 8009cc2:	9105      	str	r1, [sp, #20]
 8009cc4:	e7c4      	b.n	8009c50 <_svfiprintf_r+0x130>
 8009cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cca:	4604      	mov	r4, r0
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e7f0      	b.n	8009cb2 <_svfiprintf_r+0x192>
 8009cd0:	ab03      	add	r3, sp, #12
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	462a      	mov	r2, r5
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <_svfiprintf_r+0x1f4>)
 8009cd8:	a904      	add	r1, sp, #16
 8009cda:	4638      	mov	r0, r7
 8009cdc:	f7fd fe62 	bl	80079a4 <_printf_float>
 8009ce0:	1c42      	adds	r2, r0, #1
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	d1d6      	bne.n	8009c94 <_svfiprintf_r+0x174>
 8009ce6:	89ab      	ldrh	r3, [r5, #12]
 8009ce8:	065b      	lsls	r3, r3, #25
 8009cea:	f53f af2d 	bmi.w	8009b48 <_svfiprintf_r+0x28>
 8009cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cf0:	b01d      	add	sp, #116	; 0x74
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	ab03      	add	r3, sp, #12
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <_svfiprintf_r+0x1f4>)
 8009cfe:	a904      	add	r1, sp, #16
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7fe f8f3 	bl	8007eec <_printf_i>
 8009d06:	e7eb      	b.n	8009ce0 <_svfiprintf_r+0x1c0>
 8009d08:	0800a7dc 	.word	0x0800a7dc
 8009d0c:	0800a7e6 	.word	0x0800a7e6
 8009d10:	080079a5 	.word	0x080079a5
 8009d14:	08009a6d 	.word	0x08009a6d
 8009d18:	0800a7e2 	.word	0x0800a7e2

08009d1c <__sflush_r>:
 8009d1c:	898a      	ldrh	r2, [r1, #12]
 8009d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	0710      	lsls	r0, r2, #28
 8009d26:	460c      	mov	r4, r1
 8009d28:	d458      	bmi.n	8009ddc <__sflush_r+0xc0>
 8009d2a:	684b      	ldr	r3, [r1, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dc05      	bgt.n	8009d3c <__sflush_r+0x20>
 8009d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dc02      	bgt.n	8009d3c <__sflush_r+0x20>
 8009d36:	2000      	movs	r0, #0
 8009d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d3e:	2e00      	cmp	r6, #0
 8009d40:	d0f9      	beq.n	8009d36 <__sflush_r+0x1a>
 8009d42:	2300      	movs	r3, #0
 8009d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d48:	682f      	ldr	r7, [r5, #0]
 8009d4a:	6a21      	ldr	r1, [r4, #32]
 8009d4c:	602b      	str	r3, [r5, #0]
 8009d4e:	d032      	beq.n	8009db6 <__sflush_r+0x9a>
 8009d50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	075a      	lsls	r2, r3, #29
 8009d56:	d505      	bpl.n	8009d64 <__sflush_r+0x48>
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	1ac0      	subs	r0, r0, r3
 8009d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d5e:	b10b      	cbz	r3, 8009d64 <__sflush_r+0x48>
 8009d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d62:	1ac0      	subs	r0, r0, r3
 8009d64:	2300      	movs	r3, #0
 8009d66:	4602      	mov	r2, r0
 8009d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d6a:	6a21      	ldr	r1, [r4, #32]
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	47b0      	blx	r6
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	d106      	bne.n	8009d84 <__sflush_r+0x68>
 8009d76:	6829      	ldr	r1, [r5, #0]
 8009d78:	291d      	cmp	r1, #29
 8009d7a:	d82b      	bhi.n	8009dd4 <__sflush_r+0xb8>
 8009d7c:	4a29      	ldr	r2, [pc, #164]	; (8009e24 <__sflush_r+0x108>)
 8009d7e:	410a      	asrs	r2, r1
 8009d80:	07d6      	lsls	r6, r2, #31
 8009d82:	d427      	bmi.n	8009dd4 <__sflush_r+0xb8>
 8009d84:	2200      	movs	r2, #0
 8009d86:	6062      	str	r2, [r4, #4]
 8009d88:	04d9      	lsls	r1, r3, #19
 8009d8a:	6922      	ldr	r2, [r4, #16]
 8009d8c:	6022      	str	r2, [r4, #0]
 8009d8e:	d504      	bpl.n	8009d9a <__sflush_r+0x7e>
 8009d90:	1c42      	adds	r2, r0, #1
 8009d92:	d101      	bne.n	8009d98 <__sflush_r+0x7c>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b903      	cbnz	r3, 8009d9a <__sflush_r+0x7e>
 8009d98:	6560      	str	r0, [r4, #84]	; 0x54
 8009d9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d9c:	602f      	str	r7, [r5, #0]
 8009d9e:	2900      	cmp	r1, #0
 8009da0:	d0c9      	beq.n	8009d36 <__sflush_r+0x1a>
 8009da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009da6:	4299      	cmp	r1, r3
 8009da8:	d002      	beq.n	8009db0 <__sflush_r+0x94>
 8009daa:	4628      	mov	r0, r5
 8009dac:	f7ff f9e2 	bl	8009174 <_free_r>
 8009db0:	2000      	movs	r0, #0
 8009db2:	6360      	str	r0, [r4, #52]	; 0x34
 8009db4:	e7c0      	b.n	8009d38 <__sflush_r+0x1c>
 8009db6:	2301      	movs	r3, #1
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b0      	blx	r6
 8009dbc:	1c41      	adds	r1, r0, #1
 8009dbe:	d1c8      	bne.n	8009d52 <__sflush_r+0x36>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0c5      	beq.n	8009d52 <__sflush_r+0x36>
 8009dc6:	2b1d      	cmp	r3, #29
 8009dc8:	d001      	beq.n	8009dce <__sflush_r+0xb2>
 8009dca:	2b16      	cmp	r3, #22
 8009dcc:	d101      	bne.n	8009dd2 <__sflush_r+0xb6>
 8009dce:	602f      	str	r7, [r5, #0]
 8009dd0:	e7b1      	b.n	8009d36 <__sflush_r+0x1a>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	e7ad      	b.n	8009d38 <__sflush_r+0x1c>
 8009ddc:	690f      	ldr	r7, [r1, #16]
 8009dde:	2f00      	cmp	r7, #0
 8009de0:	d0a9      	beq.n	8009d36 <__sflush_r+0x1a>
 8009de2:	0793      	lsls	r3, r2, #30
 8009de4:	680e      	ldr	r6, [r1, #0]
 8009de6:	bf08      	it	eq
 8009de8:	694b      	ldreq	r3, [r1, #20]
 8009dea:	600f      	str	r7, [r1, #0]
 8009dec:	bf18      	it	ne
 8009dee:	2300      	movne	r3, #0
 8009df0:	eba6 0807 	sub.w	r8, r6, r7
 8009df4:	608b      	str	r3, [r1, #8]
 8009df6:	f1b8 0f00 	cmp.w	r8, #0
 8009dfa:	dd9c      	ble.n	8009d36 <__sflush_r+0x1a>
 8009dfc:	6a21      	ldr	r1, [r4, #32]
 8009dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e00:	4643      	mov	r3, r8
 8009e02:	463a      	mov	r2, r7
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b0      	blx	r6
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	dc06      	bgt.n	8009e1a <__sflush_r+0xfe>
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	e78e      	b.n	8009d38 <__sflush_r+0x1c>
 8009e1a:	4407      	add	r7, r0
 8009e1c:	eba8 0800 	sub.w	r8, r8, r0
 8009e20:	e7e9      	b.n	8009df6 <__sflush_r+0xda>
 8009e22:	bf00      	nop
 8009e24:	dfbffffe 	.word	0xdfbffffe

08009e28 <_fflush_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	690b      	ldr	r3, [r1, #16]
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	460c      	mov	r4, r1
 8009e30:	b913      	cbnz	r3, 8009e38 <_fflush_r+0x10>
 8009e32:	2500      	movs	r5, #0
 8009e34:	4628      	mov	r0, r5
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	b118      	cbz	r0, 8009e42 <_fflush_r+0x1a>
 8009e3a:	6a03      	ldr	r3, [r0, #32]
 8009e3c:	b90b      	cbnz	r3, 8009e42 <_fflush_r+0x1a>
 8009e3e:	f7fe fa03 	bl	8008248 <__sinit>
 8009e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0f3      	beq.n	8009e32 <_fflush_r+0xa>
 8009e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e4c:	07d0      	lsls	r0, r2, #31
 8009e4e:	d404      	bmi.n	8009e5a <_fflush_r+0x32>
 8009e50:	0599      	lsls	r1, r3, #22
 8009e52:	d402      	bmi.n	8009e5a <_fflush_r+0x32>
 8009e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e56:	f7fe fb0e 	bl	8008476 <__retarget_lock_acquire_recursive>
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	f7ff ff5d 	bl	8009d1c <__sflush_r>
 8009e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e64:	07da      	lsls	r2, r3, #31
 8009e66:	4605      	mov	r5, r0
 8009e68:	d4e4      	bmi.n	8009e34 <_fflush_r+0xc>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	059b      	lsls	r3, r3, #22
 8009e6e:	d4e1      	bmi.n	8009e34 <_fflush_r+0xc>
 8009e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e72:	f7fe fb01 	bl	8008478 <__retarget_lock_release_recursive>
 8009e76:	e7dd      	b.n	8009e34 <_fflush_r+0xc>

08009e78 <memmove>:
 8009e78:	4288      	cmp	r0, r1
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	eb01 0402 	add.w	r4, r1, r2
 8009e80:	d902      	bls.n	8009e88 <memmove+0x10>
 8009e82:	4284      	cmp	r4, r0
 8009e84:	4623      	mov	r3, r4
 8009e86:	d807      	bhi.n	8009e98 <memmove+0x20>
 8009e88:	1e43      	subs	r3, r0, #1
 8009e8a:	42a1      	cmp	r1, r4
 8009e8c:	d008      	beq.n	8009ea0 <memmove+0x28>
 8009e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e96:	e7f8      	b.n	8009e8a <memmove+0x12>
 8009e98:	4402      	add	r2, r0
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	428a      	cmp	r2, r1
 8009e9e:	d100      	bne.n	8009ea2 <memmove+0x2a>
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eaa:	e7f7      	b.n	8009e9c <memmove+0x24>

08009eac <_sbrk_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_sbrk_r+0x1c>)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	f7f8 f9c6 	bl	8002248 <_sbrk>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_sbrk_r+0x1a>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_sbrk_r+0x1a>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20000738 	.word	0x20000738

08009ecc <memcpy>:
 8009ecc:	440a      	add	r2, r1
 8009ece:	4291      	cmp	r1, r2
 8009ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ed4:	d100      	bne.n	8009ed8 <memcpy+0xc>
 8009ed6:	4770      	bx	lr
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	d1f9      	bne.n	8009eda <memcpy+0xe>
 8009ee6:	bd10      	pop	{r4, pc}

08009ee8 <__assert_func>:
 8009ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eea:	4614      	mov	r4, r2
 8009eec:	461a      	mov	r2, r3
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <__assert_func+0x2c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	68d8      	ldr	r0, [r3, #12]
 8009ef6:	b14c      	cbz	r4, 8009f0c <__assert_func+0x24>
 8009ef8:	4b07      	ldr	r3, [pc, #28]	; (8009f18 <__assert_func+0x30>)
 8009efa:	9100      	str	r1, [sp, #0]
 8009efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f00:	4906      	ldr	r1, [pc, #24]	; (8009f1c <__assert_func+0x34>)
 8009f02:	462b      	mov	r3, r5
 8009f04:	f000 f872 	bl	8009fec <fiprintf>
 8009f08:	f000 f882 	bl	800a010 <abort>
 8009f0c:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <__assert_func+0x38>)
 8009f0e:	461c      	mov	r4, r3
 8009f10:	e7f3      	b.n	8009efa <__assert_func+0x12>
 8009f12:	bf00      	nop
 8009f14:	20000078 	.word	0x20000078
 8009f18:	0800a7f7 	.word	0x0800a7f7
 8009f1c:	0800a804 	.word	0x0800a804
 8009f20:	0800a832 	.word	0x0800a832

08009f24 <_calloc_r>:
 8009f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f26:	fba1 2402 	umull	r2, r4, r1, r2
 8009f2a:	b94c      	cbnz	r4, 8009f40 <_calloc_r+0x1c>
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	f7ff f994 	bl	800925c <_malloc_r>
 8009f34:	9a01      	ldr	r2, [sp, #4]
 8009f36:	4605      	mov	r5, r0
 8009f38:	b930      	cbnz	r0, 8009f48 <_calloc_r+0x24>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	b003      	add	sp, #12
 8009f3e:	bd30      	pop	{r4, r5, pc}
 8009f40:	220c      	movs	r2, #12
 8009f42:	6002      	str	r2, [r0, #0]
 8009f44:	2500      	movs	r5, #0
 8009f46:	e7f8      	b.n	8009f3a <_calloc_r+0x16>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	f7fe fa16 	bl	800837a <memset>
 8009f4e:	e7f4      	b.n	8009f3a <_calloc_r+0x16>

08009f50 <__ascii_mbtowc>:
 8009f50:	b082      	sub	sp, #8
 8009f52:	b901      	cbnz	r1, 8009f56 <__ascii_mbtowc+0x6>
 8009f54:	a901      	add	r1, sp, #4
 8009f56:	b142      	cbz	r2, 8009f6a <__ascii_mbtowc+0x1a>
 8009f58:	b14b      	cbz	r3, 8009f6e <__ascii_mbtowc+0x1e>
 8009f5a:	7813      	ldrb	r3, [r2, #0]
 8009f5c:	600b      	str	r3, [r1, #0]
 8009f5e:	7812      	ldrb	r2, [r2, #0]
 8009f60:	1e10      	subs	r0, r2, #0
 8009f62:	bf18      	it	ne
 8009f64:	2001      	movne	r0, #1
 8009f66:	b002      	add	sp, #8
 8009f68:	4770      	bx	lr
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	e7fb      	b.n	8009f66 <__ascii_mbtowc+0x16>
 8009f6e:	f06f 0001 	mvn.w	r0, #1
 8009f72:	e7f8      	b.n	8009f66 <__ascii_mbtowc+0x16>

08009f74 <_realloc_r>:
 8009f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	4680      	mov	r8, r0
 8009f7a:	4614      	mov	r4, r2
 8009f7c:	460e      	mov	r6, r1
 8009f7e:	b921      	cbnz	r1, 8009f8a <_realloc_r+0x16>
 8009f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	4611      	mov	r1, r2
 8009f86:	f7ff b969 	b.w	800925c <_malloc_r>
 8009f8a:	b92a      	cbnz	r2, 8009f98 <_realloc_r+0x24>
 8009f8c:	f7ff f8f2 	bl	8009174 <_free_r>
 8009f90:	4625      	mov	r5, r4
 8009f92:	4628      	mov	r0, r5
 8009f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f98:	f000 f841 	bl	800a01e <_malloc_usable_size_r>
 8009f9c:	4284      	cmp	r4, r0
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	d802      	bhi.n	8009fa8 <_realloc_r+0x34>
 8009fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fa6:	d812      	bhi.n	8009fce <_realloc_r+0x5a>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4640      	mov	r0, r8
 8009fac:	f7ff f956 	bl	800925c <_malloc_r>
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0ed      	beq.n	8009f92 <_realloc_r+0x1e>
 8009fb6:	42bc      	cmp	r4, r7
 8009fb8:	4622      	mov	r2, r4
 8009fba:	4631      	mov	r1, r6
 8009fbc:	bf28      	it	cs
 8009fbe:	463a      	movcs	r2, r7
 8009fc0:	f7ff ff84 	bl	8009ecc <memcpy>
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7ff f8d4 	bl	8009174 <_free_r>
 8009fcc:	e7e1      	b.n	8009f92 <_realloc_r+0x1e>
 8009fce:	4635      	mov	r5, r6
 8009fd0:	e7df      	b.n	8009f92 <_realloc_r+0x1e>

08009fd2 <__ascii_wctomb>:
 8009fd2:	b149      	cbz	r1, 8009fe8 <__ascii_wctomb+0x16>
 8009fd4:	2aff      	cmp	r2, #255	; 0xff
 8009fd6:	bf85      	ittet	hi
 8009fd8:	238a      	movhi	r3, #138	; 0x8a
 8009fda:	6003      	strhi	r3, [r0, #0]
 8009fdc:	700a      	strbls	r2, [r1, #0]
 8009fde:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fe2:	bf98      	it	ls
 8009fe4:	2001      	movls	r0, #1
 8009fe6:	4770      	bx	lr
 8009fe8:	4608      	mov	r0, r1
 8009fea:	4770      	bx	lr

08009fec <fiprintf>:
 8009fec:	b40e      	push	{r1, r2, r3}
 8009fee:	b503      	push	{r0, r1, lr}
 8009ff0:	4601      	mov	r1, r0
 8009ff2:	ab03      	add	r3, sp, #12
 8009ff4:	4805      	ldr	r0, [pc, #20]	; (800a00c <fiprintf+0x20>)
 8009ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffa:	6800      	ldr	r0, [r0, #0]
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	f000 f83f 	bl	800a080 <_vfiprintf_r>
 800a002:	b002      	add	sp, #8
 800a004:	f85d eb04 	ldr.w	lr, [sp], #4
 800a008:	b003      	add	sp, #12
 800a00a:	4770      	bx	lr
 800a00c:	20000078 	.word	0x20000078

0800a010 <abort>:
 800a010:	b508      	push	{r3, lr}
 800a012:	2006      	movs	r0, #6
 800a014:	f000 fa0c 	bl	800a430 <raise>
 800a018:	2001      	movs	r0, #1
 800a01a:	f7f8 f89d 	bl	8002158 <_exit>

0800a01e <_malloc_usable_size_r>:
 800a01e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a022:	1f18      	subs	r0, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfbc      	itt	lt
 800a028:	580b      	ldrlt	r3, [r1, r0]
 800a02a:	18c0      	addlt	r0, r0, r3
 800a02c:	4770      	bx	lr

0800a02e <__sfputc_r>:
 800a02e:	6893      	ldr	r3, [r2, #8]
 800a030:	3b01      	subs	r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	b410      	push	{r4}
 800a036:	6093      	str	r3, [r2, #8]
 800a038:	da08      	bge.n	800a04c <__sfputc_r+0x1e>
 800a03a:	6994      	ldr	r4, [r2, #24]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	db01      	blt.n	800a044 <__sfputc_r+0x16>
 800a040:	290a      	cmp	r1, #10
 800a042:	d103      	bne.n	800a04c <__sfputc_r+0x1e>
 800a044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a048:	f000 b934 	b.w	800a2b4 <__swbuf_r>
 800a04c:	6813      	ldr	r3, [r2, #0]
 800a04e:	1c58      	adds	r0, r3, #1
 800a050:	6010      	str	r0, [r2, #0]
 800a052:	7019      	strb	r1, [r3, #0]
 800a054:	4608      	mov	r0, r1
 800a056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <__sfputs_r>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	4606      	mov	r6, r0
 800a060:	460f      	mov	r7, r1
 800a062:	4614      	mov	r4, r2
 800a064:	18d5      	adds	r5, r2, r3
 800a066:	42ac      	cmp	r4, r5
 800a068:	d101      	bne.n	800a06e <__sfputs_r+0x12>
 800a06a:	2000      	movs	r0, #0
 800a06c:	e007      	b.n	800a07e <__sfputs_r+0x22>
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	463a      	mov	r2, r7
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff ffda 	bl	800a02e <__sfputc_r>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	d1f3      	bne.n	800a066 <__sfputs_r+0xa>
 800a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a080 <_vfiprintf_r>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	460d      	mov	r5, r1
 800a086:	b09d      	sub	sp, #116	; 0x74
 800a088:	4614      	mov	r4, r2
 800a08a:	4698      	mov	r8, r3
 800a08c:	4606      	mov	r6, r0
 800a08e:	b118      	cbz	r0, 800a098 <_vfiprintf_r+0x18>
 800a090:	6a03      	ldr	r3, [r0, #32]
 800a092:	b90b      	cbnz	r3, 800a098 <_vfiprintf_r+0x18>
 800a094:	f7fe f8d8 	bl	8008248 <__sinit>
 800a098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a09a:	07d9      	lsls	r1, r3, #31
 800a09c:	d405      	bmi.n	800a0aa <_vfiprintf_r+0x2a>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d402      	bmi.n	800a0aa <_vfiprintf_r+0x2a>
 800a0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a6:	f7fe f9e6 	bl	8008476 <__retarget_lock_acquire_recursive>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	071b      	lsls	r3, r3, #28
 800a0ae:	d501      	bpl.n	800a0b4 <_vfiprintf_r+0x34>
 800a0b0:	692b      	ldr	r3, [r5, #16]
 800a0b2:	b99b      	cbnz	r3, 800a0dc <_vfiprintf_r+0x5c>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f000 f93a 	bl	800a330 <__swsetup_r>
 800a0bc:	b170      	cbz	r0, 800a0dc <_vfiprintf_r+0x5c>
 800a0be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c0:	07dc      	lsls	r4, r3, #31
 800a0c2:	d504      	bpl.n	800a0ce <_vfiprintf_r+0x4e>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b01d      	add	sp, #116	; 0x74
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	0598      	lsls	r0, r3, #22
 800a0d2:	d4f7      	bmi.n	800a0c4 <_vfiprintf_r+0x44>
 800a0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d6:	f7fe f9cf 	bl	8008478 <__retarget_lock_release_recursive>
 800a0da:	e7f3      	b.n	800a0c4 <_vfiprintf_r+0x44>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e0:	2320      	movs	r3, #32
 800a0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0ea:	2330      	movs	r3, #48	; 0x30
 800a0ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2a0 <_vfiprintf_r+0x220>
 800a0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f4:	f04f 0901 	mov.w	r9, #1
 800a0f8:	4623      	mov	r3, r4
 800a0fa:	469a      	mov	sl, r3
 800a0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a100:	b10a      	cbz	r2, 800a106 <_vfiprintf_r+0x86>
 800a102:	2a25      	cmp	r2, #37	; 0x25
 800a104:	d1f9      	bne.n	800a0fa <_vfiprintf_r+0x7a>
 800a106:	ebba 0b04 	subs.w	fp, sl, r4
 800a10a:	d00b      	beq.n	800a124 <_vfiprintf_r+0xa4>
 800a10c:	465b      	mov	r3, fp
 800a10e:	4622      	mov	r2, r4
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ffa2 	bl	800a05c <__sfputs_r>
 800a118:	3001      	adds	r0, #1
 800a11a:	f000 80a9 	beq.w	800a270 <_vfiprintf_r+0x1f0>
 800a11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a120:	445a      	add	r2, fp
 800a122:	9209      	str	r2, [sp, #36]	; 0x24
 800a124:	f89a 3000 	ldrb.w	r3, [sl]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 80a1 	beq.w	800a270 <_vfiprintf_r+0x1f0>
 800a12e:	2300      	movs	r3, #0
 800a130:	f04f 32ff 	mov.w	r2, #4294967295
 800a134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a138:	f10a 0a01 	add.w	sl, sl, #1
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a144:	931a      	str	r3, [sp, #104]	; 0x68
 800a146:	4654      	mov	r4, sl
 800a148:	2205      	movs	r2, #5
 800a14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14e:	4854      	ldr	r0, [pc, #336]	; (800a2a0 <_vfiprintf_r+0x220>)
 800a150:	f7f6 f846 	bl	80001e0 <memchr>
 800a154:	9a04      	ldr	r2, [sp, #16]
 800a156:	b9d8      	cbnz	r0, 800a190 <_vfiprintf_r+0x110>
 800a158:	06d1      	lsls	r1, r2, #27
 800a15a:	bf44      	itt	mi
 800a15c:	2320      	movmi	r3, #32
 800a15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a162:	0713      	lsls	r3, r2, #28
 800a164:	bf44      	itt	mi
 800a166:	232b      	movmi	r3, #43	; 0x2b
 800a168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a16c:	f89a 3000 	ldrb.w	r3, [sl]
 800a170:	2b2a      	cmp	r3, #42	; 0x2a
 800a172:	d015      	beq.n	800a1a0 <_vfiprintf_r+0x120>
 800a174:	9a07      	ldr	r2, [sp, #28]
 800a176:	4654      	mov	r4, sl
 800a178:	2000      	movs	r0, #0
 800a17a:	f04f 0c0a 	mov.w	ip, #10
 800a17e:	4621      	mov	r1, r4
 800a180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a184:	3b30      	subs	r3, #48	; 0x30
 800a186:	2b09      	cmp	r3, #9
 800a188:	d94d      	bls.n	800a226 <_vfiprintf_r+0x1a6>
 800a18a:	b1b0      	cbz	r0, 800a1ba <_vfiprintf_r+0x13a>
 800a18c:	9207      	str	r2, [sp, #28]
 800a18e:	e014      	b.n	800a1ba <_vfiprintf_r+0x13a>
 800a190:	eba0 0308 	sub.w	r3, r0, r8
 800a194:	fa09 f303 	lsl.w	r3, r9, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	46a2      	mov	sl, r4
 800a19e:	e7d2      	b.n	800a146 <_vfiprintf_r+0xc6>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d19      	adds	r1, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9103      	str	r1, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfbb      	ittet	lt
 800a1ac:	425b      	neglt	r3, r3
 800a1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b2:	9307      	strge	r3, [sp, #28]
 800a1b4:	9307      	strlt	r3, [sp, #28]
 800a1b6:	bfb8      	it	lt
 800a1b8:	9204      	strlt	r2, [sp, #16]
 800a1ba:	7823      	ldrb	r3, [r4, #0]
 800a1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a1be:	d10c      	bne.n	800a1da <_vfiprintf_r+0x15a>
 800a1c0:	7863      	ldrb	r3, [r4, #1]
 800a1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c4:	d134      	bne.n	800a230 <_vfiprintf_r+0x1b0>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	1d1a      	adds	r2, r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	9203      	str	r2, [sp, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfb8      	it	lt
 800a1d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1d6:	3402      	adds	r4, #2
 800a1d8:	9305      	str	r3, [sp, #20]
 800a1da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2b0 <_vfiprintf_r+0x230>
 800a1de:	7821      	ldrb	r1, [r4, #0]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	f7f5 fffc 	bl	80001e0 <memchr>
 800a1e8:	b138      	cbz	r0, 800a1fa <_vfiprintf_r+0x17a>
 800a1ea:	9b04      	ldr	r3, [sp, #16]
 800a1ec:	eba0 000a 	sub.w	r0, r0, sl
 800a1f0:	2240      	movs	r2, #64	; 0x40
 800a1f2:	4082      	lsls	r2, r0
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	3401      	adds	r4, #1
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fe:	4829      	ldr	r0, [pc, #164]	; (800a2a4 <_vfiprintf_r+0x224>)
 800a200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a204:	2206      	movs	r2, #6
 800a206:	f7f5 ffeb 	bl	80001e0 <memchr>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d03f      	beq.n	800a28e <_vfiprintf_r+0x20e>
 800a20e:	4b26      	ldr	r3, [pc, #152]	; (800a2a8 <_vfiprintf_r+0x228>)
 800a210:	bb1b      	cbnz	r3, 800a25a <_vfiprintf_r+0x1da>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	3307      	adds	r3, #7
 800a216:	f023 0307 	bic.w	r3, r3, #7
 800a21a:	3308      	adds	r3, #8
 800a21c:	9303      	str	r3, [sp, #12]
 800a21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a220:	443b      	add	r3, r7
 800a222:	9309      	str	r3, [sp, #36]	; 0x24
 800a224:	e768      	b.n	800a0f8 <_vfiprintf_r+0x78>
 800a226:	fb0c 3202 	mla	r2, ip, r2, r3
 800a22a:	460c      	mov	r4, r1
 800a22c:	2001      	movs	r0, #1
 800a22e:	e7a6      	b.n	800a17e <_vfiprintf_r+0xfe>
 800a230:	2300      	movs	r3, #0
 800a232:	3401      	adds	r4, #1
 800a234:	9305      	str	r3, [sp, #20]
 800a236:	4619      	mov	r1, r3
 800a238:	f04f 0c0a 	mov.w	ip, #10
 800a23c:	4620      	mov	r0, r4
 800a23e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a242:	3a30      	subs	r2, #48	; 0x30
 800a244:	2a09      	cmp	r2, #9
 800a246:	d903      	bls.n	800a250 <_vfiprintf_r+0x1d0>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0c6      	beq.n	800a1da <_vfiprintf_r+0x15a>
 800a24c:	9105      	str	r1, [sp, #20]
 800a24e:	e7c4      	b.n	800a1da <_vfiprintf_r+0x15a>
 800a250:	fb0c 2101 	mla	r1, ip, r1, r2
 800a254:	4604      	mov	r4, r0
 800a256:	2301      	movs	r3, #1
 800a258:	e7f0      	b.n	800a23c <_vfiprintf_r+0x1bc>
 800a25a:	ab03      	add	r3, sp, #12
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	462a      	mov	r2, r5
 800a260:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <_vfiprintf_r+0x22c>)
 800a262:	a904      	add	r1, sp, #16
 800a264:	4630      	mov	r0, r6
 800a266:	f7fd fb9d 	bl	80079a4 <_printf_float>
 800a26a:	4607      	mov	r7, r0
 800a26c:	1c78      	adds	r0, r7, #1
 800a26e:	d1d6      	bne.n	800a21e <_vfiprintf_r+0x19e>
 800a270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a272:	07d9      	lsls	r1, r3, #31
 800a274:	d405      	bmi.n	800a282 <_vfiprintf_r+0x202>
 800a276:	89ab      	ldrh	r3, [r5, #12]
 800a278:	059a      	lsls	r2, r3, #22
 800a27a:	d402      	bmi.n	800a282 <_vfiprintf_r+0x202>
 800a27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27e:	f7fe f8fb 	bl	8008478 <__retarget_lock_release_recursive>
 800a282:	89ab      	ldrh	r3, [r5, #12]
 800a284:	065b      	lsls	r3, r3, #25
 800a286:	f53f af1d 	bmi.w	800a0c4 <_vfiprintf_r+0x44>
 800a28a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a28c:	e71c      	b.n	800a0c8 <_vfiprintf_r+0x48>
 800a28e:	ab03      	add	r3, sp, #12
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	462a      	mov	r2, r5
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <_vfiprintf_r+0x22c>)
 800a296:	a904      	add	r1, sp, #16
 800a298:	4630      	mov	r0, r6
 800a29a:	f7fd fe27 	bl	8007eec <_printf_i>
 800a29e:	e7e4      	b.n	800a26a <_vfiprintf_r+0x1ea>
 800a2a0:	0800a7dc 	.word	0x0800a7dc
 800a2a4:	0800a7e6 	.word	0x0800a7e6
 800a2a8:	080079a5 	.word	0x080079a5
 800a2ac:	0800a05d 	.word	0x0800a05d
 800a2b0:	0800a7e2 	.word	0x0800a7e2

0800a2b4 <__swbuf_r>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	460e      	mov	r6, r1
 800a2b8:	4614      	mov	r4, r2
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	b118      	cbz	r0, 800a2c6 <__swbuf_r+0x12>
 800a2be:	6a03      	ldr	r3, [r0, #32]
 800a2c0:	b90b      	cbnz	r3, 800a2c6 <__swbuf_r+0x12>
 800a2c2:	f7fd ffc1 	bl	8008248 <__sinit>
 800a2c6:	69a3      	ldr	r3, [r4, #24]
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	071a      	lsls	r2, r3, #28
 800a2ce:	d525      	bpl.n	800a31c <__swbuf_r+0x68>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b31b      	cbz	r3, 800a31c <__swbuf_r+0x68>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	6922      	ldr	r2, [r4, #16]
 800a2d8:	1a98      	subs	r0, r3, r2
 800a2da:	6963      	ldr	r3, [r4, #20]
 800a2dc:	b2f6      	uxtb	r6, r6
 800a2de:	4283      	cmp	r3, r0
 800a2e0:	4637      	mov	r7, r6
 800a2e2:	dc04      	bgt.n	800a2ee <__swbuf_r+0x3a>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f7ff fd9e 	bl	8009e28 <_fflush_r>
 800a2ec:	b9e0      	cbnz	r0, 800a328 <__swbuf_r+0x74>
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	60a3      	str	r3, [r4, #8]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	701e      	strb	r6, [r3, #0]
 800a2fc:	6962      	ldr	r2, [r4, #20]
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	429a      	cmp	r2, r3
 800a302:	d004      	beq.n	800a30e <__swbuf_r+0x5a>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	07db      	lsls	r3, r3, #31
 800a308:	d506      	bpl.n	800a318 <__swbuf_r+0x64>
 800a30a:	2e0a      	cmp	r6, #10
 800a30c:	d104      	bne.n	800a318 <__swbuf_r+0x64>
 800a30e:	4621      	mov	r1, r4
 800a310:	4628      	mov	r0, r5
 800a312:	f7ff fd89 	bl	8009e28 <_fflush_r>
 800a316:	b938      	cbnz	r0, 800a328 <__swbuf_r+0x74>
 800a318:	4638      	mov	r0, r7
 800a31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31c:	4621      	mov	r1, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	f000 f806 	bl	800a330 <__swsetup_r>
 800a324:	2800      	cmp	r0, #0
 800a326:	d0d5      	beq.n	800a2d4 <__swbuf_r+0x20>
 800a328:	f04f 37ff 	mov.w	r7, #4294967295
 800a32c:	e7f4      	b.n	800a318 <__swbuf_r+0x64>
	...

0800a330 <__swsetup_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4b2a      	ldr	r3, [pc, #168]	; (800a3dc <__swsetup_r+0xac>)
 800a334:	4605      	mov	r5, r0
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	460c      	mov	r4, r1
 800a33a:	b118      	cbz	r0, 800a344 <__swsetup_r+0x14>
 800a33c:	6a03      	ldr	r3, [r0, #32]
 800a33e:	b90b      	cbnz	r3, 800a344 <__swsetup_r+0x14>
 800a340:	f7fd ff82 	bl	8008248 <__sinit>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a34a:	0718      	lsls	r0, r3, #28
 800a34c:	d422      	bmi.n	800a394 <__swsetup_r+0x64>
 800a34e:	06d9      	lsls	r1, r3, #27
 800a350:	d407      	bmi.n	800a362 <__swsetup_r+0x32>
 800a352:	2309      	movs	r3, #9
 800a354:	602b      	str	r3, [r5, #0]
 800a356:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	e034      	b.n	800a3cc <__swsetup_r+0x9c>
 800a362:	0758      	lsls	r0, r3, #29
 800a364:	d512      	bpl.n	800a38c <__swsetup_r+0x5c>
 800a366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a368:	b141      	cbz	r1, 800a37c <__swsetup_r+0x4c>
 800a36a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a36e:	4299      	cmp	r1, r3
 800a370:	d002      	beq.n	800a378 <__swsetup_r+0x48>
 800a372:	4628      	mov	r0, r5
 800a374:	f7fe fefe 	bl	8009174 <_free_r>
 800a378:	2300      	movs	r3, #0
 800a37a:	6363      	str	r3, [r4, #52]	; 0x34
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	2300      	movs	r3, #0
 800a386:	6063      	str	r3, [r4, #4]
 800a388:	6923      	ldr	r3, [r4, #16]
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	f043 0308 	orr.w	r3, r3, #8
 800a392:	81a3      	strh	r3, [r4, #12]
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	b94b      	cbnz	r3, 800a3ac <__swsetup_r+0x7c>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a39e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a2:	d003      	beq.n	800a3ac <__swsetup_r+0x7c>
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 f884 	bl	800a4b4 <__smakebuf_r>
 800a3ac:	89a0      	ldrh	r0, [r4, #12]
 800a3ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b2:	f010 0301 	ands.w	r3, r0, #1
 800a3b6:	d00a      	beq.n	800a3ce <__swsetup_r+0x9e>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60a3      	str	r3, [r4, #8]
 800a3bc:	6963      	ldr	r3, [r4, #20]
 800a3be:	425b      	negs	r3, r3
 800a3c0:	61a3      	str	r3, [r4, #24]
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	b943      	cbnz	r3, 800a3d8 <__swsetup_r+0xa8>
 800a3c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3ca:	d1c4      	bne.n	800a356 <__swsetup_r+0x26>
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
 800a3ce:	0781      	lsls	r1, r0, #30
 800a3d0:	bf58      	it	pl
 800a3d2:	6963      	ldrpl	r3, [r4, #20]
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	e7f4      	b.n	800a3c2 <__swsetup_r+0x92>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e7f7      	b.n	800a3cc <__swsetup_r+0x9c>
 800a3dc:	20000078 	.word	0x20000078

0800a3e0 <_raise_r>:
 800a3e0:	291f      	cmp	r1, #31
 800a3e2:	b538      	push	{r3, r4, r5, lr}
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	460d      	mov	r5, r1
 800a3e8:	d904      	bls.n	800a3f4 <_raise_r+0x14>
 800a3ea:	2316      	movs	r3, #22
 800a3ec:	6003      	str	r3, [r0, #0]
 800a3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a3f6:	b112      	cbz	r2, 800a3fe <_raise_r+0x1e>
 800a3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3fc:	b94b      	cbnz	r3, 800a412 <_raise_r+0x32>
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 f830 	bl	800a464 <_getpid_r>
 800a404:	462a      	mov	r2, r5
 800a406:	4601      	mov	r1, r0
 800a408:	4620      	mov	r0, r4
 800a40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a40e:	f000 b817 	b.w	800a440 <_kill_r>
 800a412:	2b01      	cmp	r3, #1
 800a414:	d00a      	beq.n	800a42c <_raise_r+0x4c>
 800a416:	1c59      	adds	r1, r3, #1
 800a418:	d103      	bne.n	800a422 <_raise_r+0x42>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	2001      	movs	r0, #1
 800a420:	e7e7      	b.n	800a3f2 <_raise_r+0x12>
 800a422:	2400      	movs	r4, #0
 800a424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a428:	4628      	mov	r0, r5
 800a42a:	4798      	blx	r3
 800a42c:	2000      	movs	r0, #0
 800a42e:	e7e0      	b.n	800a3f2 <_raise_r+0x12>

0800a430 <raise>:
 800a430:	4b02      	ldr	r3, [pc, #8]	; (800a43c <raise+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f7ff bfd3 	b.w	800a3e0 <_raise_r>
 800a43a:	bf00      	nop
 800a43c:	20000078 	.word	0x20000078

0800a440 <_kill_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	; (800a460 <_kill_r+0x20>)
 800a444:	2300      	movs	r3, #0
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	4611      	mov	r1, r2
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	f7f7 fe73 	bl	8002138 <_kill>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d102      	bne.n	800a45c <_kill_r+0x1c>
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	b103      	cbz	r3, 800a45c <_kill_r+0x1c>
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	bd38      	pop	{r3, r4, r5, pc}
 800a45e:	bf00      	nop
 800a460:	20000738 	.word	0x20000738

0800a464 <_getpid_r>:
 800a464:	f7f7 be60 	b.w	8002128 <_getpid>

0800a468 <__swhatbuf_r>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a470:	2900      	cmp	r1, #0
 800a472:	b096      	sub	sp, #88	; 0x58
 800a474:	4615      	mov	r5, r2
 800a476:	461e      	mov	r6, r3
 800a478:	da0d      	bge.n	800a496 <__swhatbuf_r+0x2e>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a480:	f04f 0100 	mov.w	r1, #0
 800a484:	bf0c      	ite	eq
 800a486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a48a:	2340      	movne	r3, #64	; 0x40
 800a48c:	2000      	movs	r0, #0
 800a48e:	6031      	str	r1, [r6, #0]
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	b016      	add	sp, #88	; 0x58
 800a494:	bd70      	pop	{r4, r5, r6, pc}
 800a496:	466a      	mov	r2, sp
 800a498:	f000 f848 	bl	800a52c <_fstat_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dbec      	blt.n	800a47a <__swhatbuf_r+0x12>
 800a4a0:	9901      	ldr	r1, [sp, #4]
 800a4a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a4a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a4aa:	4259      	negs	r1, r3
 800a4ac:	4159      	adcs	r1, r3
 800a4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b2:	e7eb      	b.n	800a48c <__swhatbuf_r+0x24>

0800a4b4 <__smakebuf_r>:
 800a4b4:	898b      	ldrh	r3, [r1, #12]
 800a4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4b8:	079d      	lsls	r5, r3, #30
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460c      	mov	r4, r1
 800a4be:	d507      	bpl.n	800a4d0 <__smakebuf_r+0x1c>
 800a4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	6163      	str	r3, [r4, #20]
 800a4cc:	b002      	add	sp, #8
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	ab01      	add	r3, sp, #4
 800a4d2:	466a      	mov	r2, sp
 800a4d4:	f7ff ffc8 	bl	800a468 <__swhatbuf_r>
 800a4d8:	9900      	ldr	r1, [sp, #0]
 800a4da:	4605      	mov	r5, r0
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7fe febd 	bl	800925c <_malloc_r>
 800a4e2:	b948      	cbnz	r0, 800a4f8 <__smakebuf_r+0x44>
 800a4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e8:	059a      	lsls	r2, r3, #22
 800a4ea:	d4ef      	bmi.n	800a4cc <__smakebuf_r+0x18>
 800a4ec:	f023 0303 	bic.w	r3, r3, #3
 800a4f0:	f043 0302 	orr.w	r3, r3, #2
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	e7e3      	b.n	800a4c0 <__smakebuf_r+0xc>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	6020      	str	r0, [r4, #0]
 800a4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	9b00      	ldr	r3, [sp, #0]
 800a504:	6163      	str	r3, [r4, #20]
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	6120      	str	r0, [r4, #16]
 800a50a:	b15b      	cbz	r3, 800a524 <__smakebuf_r+0x70>
 800a50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a510:	4630      	mov	r0, r6
 800a512:	f000 f81d 	bl	800a550 <_isatty_r>
 800a516:	b128      	cbz	r0, 800a524 <__smakebuf_r+0x70>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f023 0303 	bic.w	r3, r3, #3
 800a51e:	f043 0301 	orr.w	r3, r3, #1
 800a522:	81a3      	strh	r3, [r4, #12]
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	431d      	orrs	r5, r3
 800a528:	81a5      	strh	r5, [r4, #12]
 800a52a:	e7cf      	b.n	800a4cc <__smakebuf_r+0x18>

0800a52c <_fstat_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	; (800a54c <_fstat_r+0x20>)
 800a530:	2300      	movs	r3, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	f7f7 fe5c 	bl	80021f6 <_fstat>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	d102      	bne.n	800a548 <_fstat_r+0x1c>
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	b103      	cbz	r3, 800a548 <_fstat_r+0x1c>
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	bd38      	pop	{r3, r4, r5, pc}
 800a54a:	bf00      	nop
 800a54c:	20000738 	.word	0x20000738

0800a550 <_isatty_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d06      	ldr	r5, [pc, #24]	; (800a56c <_isatty_r+0x1c>)
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	602b      	str	r3, [r5, #0]
 800a55c:	f7f7 fe5b 	bl	8002216 <_isatty>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_isatty_r+0x1a>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_isatty_r+0x1a>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20000738 	.word	0x20000738

0800a570 <_init>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr

0800a57c <_fini>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr
